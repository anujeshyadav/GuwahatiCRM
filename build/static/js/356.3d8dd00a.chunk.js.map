{"version":3,"sources":["views/dashboard/ecommerce/FaceDetector.js","views/apps/freshlist/accounts/CreateAccount.js","../node_modules/reactstrap/es/FormGroup.js"],"names":["CameraApp","videoRef","useRef","canvasRef","startCamera","navigator","mediaDevices","getUserMedia","video","facingMode","stream","current","srcObject","console","error","ref","autoPlay","playsInline","onClick","canvas","ctx","getContext","drawImage","width","height","FaceDetector","detect","then","faces","forEach","face","beginPath","lineWidth","strokeStyle","rect","boundingBox","x","y","stroke","catch","err","style","display","i","CreateAccount","useState","CreatAccountView","setCreatAccountView","WareHouseList","setWareHouseList","SelectedWareHouse","setSelectedWareHouse","BulkImport","setBulkImport","Master","setMaster","formData","setFormData","dropdownValue","setdropdownValue","Country_State_city","setCountry_State_city","AllAssignRoleList","setAllAssignRoleList","SelectedRoleToAssign","setSelectedRoleToAssign","index","setindex","setError","WareHouseIncharge","setWareHouseIncharge","Context","useContext","UserContext","history","useHistory","handleInputChange","e","type","target","name","value","checked","test","length","useEffect","userInfo","JSON","parse","localStorage","getItem","geolocation","getCurrentPosition","position","coords","latitude","longitude","log","swal","enableHighAccuracy","_Get","Created_Warehouse","database","res","Warehouse","userdata","_GetList","country_state_City_List","rolename","Role_list_by_Master","_id","Superadmin","Role","filter","ele","roleName","toLowerCase","includes","WithoutSuperadmin","Get_RoleList","item","CreateAccountView","jsonData","xmlJs","xml2json","data","compact","spaces","CreateUser","input","submitHandler","preventDefault","wareHouse","map","id","undefined","formdata","FormData","append","_BulkUpload","Bulk_Upload_User","message","email","firstName","CreateAccountSave","status","userData","payload","Roles","role","desc","rank","rolePermission","createdBy","User","_PostSave","Assign_Role_To_SuperAdmin","Super_Admin_List","setItem","stringify","SuperAdmin","goBack","response","Card","Row","Col","className","render","Button","cursor","color","push","Form","onSubmit","lg","md","FormGroup","Label","CustomInput","required","onChange","selectedName","options","selectedIndex","getAttribute","selectedPosition","data-id","data-name","showCheckbox","isObject","onSelect","selectedList","selectedItem","onRemove","removedItem","displayValue","Input","placeholder","moment","tz","format","phoneinput","key","sm","label","_text","inputClass","country","onKeyDown","_attributes","countryCodeEditable","phone","library","disabled","dateFormat","UserInformatio","timeZone","SelectedCity","Pincode","StateName","District","number","onWheel","files","marginRight","Ripple","_excluded","propTypes","children","PropTypes","node","row","bool","check","inline","tag","tagPropType","string","cssModule","object","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps"],"mappings":"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","file":"static/js/356.3d8dd00a.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\r\n\r\nconst CameraApp = () => {\r\n  const videoRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n\r\n  const startCamera = async () => {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({\r\n        video: { facingMode: \"user\" },\r\n      });\r\n      videoRef.current.srcObject = stream;\r\n    } catch (err) {\r\n      console.error(\"Error accessing camera:\", err);\r\n    }\r\n  };\r\n\r\n  const detectFace = () => {\r\n    const video = videoRef.current;\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    // Draw video frame onto the canvas\r\n    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n\r\n    // Use FaceDetector API to detect faces\r\n    const faceDetector = new FaceDetector();\r\n    faceDetector\r\n      .detect(canvas)\r\n      .then((faces) => {\r\n        // Draw rectangles around detected faces\r\n        faces.forEach((face) => {\r\n          ctx.beginPath();\r\n          ctx.lineWidth = \"2\";\r\n          ctx.strokeStyle = \"red\";\r\n          ctx.rect(\r\n            face.boundingBox.x,\r\n            face.boundingBox.y,\r\n            face.boundingBox.width,\r\n            face.boundingBox.height\r\n          );\r\n          ctx.stroke();\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.error(\"Error detecting faces:\", err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <video ref={videoRef} autoPlay playsInline />\r\n      <button onClick={startCamera}>Start Camera</button>\r\n      <button onClick={detectFace}>Detect Face</button>\r\n      <canvas ref={canvasRef} style={{ display: \"none\" }} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CameraApp;\r\n","import React, { useEffect, useState, useContext } from \"react\";\r\nimport xmlJs from \"xml-js\";\r\nimport Multiselect from \"multiselect-react-dropdown\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Form,\r\n  Row,\r\n  Input,\r\n  Label,\r\n  Button,\r\n  FormGroup,\r\n  CustomInput,\r\n  Badge,\r\n} from \"reactstrap\";\r\nimport FaceDetector from \"../../../dashboard/ecommerce/FaceDetector\";\r\nimport { history } from \"../../../../history\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Country, State, City } from \"country-state-city\";\r\nimport Select from \"react-select\";\r\nimport moment from \"moment-timezone\";\r\nimport { Route, useHistory } from \"react-router-dom\";\r\n\r\nimport swal from \"sweetalert\";\r\nimport \"../../../../../src/layouts/assets/scss/pages/users.scss\";\r\n\r\nimport {\r\n  CreateAccountSave,\r\n  CreateAccountView,\r\n  Get_RoleList,\r\n  _BulkUpload,\r\n  _Get,\r\n  _GetList,\r\n  _PostSave,\r\n} from \"../../../../ApiEndPoint/ApiCalling\";\r\n\r\nimport \"../../../../assets/scss/pages/users.scss\";\r\nimport UserContext from \"../../../../context/Context\";\r\n\r\nimport {\r\n  Assign_Role_To_SuperAdmin,\r\n  Bulk_Upload_User,\r\n  Created_Warehouse,\r\n  Role_list_by_Master,\r\n  Super_Admin_List,\r\n  country_state_City_List,\r\n} from \"../../../../ApiEndPoint/Api\";\r\n\r\nconst CreateAccount = () => {\r\n  const [CreatAccountView, setCreatAccountView] = useState([]);\r\n  const [WareHouseList, setWareHouseList] = useState([]);\r\n  const [SelectedWareHouse, setSelectedWareHouse] = useState([]);\r\n\r\n  const [BulkImport, setBulkImport] = useState(null);\r\n  const [Master, setMaster] = useState(false);\r\n  const [formData, setFormData] = useState({});\r\n  const [dropdownValue, setdropdownValue] = useState([]);\r\n  const [Country_State_city, setCountry_State_city] = useState([]);\r\n  const [AllAssignRoleList, setAllAssignRoleList] = useState([]);\r\n  const [SelectedRoleToAssign, setSelectedRoleToAssign] = useState([]);\r\n  const [index, setindex] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const [WareHouseIncharge, setWareHouseIncharge] = useState(false);\r\n  const [permissions, setpermissions] = useState({});\r\n\r\n  const Context = useContext(UserContext);\r\n  let history = useHistory();\r\n\r\n  const handleInputChange = (e, type, i) => {\r\n    const { name, value, checked } = e.target;\r\n    setindex(i);\r\n    if (type == \"checkbox\") {\r\n      if (checked) {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      } else {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      }\r\n    } else {\r\n      if (type == \"number\") {\r\n        if (/^\\d{0,10}$/.test(value)) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          setError(\"\");\r\n        } else {\r\n          setError(\r\n            \"Please enter a valid number with a maximum length of 10 digits\"\r\n          );\r\n        }\r\n      } else {\r\n        if (value.length <= 10) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          // console.log(value);\r\n          setError(\"\");\r\n        } else {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          // setError(\"Input length exceeds the maximum of 10 characters\");\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // useEffect(() => {\r\n  // console.log(formData);\r\n  // }, [formData]);\r\n  useEffect(() => {\r\n    let userInfo = JSON.parse(localStorage.getItem(\"userData\"));\r\n    const getLocation = () => {\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(\r\n          (position) => {\r\n            const { latitude, longitude } = position.coords;\r\n\r\n            console.log(position.coords);\r\n          },\r\n          (error) => {\r\n            swal(\"error\", error);\r\n          },\r\n          { enableHighAccuracy: true }\r\n        );\r\n      } else {\r\n        swal(\"Your Browser does not support Location\");\r\n      }\r\n      _Get(Created_Warehouse, userInfo?.database)\r\n        .then((res) => {\r\n          setWareHouseList(res?.Warehouse);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    };\r\n\r\n    getLocation();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let userdata = JSON.parse(localStorage.getItem(\"userData\"));\r\n    _GetList(country_state_City_List)\r\n      .then((res) => {\r\n        setCountry_State_city(res);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n    if (userdata?.rolename?.position === 0) {\r\n      setMaster(true);\r\n      _Get(Role_list_by_Master, userdata?._id)\r\n        .then((res) => {\r\n          let Superadmin = res?.Role?.filter((ele) =>\r\n            ele?.roleName?.toLowerCase()?.includes(\"superadmin\")\r\n          );\r\n          let WithoutSuperadmin = res?.Role?.filter(\r\n            (ele) => ele?.roleName !== \"SuperAdmin\"\r\n          );\r\n          if (Superadmin) {\r\n            setdropdownValue(Superadmin);\r\n          }\r\n\r\n          if (WithoutSuperadmin) {\r\n            setAllAssignRoleList(res?.Role);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          swal(\"Roles List Not found\");\r\n        });\r\n    } else {\r\n      Get_RoleList(userdata?._id, userdata?.database)\r\n        .then((res) => {\r\n          let ShowList = res?.Role?.filter(\r\n            (item, i) => item?.position > userdata?.rolename?.position\r\n          );\r\n          setdropdownValue(res?.Role);\r\n          // console.log(ShowList);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          swal(\"Roles List Not found\");\r\n        });\r\n    }\r\n    CreateAccountView()\r\n      .then((res) => {\r\n        const jsonData = xmlJs.xml2json(res.data, { compact: true, spaces: 2 });\r\n        setCreatAccountView(JSON.parse(jsonData)?.CreateUser?.input);\r\n        setdropdownValue(JSON.parse(jsonData));\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n\r\n    // console.log(userdata?._id);\r\n    // formData[\"created_by\"] = userdata?._id;\r\n  }, []);\r\n\r\n  // console.log(BulkImport);\r\n  const submitHandler = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (WareHouseIncharge) {\r\n      let wareHouse = SelectedWareHouse?.map((ele) => {\r\n        return { id: ele?._id };\r\n      });\r\n      formData[\"warehouse\"] = wareHouse;\r\n    }\r\n\r\n    if (Master) {\r\n      formData[\"position\"] = 1;\r\n    }\r\n    if (BulkImport !== null || BulkImport != undefined) {\r\n      let formdata = new FormData();\r\n      formdata.append(\"file\", BulkImport);\r\n\r\n      await _BulkUpload(Bulk_Upload_User, formdata)\r\n        .then((res) => {\r\n          swal(`${res?.message}`);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          swal(\"Something Went Wrong\");\r\n        });\r\n    } else {\r\n      if (formData?.rolename && formData?.email && formData?.firstName) {\r\n        if (error) {\r\n          swal(\"Error occured while Entering Details\");\r\n        } else {\r\n          CreateAccountSave(formData)\r\n            .then((res) => {\r\n              if (res?.status) {\r\n                let userData = JSON.parse(localStorage.getItem(\"userData\"));\r\n                let AssignDataBase = [];\r\n\r\n                if (SelectedRoleToAssign?.length) {\r\n                  AssignDataBase = SelectedRoleToAssign?.map((ele) => {\r\n                    return {\r\n                      role: {\r\n                        roleName: ele?.roleName,\r\n                        position: 0,\r\n                        desc: ele?.desc,\r\n                        rank: 0,\r\n                        rolePermission: ele?.rolePermission,\r\n                        database: formData[\"database\"],\r\n                        createdBy: userData?._id,\r\n                      },\r\n                    };\r\n                  });\r\n                  let payload = {\r\n                    Roles: AssignDataBase,\r\n                  };\r\n\r\n                  if (res?.User._id) {\r\n                    _PostSave(Assign_Role_To_SuperAdmin, payload)\r\n                      .then((res) => {\r\n                        console.log(res);\r\n                        _GetList(Super_Admin_List)\r\n                          .then((res) => {\r\n                            localStorage.setItem(\r\n                              \"AllSuper\",\r\n                              JSON.stringify(res?.SuperAdmin)\r\n                            );\r\n                          })\r\n                          .catch((err) => {\r\n                            console.log(err);\r\n                          });\r\n                        console.log(res);\r\n                      })\r\n                      .catch((err) => {\r\n                        // setLoader(false);\r\n\r\n                        console.log(err);\r\n                      });\r\n                  }\r\n                }\r\n                swal(\"User Created Successfully\");\r\n                history.goBack();\r\n              }\r\n            })\r\n            .catch((err) => {\r\n              console.log(err.response?.data?.message);\r\n              swal(`${err.response?.data?.message}`);\r\n            });\r\n        }\r\n      } else {\r\n        swal(\"Enter User Name Email and Select Role\");\r\n      }\r\n    }\r\n  };\r\n  const onSelect1 = (selectedList, selectedItem) => {\r\n    console.log(selectedList);\r\n    setSelectedRoleToAssign(selectedList);\r\n    // setProductList(selectedList[0].productItems);\r\n  };\r\n  const onRemove1 = (selectedList, removedItem) => {\r\n    console.log(selectedList);\r\n    setSelectedRoleToAssign(selectedList);\r\n\r\n    // console.log(index);\r\n  };\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Card>\r\n          <Row>\r\n            <Col>\r\n              <FaceDetector />\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"m-2\">\r\n            <Col>\r\n              <h1 className=\"float-left\">Create User</h1>\r\n            </Col>\r\n            <Col>\r\n              <div className=\"float-right\">\r\n                <Route\r\n                  render={({ history }) => (\r\n                    <Button\r\n                      style={{ cursor: \"pointer\" }}\r\n                      className=\"float-right mr-1\"\r\n                      color=\"primary\"\r\n                      onClick={() =>\r\n                        history.push(\"/app/SoftNumen/accounSearch\")\r\n                      }>\r\n                      {\" \"}\r\n                      Back\r\n                      {/* <FaPlus size={15} /> Create User */}\r\n                    </Button>\r\n                  )}\r\n                />\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          {/* <hr /> */}\r\n\r\n          <div className=\"px-1 \">\r\n            <Form className=\"m-1\" onSubmit={submitHandler}>\r\n              <Row className=\"mb-2\">\r\n                <Col lg=\"4\" md=\"4\">\r\n                  <FormGroup>\r\n                    <Label>Role List</Label>\r\n                    <CustomInput\r\n                      required\r\n                      type=\"select\"\r\n                      name=\"rolename\"\r\n                      value={formData[\"rolename\"]}\r\n                      onChange={(e) => {\r\n                        const selectedName =\r\n                          e.target.options[e.target.selectedIndex].getAttribute(\r\n                            \"data-name\"\r\n                          );\r\n                        const selectedPosition =\r\n                          e.target.options[e.target.selectedIndex].getAttribute(\r\n                            \"data-id\"\r\n                          );\r\n                        if (selectedPosition == \"WareHouse Incharge\") {\r\n                          setWareHouseIncharge(true);\r\n                        } else {\r\n                          setWareHouseIncharge(false);\r\n                        }\r\n                        if (\r\n                          selectedPosition?.toLowerCase()?.includes(\"admin\") ||\r\n                          selectedPosition\r\n                            ?.toLowerCase()\r\n                            ?.includes(\"superadmin\")\r\n                        ) {\r\n                          let userdata = JSON.parse(\r\n                            localStorage.getItem(\"userData\")\r\n                          );\r\n\r\n                          formData[\"created_by\"] = userdata?._id;\r\n                        }\r\n\r\n                        setFormData({\r\n                          ...formData,\r\n                          [\"rolename\"]: e.target.value,\r\n                          [\"database\"]: selectedName,\r\n                        });\r\n                      }}>\r\n                      <option>--select Role--</option>\r\n                      {dropdownValue &&\r\n                        dropdownValue?.length &&\r\n                        dropdownValue?.map((ele, i) => {\r\n                          return (\r\n                            <option\r\n                              data-id={ele?.roleName}\r\n                              data-name={ele?.database}\r\n                              value={ele?._id}>\r\n                              {ele?.roleName}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                    </CustomInput>\r\n                  </FormGroup>\r\n                </Col>\r\n                {WareHouseIncharge && WareHouseIncharge && (\r\n                  <>\r\n                    <Col className=\"mb-1\" lg=\"4\" md=\"4\">\r\n                      <Label>Selected WareHouse </Label>\r\n                      <Multiselect\r\n                        required\r\n                        showCheckbox=\"true\"\r\n                        isObject=\"false\"\r\n                        options={WareHouseList} // Options to display in the dropdown\r\n                        // selectedValues={selectedValue}   // Preselected value to persist in dropdown\r\n                        onSelect={(selectedList, selectedItem) => {\r\n                          setSelectedWareHouse(selectedList);\r\n                        }} // Function will trigger on select event\r\n                        onRemove={(selectedList, removedItem) => {\r\n                          setSelectedWareHouse(selectedList);\r\n                        }} // Function will trigger on remove event\r\n                        displayValue=\"warehouseName\" // Property name to display in the dropdown options\r\n                      />\r\n                    </Col>\r\n                  </>\r\n                )}\r\n                {Master && Master && (\r\n                  <>\r\n                    <Col className=\"mb-1\" lg=\"4\" md=\"4\">\r\n                      <div className=\"\">\r\n                        <Label>Select Roles to Assign * </Label>\r\n\r\n                        <Multiselect\r\n                          required\r\n                          showCheckbox=\"true\"\r\n                          isObject=\"false\"\r\n                          options={AllAssignRoleList} // Options to display in the dropdown\r\n                          // selectedValues={selectedValue}   // Preselected value to persist in dropdown\r\n                          onSelect={onSelect1} // Function will trigger on select event\r\n                          onRemove={onRemove1} // Function will trigger on remove event\r\n                          displayValue=\"roleName\" // Property name to display in the dropdown options\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n\r\n                    <Col lg=\"4\" md=\"4\">\r\n                      <FormGroup>\r\n                        <Label>Database Name *</Label>\r\n                        <Input\r\n                          placeholder=\"one or two or three ...\"\r\n                          type=\"text\"\r\n                          value={formData[\"database\"]}\r\n                          onChange={(e) => {\r\n                            setFormData({\r\n                              ...formData,\r\n                              [\"database\"]: e.target.value,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </>\r\n                )}\r\n\r\n                {CreatAccountView &&\r\n                  CreatAccountView?.map((ele, i) => {\r\n                    const convertedTime = moment(\"2022-08-05T12:00:00\")\r\n                      .tz(\"America/New_York\")\r\n                      .format(\"D MMM, YYYY HH:mm\");\r\n\r\n                    if (!!ele?.phoneinput) {\r\n                      return (\r\n                        <>\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <PhoneInput\r\n                                inputClass=\"myphoneinput\"\r\n                                country={\"in\"}\r\n                                onKeyDown={(e) => {\r\n                                  if (\r\n                                    ele?.type?._attributes?.type == \"number\"\r\n                                  ) {\r\n                                    [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                      e.preventDefault();\r\n                                  }\r\n                                }}\r\n                                countryCodeEditable={false}\r\n                                name={ele?.name?._text}\r\n                                value={formData[ele?.name?._text]}\r\n                                onChange={(phone) => {\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [ele?.name?._text]: phone,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </>\r\n                      );\r\n                    } else if (!!ele?.library) {\r\n                      if (ele?.label._text?.includes(\"ountry\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n\r\n                              <Input\r\n                                onKeyDown={(e) => {\r\n                                  if (\r\n                                    ele?.type?._attributes?.type == \"number\"\r\n                                  ) {\r\n                                    [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                      e.preventDefault();\r\n                                  }\r\n                                }}\r\n                                type={ele?.type?._attributes?.type}\r\n                                placeholder={ele?.placeholder?._text}\r\n                                name={ele?.name?._text}\r\n                                value={formData[ele?.name?._text]}\r\n                                onChange={(e) =>\r\n                                  handleInputChange(\r\n                                    e,\r\n                                    ele?.type?._attributes?.type,\r\n                                    i\r\n                                  )\r\n                                }\r\n                              />\r\n                              {/* <Select\r\n                                inputClass=\"countryclass\"\r\n                                className=\"countryclassnw\"\r\n                                options={Country.getAllCountries()}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={Countries}\r\n                                onChange={(country) => {\r\n                                  setCountry(country);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"Country\"]: country?.name,\r\n                                  });\r\n                                }}\r\n                              /> */}\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else if (ele?.label._text?.includes(\"tate\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <Input\r\n                                disabled\r\n                                onKeyDown={(e) => {\r\n                                  if (\r\n                                    ele?.type?._attributes?.type == \"number\"\r\n                                  ) {\r\n                                    [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                      e.preventDefault();\r\n                                  }\r\n                                }}\r\n                                type={ele?.type?._attributes?.type}\r\n                                placeholder={ele?.placeholder?._text}\r\n                                name={ele?.name?._text}\r\n                                value={formData[ele?.name?._text]}\r\n                                onChange={(e) =>\r\n                                  handleInputChange(\r\n                                    e,\r\n                                    ele?.type?._attributes?.type,\r\n                                    i\r\n                                  )\r\n                                }\r\n                              />\r\n                              {/* <Select\r\n                                options={State?.getStatesOfCountry(\r\n                                  Countries?.isoCode\r\n                                )}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={States}\r\n                                onChange={(State) => {\r\n                                  setState(State);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"State\"]: State?.name,\r\n                                  });\r\n                                }}\r\n                              /> */}\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else if (ele?.label._text?.includes(\"ity\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <Input\r\n                                disabled\r\n                                onKeyDown={(e) => {\r\n                                  if (\r\n                                    ele?.type?._attributes?.type == \"number\"\r\n                                  ) {\r\n                                    [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                      e.preventDefault();\r\n                                  }\r\n                                }}\r\n                                type={ele?.type?._attributes?.type}\r\n                                placeholder={ele?.placeholder?._text}\r\n                                name={ele?.name?._text}\r\n                                value={formData[ele?.name?._text]}\r\n                                onChange={(e) =>\r\n                                  handleInputChange(\r\n                                    e,\r\n                                    ele?.type?._attributes?.type,\r\n                                    i\r\n                                  )\r\n                                }\r\n                              />\r\n                              {/* <Select\r\n                                options={City?.getCitiesOfState(\r\n                                  States?.countryCode,\r\n                                  States?.isoCode\r\n                                )}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={Cities}\r\n                                onChange={(City) => {\r\n                                  setCities(City);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"City\"]: City?.name,\r\n                                  });\r\n                                }}\r\n                              /> */}\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else {\r\n                        return (\r\n                          <>\r\n                            {ele?.type?._attributes?.type == \"date\" ? (\r\n                              <>\r\n                                <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                  <FormGroup key={i}>\r\n                                    <Label>{ele?.label?._text}</Label>\r\n\r\n                                    <Input\r\n                                      onKeyDown={(e) => {\r\n                                        if (\r\n                                          ele?.type?._attributes?.type ==\r\n                                          \"number\"\r\n                                        ) {\r\n                                          [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                            e.key\r\n                                          ) && e.preventDefault();\r\n                                        }\r\n                                      }}\r\n                                      type={ele?.type?._attributes?.type}\r\n                                      placeholder={ele?.placeholder?._text}\r\n                                      name={ele?.name?._text}\r\n                                      dateFormat={\r\n                                        Context?.UserInformatio?.dateFormat\r\n                                      }\r\n                                      value={\r\n                                        moment(formData[ele?.name?._text])\r\n                                          .tz(Context?.UserInformatio?.timeZone)\r\n                                          .format(\r\n                                            Context?.UserInformatio?.dateFormat\r\n                                          )\r\n                                        // formData[ele?.name?._text]\r\n                                      }\r\n                                      // value={formData[ele?.name?._text]}\r\n                                      onChange={(e) =>\r\n                                        handleInputChange(\r\n                                          e,\r\n                                          ele?.type?._attributes?.type,\r\n                                          i\r\n                                        )\r\n                                      }\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </FormGroup>\r\n                                </Col>\r\n                              </>\r\n                            ) : (\r\n                              <>\r\n                                <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                  <FormGroup key={i}>\r\n                                    <Label>{ele?.label?._text}</Label>\r\n\r\n                                    <Input\r\n                                      onKeyDown={(e) => {\r\n                                        if (\r\n                                          ele?.type?._attributes?.type ==\r\n                                          \"number\"\r\n                                        ) {\r\n                                          [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                            e.key\r\n                                          ) && e.preventDefault();\r\n                                        }\r\n                                      }}\r\n                                      type={ele?.type?._attributes?.type}\r\n                                      placeholder={ele?.placeholder?._text}\r\n                                      name={ele?.name?._text}\r\n                                      value={formData[ele?.name?._text]}\r\n                                      onChange={(e) =>\r\n                                        handleInputChange(\r\n                                          e,\r\n                                          ele?.type?._attributes?.type,\r\n                                          i\r\n                                        )\r\n                                      }\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </FormGroup>\r\n                                </Col>\r\n                              </>\r\n                            )}\r\n                          </>\r\n                        );\r\n                      }\r\n                    } else if (ele?.label._text?.includes(\"incode\")) {\r\n                      return (\r\n                        <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                          <FormGroup>\r\n                            <Label>{ele?.label?._text}</Label>\r\n                            <Input\r\n                              onKeyDown={(e) => {\r\n                                if (ele?.type?._attributes?.type == \"number\") {\r\n                                  [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                    e.preventDefault();\r\n                                }\r\n                              }}\r\n                              type={ele?.type?._attributes?.type}\r\n                              placeholder={ele?.placeholder?._text}\r\n                              name={ele?.name?._text}\r\n                              value={formData[ele?.name?._text]}\r\n                              onChange={(e) => {\r\n                                let SelectedCity = Country_State_city?.filter(\r\n                                  (ele) => ele?.Pincode == e.target.value\r\n                                );\r\n                                // console.log(SelectedCity);\r\n                                if (SelectedCity?.length) {\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"State\"]: SelectedCity[0]?.StateName,\r\n                                    [\"City\"]: SelectedCity[0]?.District,\r\n                                    [\"pincode\"]: e.target.value,\r\n                                  });\r\n                                } else {\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [ele?.name?._text]: e.target.value,\r\n                                  });\r\n                                }\r\n                                // handleInputChange(\r\n                                //   e,\r\n                                //   ele?.type?._attributes?.type,\r\n                                //   i\r\n                                // );\r\n                              }}\r\n                            />\r\n                            {/* <Select\r\n                                options={City?.getCitiesOfState(\r\n                                  States?.countryCode,\r\n                                  States?.isoCode\r\n                                )}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={Cities}\r\n                                onChange={(City) => {\r\n                                  setCities(City);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"City\"]: City?.name,\r\n                                  });\r\n                                }}\r\n                              /> */}\r\n                            {index === i ? (\r\n                              <>\r\n                                {error && (\r\n                                  <span style={{ color: \"red\" }}>{error}</span>\r\n                                )}\r\n                              </>\r\n                            ) : (\r\n                              <></>\r\n                            )}\r\n                          </FormGroup>\r\n                        </Col>\r\n                      );\r\n                    } else {\r\n                      return (\r\n                        <>\r\n                          {!!ele?.number ? (\r\n                            <>\r\n                              <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                <FormGroup key={i}>\r\n                                  <Label>{ele?.label?._text}</Label>\r\n\r\n                                  <Input\r\n                                    onWheel={(e) => {\r\n                                      e.preventDefault(); // Prevent the mouse wheel scroll event\r\n                                    }}\r\n                                    onKeyDown={(e) => {\r\n                                      if (\r\n                                        ele?.type?._attributes?.type == \"number\"\r\n                                      ) {\r\n                                        [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                          e.preventDefault();\r\n                                      }\r\n                                    }}\r\n                                    type={ele?.type?._attributes?.type}\r\n                                    placeholder={ele?.placeholder?._text}\r\n                                    name={ele?.name?._text}\r\n                                    value={formData[ele?.name?._text]}\r\n                                    onChange={(e) =>\r\n                                      handleInputChange(\r\n                                        e,\r\n                                        ele?.type?._attributes?.type,\r\n                                        i\r\n                                      )\r\n                                    }\r\n                                  />\r\n                                  {index === i ? (\r\n                                    <>\r\n                                      {error && (\r\n                                        <span style={{ color: \"red\" }}>\r\n                                          {error}\r\n                                        </span>\r\n                                      )}\r\n                                    </>\r\n                                  ) : (\r\n                                    <></>\r\n                                  )}\r\n                                </FormGroup>\r\n                              </Col>\r\n                            </>\r\n                          ) : (\r\n                            <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                              <FormGroup key={i}>\r\n                                <Label>{ele?.label?._text}</Label>\r\n\r\n                                <Input\r\n                                  onKeyDown={(e) => {\r\n                                    if (\r\n                                      ele?.type?._attributes?.type == \"number\"\r\n                                    ) {\r\n                                      [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                        e.preventDefault();\r\n                                    }\r\n                                  }}\r\n                                  type={ele?.type?._attributes?.type}\r\n                                  placeholder={ele?.placeholder?._text}\r\n                                  name={ele?.name?._text}\r\n                                  value={formData[ele?.name?._text]}\r\n                                  onChange={(e) => {\r\n                                    handleInputChange(\r\n                                      e,\r\n                                      ele?.type?._attributes?.type,\r\n                                      i\r\n                                    );\r\n                                  }}\r\n                                />\r\n                                {index === i ? (\r\n                                  <>\r\n                                    {error && (\r\n                                      <span style={{ color: \"red\" }}>\r\n                                        {error}\r\n                                      </span>\r\n                                    )}\r\n                                  </>\r\n                                ) : (\r\n                                  <></>\r\n                                )}\r\n                              </FormGroup>\r\n                            </Col>\r\n                          )}\r\n                        </>\r\n                      );\r\n                    }\r\n                  })}\r\n              </Row>\r\n\r\n              <hr />\r\n              <Row>\r\n                <Col lg=\"12\" md=\"12\" sm=\"12\">\r\n                  <Label>OR</Label>\r\n                </Col>\r\n                <Col lg=\"4\" md=\"4\" sm=\"12\">\r\n                  <FormGroup>\r\n                    <Label>Bulk Import</Label>\r\n\r\n                    <Input\r\n                      className=\"form-control\"\r\n                      type=\"file\"\r\n                      placeholder=\"\"\r\n                      name=\"BulkImport\"\r\n                      onChange={(e) => {\r\n                        setBulkImport(e.target.files[0]);\r\n                      }}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2 mt-1\">\r\n                <Label className=\"mb-0\">Status</Label>\r\n                <div\r\n                  className=\"form-label-group\"\r\n                  onChange={(e) => {\r\n                    setFormData({\r\n                      ...formData,\r\n                      [\"status\"]: e.target.value,\r\n                    });\r\n                  }}>\r\n                  <input\r\n                    required\r\n                    style={{ marginRight: \"3px\" }}\r\n                    type=\"radio\"\r\n                    name=\"status\"\r\n                    value=\"Active\"\r\n                  />\r\n                  <span style={{ marginRight: \"20px\" }}>Active</span>\r\n\r\n                  <input\r\n                    required\r\n                    style={{ marginRight: \"3px\" }}\r\n                    type=\"radio\"\r\n                    name=\"status\"\r\n                    value=\"Deactive\"\r\n                  />\r\n                  <span style={{ marginRight: \"3px\" }}>Deactive</span>\r\n                </div>\r\n              </Col>\r\n              <Row>\r\n                <Button.Ripple\r\n                  color=\"primary\"\r\n                  type=\"submit\"\r\n                  className=\"mr-1 mt-2 mx-2\">\r\n                  Submit\r\n                </Button.Ripple>\r\n              </Row>\r\n            </Form>\r\n          </div>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default CreateAccount;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"row\", \"disabled\", \"check\", \"inline\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  row: PropTypes.bool,\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar FormGroup = function FormGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      row = props.row,\n      disabled = props.disabled,\n      check = props.check,\n      inline = props.inline,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, row ? 'row' : false, check ? 'form-check' : 'form-group', check && inline ? 'form-check-inline' : false, check && disabled ? 'disabled' : false), cssModule);\n\n  if (Tag === 'fieldset') {\n    attributes.disabled = disabled;\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormGroup.propTypes = propTypes;\nFormGroup.defaultProps = defaultProps;\nexport default FormGroup;"],"sourceRoot":""}