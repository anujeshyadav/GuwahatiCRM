{"version":3,"sources":["views/apps/freshlist/customer/Ticketing/purchasereportamount.js","assets/img/profile/pages/logomain.png"],"names":["i","SelectedColums","purchasereportamount","props","togglemodal","setState","prevState","modalone","ShowBill","LookupviewStart","modal","handleChangeView","data","types","console","log","orderItems","ViewOneUserView","ViewOneData","EditOneUserView","EditOneData","toggleDropdown","isOpen","onGridReady","params","gridApi","api","gridColumnApi","columnApi","gridRef","current","currenPageSize","paginationGetCurrentPage","getPageSize","paginationGetPageSize","totalPages","paginationGetTotalPages","updateSearchQuery","val","setQuickFilter","filterSize","paginationSetPageSize","Number","handleChangeHeader","e","value","index","target","checked","push","delindex","findIndex","ele","headerName","splice","exportToPDF","csvData","getDataAsCsv","processCellCallback","processCell","parseCsv","parsedData","generatePDF","error","exportToExcel","CsvData","convertCsvToExcel","blob","downloadExcelFile","convertCSVtoExcel","Papa","parse","complete","result","ws","XLSX","json_to_sheet","wb","book_new","book_append_sheet","shiftElementUp","currentIndex","state","Arrindex","myArrayCopy","SelectedcolumnDefs","elementToMove","shiftElementDown","length","convertCsvToXml","rows","xmlString","forEach","row","cell","Blob","type","link","document","createElement","href","URL","createObjectURL","download","click","HandleSetVisibleField","preventDefault","setColumnDefs","columnDefs","rowData","localStorage","setItem","JSON","stringify","HeadingRightShift","updatedSelectedColumnDefs","Set","map","item","handleLeftShift","SelectedCols","slice","React","createRef","ViewData","setMySelectedarr","paginationPageSize","AllcolumnDefs","defaultColDef","sortable","enablePivot","enableValue","resizable","suppressMenu","valueGetter","field","width","filter","cellRendererFramework","className","size","color","onClick","status","fullName","product","Product_Title","price","qty","HSN_Code","userId","getItem","_id","PurchaseOrderList","then","res","completedStatus","orderHistory","userHeading","catch","err","id","swal","buttons","cancel","text","Delete_targetINlist","selectedData","getSelectedRows","updateRowData","remove","Promise","resolve","reject","header","skipEmptyLines","Error","pdfsize","Object","keys","doc","jsPDF","setTextColor","tableData","values","addImage","Logo","date","Date","setCreationDate","autoTable","head","body","startY","save","dynamicTyping","worksheet","workbook","excelBuffer","bookType","url","window","a","appendChild","revokeObjectURL","this","sm","style","fontWeight","cursor","title","position","zIndex","border","backgroundColor","exportDataAsCsv","marginTop","tag","right","placeholder","onChange","Consumer","context","gridOptions","rowSelection","colResizeDefault","animateRows","floatingFilter","pagination","pivotPanelShow","enableRtl","direction","ref","domLayout","toggle","maxWidth","lg","md","xl","xs","class","key","element","StockTrxInvoice","grandTotal","striped","scope","Product_MRP","Size","unitQty","Component","contextType","UserContext","module","exports"],"mappings":"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","file":"static/js/188.4a415e3c.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { ImDownload } from \"react-icons/im\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Input,\r\n  Row,\r\n  Modal,\r\n  Col,\r\n  UncontrolledDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  Button,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Badge,\r\n  Table,\r\n} from \"reactstrap\";\r\n\r\nimport { ContextLayout } from \"../../../../../utility/context/Layout\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport Logo from \"../../../../../assets/img/profile/pages/logomain.png\";\r\nimport Papa from \"papaparse\";\r\nimport { Eye, ChevronDown, Edit, CornerDownLeft } from \"react-feather\";\r\nimport { IoMdRemoveCircleOutline } from \"react-icons/io\";\r\nimport \"../../../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\r\nimport \"../../../../../assets/scss/pages/users.scss\";\r\n\r\nimport {\r\n  FaArrowAltCircleLeft,\r\n  FaArrowAltCircleRight,\r\n  FaFilter,\r\n  FaPlus,\r\n} from \"react-icons/fa\";\r\nimport swal from \"sweetalert\";\r\nimport {\r\n  PurchaseOrderList,\r\n  Delete_targetINlist,\r\n} from \"../../../../../ApiEndPoint/ApiCalling\";\r\nimport {\r\n  BsFillArrowDownSquareFill,\r\n  BsFillArrowUpSquareFill,\r\n} from \"react-icons/bs\";\r\nimport * as XLSX from \"xlsx\";\r\nimport UserContext from \"../../../../../context/Context\";\r\n\r\nconst SelectedColums = [];\r\n\r\nclass purchasereportamount extends React.Component {\r\n  static contextType = UserContext;\r\n  constructor(props) {\r\n    super(props);\r\n    this.gridRef = React.createRef();\r\n    this.gridApi = null;\r\n    this.state = {\r\n      isOpen: false,\r\n      Arrindex: \"\",\r\n      rowData: [],\r\n      modal: false,\r\n      modalone: false,\r\n      ViewData: {},\r\n      setMySelectedarr: [],\r\n      SelectedCols: [],\r\n      paginationPageSize: 5,\r\n      currenPageSize: \"\",\r\n      getPageSize: \"\",\r\n      AllcolumnDefs: [],\r\n      SelectedcolumnDefs: [],\r\n      defaultColDef: {\r\n        sortable: true,\r\n        enablePivot: true,\r\n        enableValue: true,\r\n        resizable: true,\r\n        suppressMenu: true,\r\n      },\r\n      columnDefs: [\r\n        {\r\n          headerName: \"UID\",\r\n          valueGetter: \"node.rowIndex + 1\",\r\n          field: \"node.rowIndex + 1\",\r\n          width: 80,\r\n          filter: true,\r\n        },\r\n\r\n        {\r\n          headerName: \"Actions\",\r\n          field: \"transactions\",\r\n          width: 180,\r\n          cellRendererFramework: params => {\r\n            return (\r\n              <div className=\"actions cursor-pointer\">\r\n                <Eye\r\n                  className=\"mr-50\"\r\n                  size=\"25px\"\r\n                  color=\"green\"\r\n                  onClick={() => {\r\n                    this.togglemodal();\r\n                    this.handleChangeView(params.data, \"readonly\");\r\n                  }}\r\n                />\r\n              </div>\r\n            );\r\n          },\r\n        },\r\n\r\n        {\r\n          headerName: \"Status\",\r\n          field: \"status\",\r\n          filter: true,\r\n          width: 150,\r\n          cellRendererFramework: params => {\r\n            return params.value == \"comleted\" ? (\r\n              <div className=\"badge badge-pill badge-success\">\r\n                {params.data.status}\r\n              </div>\r\n            ) : params.value == \"pending\" ? (\r\n              <div className=\"badge badge-pill badge-warning\">\r\n                {params.data.status}\r\n              </div>\r\n            ) : (\r\n              <div className=\"badge badge-pill badge-success\">\r\n                {params.data.status}\r\n              </div>\r\n            );\r\n          },\r\n        },\r\n        {\r\n          headerName: \"Full Name\",\r\n          field: \"orderItems\",\r\n          filter: true,\r\n          width: 180,\r\n          valueGetter: params => {\r\n            if (params.data.orderItems && params.data.orderItems.length > 0) {\r\n              return params.data.fullName;\r\n            }\r\n            return null;\r\n          },\r\n        },\r\n\r\n        {\r\n          headerName: \"Product Name\",\r\n          field: \"orderItems\",\r\n          filter: true,\r\n          width: 220,\r\n          valueGetter: params => {\r\n            if (params.data.orderItems && params.data.orderItems.length > 0) {\r\n              return params?.data?.orderItems?.map(val => {\r\n                return val?.product?.Product_Title;\r\n              });\r\n            }\r\n            return null;\r\n          },\r\n        },\r\n        {\r\n          headerName: \"Price\",\r\n          field: \"orderItems\",\r\n          filter: true,\r\n          width: 150,\r\n          valueGetter: params => {\r\n            if (params.data.orderItems && params.data.orderItems.length > 0) {\r\n              return params.data.orderItems[0].price;\r\n            }\r\n            return null;\r\n          },\r\n        },\r\n        {\r\n          headerName: \"Size\",\r\n          field: \"orderItems\",\r\n          filter: true,\r\n          width: 150,\r\n          valueGetter: params => {\r\n            if (params.data.orderItems && params.data.orderItems.length > 0) {\r\n              return params.data.orderItems[0].qty; // Return the price\r\n            }\r\n            return null;\r\n          },\r\n        },\r\n        {\r\n          headerName: \"GST Rate\",\r\n          field: \"orderItems\",\r\n          filter: true,\r\n          width: 180,\r\n          valueGetter: params => {\r\n            if (params.data.orderItems && params.data.orderItems.length > 0) {\r\n              return params.data.orderItems[0].product[\"GST Rate\"]; // Return the price\r\n            }\r\n            return null; // Or handle cases where there's no price\r\n          },\r\n        },\r\n        {\r\n          headerName: \"HSN Code\",\r\n          field: \"orderItems\",\r\n          filter: true,\r\n          width: 180,\r\n          valueGetter: params => {\r\n            if (params.data.orderItems && params.data.orderItems.length > 0) {\r\n              return params.data.orderItems[0].product.HSN_Code; // Return the price\r\n            }\r\n            return null;\r\n          },\r\n        },\r\n      ],\r\n    };\r\n  }\r\n  togglemodal = () => {\r\n    this.setState(prevState => ({\r\n      modalone: !prevState.modalone,\r\n    }));\r\n    this.setState({ ShowBill: false });\r\n  };\r\n\r\n  LookupviewStart = () => {\r\n    this.setState(prevState => ({\r\n      modal: !prevState.modal,\r\n    }));\r\n  };\r\n\r\n  // handleChangeView = (data, types) => {\r\n  //   let type = types;\r\n  //   if (type == \"readonly\") {\r\n  //     this.setState({ ViewOneUserView: true });\r\n  //     this.setState({ ViewOneData: data });\r\n  //   } else {\r\n  //     this.setState({ EditOneUserView: true });\r\n  //     this.setState({ EditOneData: data });\r\n  //   }\r\n  // };\r\n\r\n  handleChangeView = (data, types) => {\r\n    let type = types;\r\n    if (type == \"readonly\") {\r\n      console.log(\"ResponseData\", data.orderItems);\r\n      this.setState({ ViewOneUserView: true });\r\n      this.setState({ ViewOneData: data });\r\n    } else {\r\n      this.setState({ EditOneUserView: true });\r\n      this.setState({ EditOneData: data });\r\n    }\r\n  };\r\n\r\n  async componentDidMount() {\r\n    let userId = JSON.parse(localStorage.getItem(\"userData\"))._id;\r\n    await PurchaseOrderList(userId)\r\n      .then(res => {\r\n        const completedStatus = res?.orderHistory?.filter(ele =>\r\n          ele.status == \"completed\" ? ele.status : null\r\n        );\r\n        this.setState({ rowData: completedStatus });\r\n        this.setState({ AllcolumnDefs: this.state.columnDefs });\r\n        this.setState({ SelectedCols: this.state.columnDefs });\r\n\r\n        let userHeading = JSON.parse(localStorage.getItem(\"TargetList\"));\r\n        if (userHeading?.length) {\r\n          this.setState({ columnDefs: userHeading });\r\n          this.gridApi.setColumnDefs(userHeading);\r\n          this.setState({ SelectedcolumnDefs: userHeading });\r\n        } else {\r\n          this.setState({ columnDefs: this.state.columnDefs });\r\n          this.setState({ SelectedcolumnDefs: this.state.columnDefs });\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  toggleDropdown = () => {\r\n    this.setState(prevState => ({ isOpen: !prevState.isOpen }));\r\n  };\r\n\r\n  runthisfunction(id) {\r\n    swal(\"Warning\", \"Sure You Want to Delete it\", {\r\n      buttons: {\r\n        cancel: \"cancel\",\r\n        catch: { text: \"Delete \", value: \"delete\" },\r\n      },\r\n    }).then(value => {\r\n      switch (value) {\r\n        case \"delete\":\r\n          Delete_targetINlist(id)\r\n            .then(res => {\r\n              let selectedData = this.gridApi.getSelectedRows();\r\n              this.gridApi.updateRowData({ remove: selectedData });\r\n            })\r\n            .catch(err => {\r\n              console.log(err);\r\n            });\r\n          break;\r\n        default:\r\n      }\r\n    });\r\n  }\r\n\r\n  onGridReady = params => {\r\n    this.gridApi = params.api;\r\n    this.gridColumnApi = params.columnApi;\r\n    this.gridRef.current = params.api;\r\n\r\n    this.setState({\r\n      currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\r\n      getPageSize: this.gridApi.paginationGetPageSize(),\r\n      totalPages: this.gridApi.paginationGetTotalPages(),\r\n    });\r\n  };\r\n\r\n  updateSearchQuery = val => {\r\n    this.gridApi.setQuickFilter(val);\r\n  };\r\n\r\n  filterSize = val => {\r\n    if (this.gridApi) {\r\n      this.gridApi.paginationSetPageSize(Number(val));\r\n      this.setState({\r\n        currenPageSize: val,\r\n        getPageSize: val,\r\n      });\r\n    }\r\n  };\r\n  handleChangeHeader = (e, value, index) => {\r\n    let check = e.target.checked;\r\n    if (check) {\r\n      SelectedColums?.push(value);\r\n    } else {\r\n      const delindex = SelectedColums?.findIndex(\r\n        ele => ele?.headerName === value?.headerName\r\n      );\r\n\r\n      SelectedColums?.splice(delindex, 1);\r\n    }\r\n  };\r\n  parseCsv(csvData) {\r\n    return new Promise((resolve, reject) => {\r\n      Papa.parse(csvData, {\r\n        header: true,\r\n        skipEmptyLines: true,\r\n        complete: result => {\r\n          if (result.data && result.data.length > 0) {\r\n            resolve(result.data);\r\n          } else {\r\n            reject(new Error(\"No data found in the CSV\"));\r\n          }\r\n        },\r\n        error: error => {\r\n          reject(error);\r\n        },\r\n      });\r\n    });\r\n  }\r\n  generatePDF(parsedData) {\r\n    let pdfsize = [Object.keys(parsedData[0])][0].length;\r\n    let size = pdfsize > 15 ? \"a1\" : pdfsize < 14 > 10 ? \"a3\" : \"a4\";\r\n\r\n    const doc = new jsPDF(\"landscape\", \"mm\", size, false);\r\n    doc.setTextColor(5, 87, 97);\r\n    const tableData = parsedData.map(row => Object.values(row));\r\n    doc.addImage(Logo, \"JPEG\", 10, 10, 50, 30);\r\n    let date = new Date();\r\n    doc.setCreationDate(date);\r\n    doc.text(\"UserAccount\", 14, 51);\r\n    doc.autoTable({\r\n      head: [Object.keys(parsedData[0])],\r\n      body: tableData,\r\n      startY: 60,\r\n    });\r\n\r\n    doc.save(\"UserList.pdf\");\r\n  }\r\n\r\n  exportToPDF = async () => {\r\n    const csvData = this.gridApi.getDataAsCsv({\r\n      processCellCallback: this.processCell,\r\n    });\r\n    try {\r\n      const parsedData = await this.parseCsv(csvData);\r\n      this.generatePDF(parsedData);\r\n    } catch (error) {\r\n      console.error(\"Error parsing CSV:\", error);\r\n    }\r\n  };\r\n  processCell = params => {\r\n    return params.value;\r\n  };\r\n\r\n  convertCsvToExcel(csvData) {\r\n    return new Promise(resolve => {\r\n      Papa.parse(csvData, {\r\n        header: true,\r\n        dynamicTyping: true,\r\n        skipEmptyLines: true,\r\n        complete: function (result) {\r\n          const worksheet = XLSX.utils.json_to_sheet(result.data);\r\n          const workbook = XLSX.utils.book_new();\r\n          XLSX.utils.book_append_sheet(workbook, worksheet, \"Sheet1\");\r\n          const excelBuffer = XLSX.write(workbook, {\r\n            bookType: \"xlsx\",\r\n            type: \"array\",\r\n          });\r\n          const blob = new Blob([excelBuffer], {\r\n            type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n          });\r\n          resolve(blob);\r\n        },\r\n      });\r\n    });\r\n  }\r\n  downloadExcelFile(blob) {\r\n    const url = window.URL.createObjectURL(blob);\r\n    const a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.download = \"Userlist.xlsx\";\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    window.URL.revokeObjectURL(url);\r\n  }\r\n\r\n  exportToExcel = async e => {\r\n    const CsvData = this.gridApi.getDataAsCsv({\r\n      processCellCallback: this.processCell,\r\n    });\r\n    const blob = await this.convertCsvToExcel(CsvData);\r\n    this.downloadExcelFile(blob);\r\n  };\r\n\r\n  convertCSVtoExcel = () => {\r\n    const CsvData = this.gridApi.getDataAsCsv({\r\n      processCellCallback: this.processCell,\r\n    });\r\n    Papa.parse(CsvData, {\r\n      complete: result => {\r\n        const ws = XLSX.utils.json_to_sheet(result.data);\r\n        const wb = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(wb, ws, \"Sheet1\");\r\n        const excelType = \"xls\";\r\n        XLSX.writeFile(wb, `UserList.${excelType}`);\r\n      },\r\n    });\r\n  };\r\n\r\n  shiftElementUp = () => {\r\n    let currentIndex = this.state.Arrindex;\r\n    if (currentIndex > 0) {\r\n      const myArrayCopy = [...this.state.SelectedcolumnDefs];\r\n      const elementToMove = myArrayCopy.splice(currentIndex, 1)[0];\r\n      this.setState({ Arrindex: currentIndex - 1 });\r\n      myArrayCopy.splice(currentIndex - 1, 0, elementToMove);\r\n      this.setState({ SelectedcolumnDefs: myArrayCopy });\r\n    }\r\n  };\r\n\r\n  shiftElementDown = () => {\r\n    let currentIndex = this.state.Arrindex;\r\n    if (currentIndex < this.state.SelectedcolumnDefs.length - 1) {\r\n      const myArrayCopy = [...this.state.SelectedcolumnDefs];\r\n      const elementToMove = myArrayCopy.splice(currentIndex, 1)[0];\r\n      this.setState({ Arrindex: currentIndex + 1 });\r\n      myArrayCopy.splice(currentIndex + 1, 0, elementToMove);\r\n      this.setState({ SelectedcolumnDefs: myArrayCopy });\r\n    }\r\n  };\r\n  convertCsvToXml = () => {\r\n    const CsvData = this.gridApi.getDataAsCsv({\r\n      processCellCallback: this.processCell,\r\n    });\r\n    Papa.parse(CsvData, {\r\n      complete: result => {\r\n        const rows = result.data;\r\n\r\n        // Create XML\r\n        let xmlString = \"<root>\\n\";\r\n\r\n        rows.forEach(row => {\r\n          xmlString += \"  <row>\\n\";\r\n          row.forEach((cell, index) => {\r\n            xmlString += `    <field${index + 1}>${cell}</field${index + 1}>\\n`;\r\n          });\r\n          xmlString += \"  </row>\\n\";\r\n        });\r\n\r\n        xmlString += \"</root>\";\r\n        const blob = new Blob([xmlString], { type: \"text/xml\" });\r\n        const link = document.createElement(\"a\");\r\n        link.href = URL.createObjectURL(blob);\r\n        link.download = \"output.xml\";\r\n        link.click();\r\n      },\r\n    });\r\n  };\r\n\r\n  HandleSetVisibleField = e => {\r\n    e.preventDefault();\r\n    debugger;\r\n    this.gridApi.setColumnDefs(this.state.SelectedcolumnDefs);\r\n    this.setState({ columnDefs: this.state.SelectedcolumnDefs });\r\n    this.setState({ SelectedcolumnDefs: this.state.SelectedcolumnDefs });\r\n    this.setState({ rowData: this.state.rowData });\r\n    localStorage.setItem(\r\n      \"TargetList\",\r\n      JSON.stringify(this.state.SelectedcolumnDefs)\r\n    );\r\n    this.LookupviewStart();\r\n  };\r\n\r\n  HeadingRightShift = () => {\r\n    const updatedSelectedColumnDefs = [\r\n      ...new Set([\r\n        ...this.state.SelectedcolumnDefs.map(item => JSON.stringify(item)),\r\n        ...SelectedColums.map(item => JSON.stringify(item)),\r\n      ]),\r\n    ].map(item => JSON.parse(item));\r\n    this.setState({\r\n      SelectedcolumnDefs: [...new Set(updatedSelectedColumnDefs)], // Update the state with the combined array\r\n    });\r\n  };\r\n  handleLeftShift = () => {\r\n    let SelectedCols = this.state.SelectedcolumnDefs?.slice();\r\n    let delindex = this.state.Arrindex; /* Your delete index here */\r\n\r\n    if (SelectedCols && delindex >= 0) {\r\n      const splicedElement = SelectedCols?.splice(delindex, 1); // Remove the element\r\n\r\n      this.setState({\r\n        SelectedcolumnDefs: SelectedCols, // Update the state with the modified array\r\n      });\r\n    }\r\n  };\r\n  render() {\r\n    const {\r\n      rowData,\r\n      columnDefs,\r\n      defaultColDef,\r\n      SelectedcolumnDefs,\r\n      isOpen,\r\n      SelectedCols,\r\n      AllcolumnDefs,\r\n    } = this.state;\r\n    return (\r\n      <>\r\n        <Col className=\"app-user-list\">\r\n          <>\r\n            <Col sm=\"12\">\r\n              <Card>\r\n                <Row className=\"ml-2 mr-2 mt-2\">\r\n                  <Col>\r\n                    <h1 className=\"float-left\" style={{ fontWeight: \"600\" }}>\r\n                      Purchased Report\r\n                    </h1>\r\n                  </Col>\r\n                  <Col>\r\n                    <span className=\"mx-1\">\r\n                      <FaFilter\r\n                        style={{ cursor: \"pointer\" }}\r\n                        title=\"filter coloumn\"\r\n                        size=\"35px\"\r\n                        onClick={this.LookupviewStart}\r\n                        color=\"#39cccc\"\r\n                        className=\"float-right\"\r\n                      />\r\n                    </span>\r\n                    <span className=\"mx-1\">\r\n                      <div className=\"dropdown-container float-right\">\r\n                        <ImDownload\r\n                          style={{ cursor: \"pointer\" }}\r\n                          title=\"download file\"\r\n                          size=\"35px\"\r\n                          className=\"dropdown-button \"\r\n                          color=\"#39cccc\"\r\n                          onClick={this.toggleDropdown}\r\n                        />\r\n                        {isOpen && (\r\n                          <div\r\n                            style={{\r\n                              position: \"absolute\",\r\n                              zIndex: \"1\",\r\n                              border: \"1px solid #39cccc\",\r\n                              backgroundColor: \"white\",\r\n                            }}\r\n                            className=\"dropdown-content dropdownmy\"\r\n                          >\r\n                            <h5\r\n                              onClick={() => this.exportToPDF()}\r\n                              style={{ cursor: \"pointer\" }}\r\n                              className=\" mx-1 myactive mt-1\"\r\n                            >\r\n                              .PDF\r\n                            </h5>\r\n                            <h5\r\n                              onClick={() => this.gridApi.exportDataAsCsv()}\r\n                              style={{ cursor: \"pointer\" }}\r\n                              className=\" mx-1 myactive\"\r\n                            >\r\n                              .CSV\r\n                            </h5>\r\n                            <h5\r\n                              onClick={this.convertCSVtoExcel}\r\n                              style={{ cursor: \"pointer\" }}\r\n                              className=\" mx-1 myactive\"\r\n                            >\r\n                              .XLS\r\n                            </h5>\r\n                            <h5\r\n                              onClick={this.exportToExcel}\r\n                              style={{ cursor: \"pointer\" }}\r\n                              className=\" mx-1 myactive\"\r\n                            >\r\n                              .XLSX\r\n                            </h5>\r\n                            <h5\r\n                              onClick={() => this.convertCsvToXml()}\r\n                              style={{ cursor: \"pointer\" }}\r\n                              className=\" mx-1 myactive\"\r\n                            >\r\n                              .XML\r\n                            </h5>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </span>\r\n                    {/* <span>\r\n                            <Route\r\n                              render={({ history }) => (\r\n                                <Button\r\n                                  style={{\r\n                                    cursor: \"pointer\",\r\n                                    backgroundColor: \"#39cccc\",\r\n                                    color: \"white\",\r\n                                    fontWeight: \"600\",\r\n                                  }}\r\n                                  className=\"float-right mr-1\"\r\n                                  color=\"#39cccc\"\r\n                                  onClick={() =>\r\n                                    history.push(\r\n                                      \"/app/AJgroup/order/AddPurchaseOrder\"\r\n                                    )\r\n                                  }\r\n                                >\r\n                                  <FaPlus size={15} /> Add Purchase Order\r\n                                </Button>\r\n                              )}\r\n                            />\r\n                          </span> */}\r\n                  </Col>\r\n                </Row>\r\n                <CardBody style={{ marginTop: \"-1.5rem\" }}>\r\n                  {this.state.rowData === null ? null : (\r\n                    <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\r\n                      <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\r\n                        <div className=\"mb-1\">\r\n                          <UncontrolledDropdown className=\"p-1 ag-dropdown\">\r\n                            <DropdownToggle tag=\"div\">\r\n                              {this.gridApi\r\n                                ? this.state.currenPageSize\r\n                                : \"\" * this.state.getPageSize -\r\n                                  (this.state.getPageSize - 1)}{\" \"}\r\n                              -{\" \"}\r\n                              {this.state.rowData.length -\r\n                                this.state.currenPageSize *\r\n                                  this.state.getPageSize >\r\n                              0\r\n                                ? this.state.currenPageSize *\r\n                                  this.state.getPageSize\r\n                                : this.state.rowData.length}{\" \"}\r\n                              of {this.state.rowData.length}\r\n                              <ChevronDown className=\"ml-50\" size={15} />\r\n                            </DropdownToggle>\r\n                            <DropdownMenu right>\r\n                              <DropdownItem\r\n                                tag=\"div\"\r\n                                onClick={() => this.filterSize(5)}\r\n                              >\r\n                                5\r\n                              </DropdownItem>\r\n                              <DropdownItem\r\n                                tag=\"div\"\r\n                                onClick={() => this.filterSize(20)}\r\n                              >\r\n                                20\r\n                              </DropdownItem>\r\n                              <DropdownItem\r\n                                tag=\"div\"\r\n                                onClick={() => this.filterSize(50)}\r\n                              >\r\n                                50\r\n                              </DropdownItem>\r\n                              <DropdownItem\r\n                                tag=\"div\"\r\n                                onClick={() => this.filterSize(100)}\r\n                              >\r\n                                100\r\n                              </DropdownItem>\r\n                              <DropdownItem\r\n                                tag=\"div\"\r\n                                onClick={() => this.filterSize(134)}\r\n                              >\r\n                                134\r\n                              </DropdownItem>\r\n                            </DropdownMenu>\r\n                          </UncontrolledDropdown>\r\n                        </div>\r\n                        <div className=\"d-flex flex-wrap justify-content-end mb-1\">\r\n                          <div className=\"table-input mr-1\">\r\n                            <Input\r\n                              placeholder=\"search Item here...\"\r\n                              onChange={e =>\r\n                                this.updateSearchQuery(e.target.value)\r\n                              }\r\n                              value={this.state.value}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <ContextLayout.Consumer className=\"ag-theme-alpine\">\r\n                        {context => (\r\n                          <AgGridReact\r\n                            id=\"myAgGrid\"\r\n                            gridOptions={this.gridOptions}\r\n                            rowSelection=\"multiple\"\r\n                            defaultColDef={defaultColDef}\r\n                            columnDefs={columnDefs}\r\n                            rowData={rowData}\r\n                            onGridReady={this.onGridReady}\r\n                            colResizeDefault={\"shift\"}\r\n                            animateRows={true}\r\n                            floatingFilter={false}\r\n                            pagination={true}\r\n                            paginationPageSize={this.state.paginationPageSize}\r\n                            pivotPanelShow=\"always\"\r\n                            enableRtl={context.state.direction === \"rtl\"}\r\n                            ref={this.gridRef} // Attach the ref to the grid\r\n                            domLayout=\"autoHeight\" // Adjust layout as needed\r\n                          />\r\n                        )}\r\n                      </ContextLayout.Consumer>\r\n                    </div>\r\n                  )}\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </>\r\n        </Col>\r\n\r\n        <Modal\r\n          isOpen={this.state.modal}\r\n          toggle={this.LookupviewStart}\r\n          className={this.props.className}\r\n          style={{ maxWidth: \"1050px\" }}\r\n        >\r\n          <ModalHeader toggle={this.LookupviewStart}>Change Fileds</ModalHeader>\r\n          <ModalBody className=\"modalbodyhead\">\r\n            <Row>\r\n              <Col lg=\"4\" md=\"4\" sm=\"12\" xl=\"4\" xs=\"12\">\r\n                <h4>Available Columns</h4>\r\n                <div className=\"mainshffling\">\r\n                  <div class=\"ex1\">\r\n                    {AllcolumnDefs &&\r\n                      AllcolumnDefs?.map((ele, i) => {\r\n                        return (\r\n                          <>\r\n                            <div\r\n                              onClick={e => this.handleChangeHeader(e, ele, i)}\r\n                              key={i}\r\n                              className=\"mycustomtag mt-1\"\r\n                            >\r\n                              <span className=\"mt-1\">\r\n                                <h5\r\n                                  style={{ cursor: \"pointer\" }}\r\n                                  className=\"allfields\"\r\n                                >\r\n                                  <input\r\n                                    type=\"checkbox\"\r\n                                    // checked={check && check}\r\n                                    className=\"mx-1\"\r\n                                  />\r\n\r\n                                  {ele?.headerName}\r\n                                </h5>\r\n                              </span>\r\n                            </div>\r\n                          </>\r\n                        );\r\n                      })}\r\n                  </div>\r\n                </div>\r\n              </Col>\r\n              <Col lg=\"2\" md=\"2\" sm=\"12\" xl=\"2\" xs=\"12\" className=\"colarrowbtn\">\r\n                <div className=\"mainarrowbtn\">\r\n                  <div style={{ cursor: \"pointer\" }}>\r\n                    <FaArrowAltCircleRight\r\n                      onClick={this.HeadingRightShift}\r\n                      className=\"arrowassign\"\r\n                      size=\"30px\"\r\n                    />\r\n                  </div>\r\n                  <div style={{ cursor: \"pointer\" }} className=\"my-2\">\r\n                    <FaArrowAltCircleLeft\r\n                      onClick={this.handleLeftShift}\r\n                      className=\"arrowassign\"\r\n                      size=\"30px\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Col>\r\n              <Col lg=\"6\" md=\"6\" sm=\"12\" xl=\"6\" xs=\"12\">\r\n                <Row>\r\n                  <Col lg=\"8\" md=\"8\" sm=\"12\" xs=\"12\">\r\n                    <h4>Visible Columns</h4>\r\n                    <div className=\"mainshffling\">\r\n                      <div class=\"ex1\">\r\n                        {SelectedcolumnDefs &&\r\n                          SelectedcolumnDefs?.map((ele, i) => {\r\n                            return (\r\n                              <>\r\n                                <div key={i} className=\"mycustomtag mt-1\">\r\n                                  <span className=\"mt-1\">\r\n                                    <h5\r\n                                      onClick={() =>\r\n                                        this.setState({ Arrindex: i })\r\n                                      }\r\n                                      style={{\r\n                                        cursor: \"pointer\",\r\n                                        backgroundColor: `${\r\n                                          this.state.Arrindex === i\r\n                                            ? \"#1877f2\"\r\n                                            : \"\"\r\n                                        }`,\r\n                                      }}\r\n                                      className=\"allfields\"\r\n                                    >\r\n                                      <IoMdRemoveCircleOutline\r\n                                        onClick={() => {\r\n                                          const SelectedCols =\r\n                                            this.state.SelectedcolumnDefs?.slice();\r\n                                          const delindex =\r\n                                            SelectedCols?.findIndex(\r\n                                              element =>\r\n                                                element?.headerName ==\r\n                                                ele?.headerName\r\n                                            );\r\n\r\n                                          if (SelectedCols && delindex >= 0) {\r\n                                            const splicedElement =\r\n                                              SelectedCols?.splice(delindex, 1); // Remove the element\r\n                                            // splicedElement contains the removed element, if needed\r\n\r\n                                            this.setState({\r\n                                              SelectedcolumnDefs: SelectedCols, // Update the state with the modified array\r\n                                            });\r\n                                          }\r\n                                        }}\r\n                                        style={{ cursor: \"pointer\" }}\r\n                                        size=\"25px\"\r\n                                        color=\"red\"\r\n                                        className=\"mr-1\"\r\n                                      />\r\n\r\n                                      {ele?.headerName}\r\n                                    </h5>\r\n                                  </span>\r\n                                </div>\r\n                              </>\r\n                            );\r\n                          })}\r\n                      </div>\r\n                    </div>\r\n                  </Col>\r\n                  <Col lg=\"4\" md=\"4\" sm=\"12\" xs=\"12\">\r\n                    <div className=\"updownbtn justify-content-center\">\r\n                      <div>\r\n                        <BsFillArrowUpSquareFill\r\n                          className=\"arrowassign mb-1\"\r\n                          size=\"30px\"\r\n                          onClick={this.shiftElementUp}\r\n                        />\r\n                      </div>\r\n                      <div>\r\n                        <BsFillArrowDownSquareFill\r\n                          onClick={this.shiftElementDown}\r\n                          className=\"arrowassign\"\r\n                          size=\"30px\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <div className=\"d-flex justify-content-center\">\r\n                  {/* <Button onClick={this.HandleSetVisibleField} color=\"primary\">\r\n                    Submit\r\n                  </Button> */}\r\n\r\n                  <Badge\r\n                    style={{ cursor: \"pointer\" }}\r\n                    className=\"\"\r\n                    color=\"primary\"\r\n                    onClick={this.HandleSetVisibleField}\r\n                  >\r\n                    Submit\r\n                  </Badge>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </ModalBody>\r\n        </Modal>\r\n        <Modal\r\n          isOpen={this.state.modalone}\r\n          toggle={this.togglemodal}\r\n          className={this.props.className}\r\n          style={{ maxWidth: \"1050px\" }}\r\n        >\r\n          <ModalHeader toggle={this.togglemodal}>\r\n            {this.state.ShowBill ? \"Bill Download\" : \"All Products\"}\r\n          </ModalHeader>\r\n          <ModalBody\r\n            className={`${this.state.ShowBill ? \"p-1\" : \"modalbodyhead\"}`}\r\n          >\r\n            <Row className=\"p-2\">\r\n              <Col>\r\n                <div className=\"d-flex justify-content-center\">\r\n                  <h4>Sales Order List</h4>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n            {this.state.ShowBill ? (\r\n              <>\r\n                <StockTrxInvoice ViewOneData={this.state.ViewOneData} />\r\n              </>\r\n            ) : (\r\n              <>\r\n                {this.state.ViewOneUserView ? (\r\n                  <>\r\n                    <Row>\r\n                      <Col className=\"d-flex\">\r\n                        <div>\r\n                          <span>UserName:</span>\r\n                        </div>\r\n                        <div>\r\n                          <h5 className=\"\">\r\n                            {this.state.ViewOneData &&\r\n                              this.state.ViewOneData?.fullName}\r\n                          </h5>\r\n                        </div>\r\n                      </Col>\r\n\r\n                      <Col className=\"d-flex\">\r\n                        <div>\r\n                          <span>Grand Total :</span>\r\n                        </div>\r\n                        <div>\r\n                          <strong>\r\n                            {this.state.ViewOneData &&\r\n                              this.state.ViewOneData?.grandTotal}\r\n                          </strong>\r\n                          Rs/-\r\n                        </div>\r\n                      </Col>\r\n                      <Col>\r\n                        {this.state.ViewOneData?.status == \"completed\" ? (\r\n                          <>\r\n                            <div className=\"d-flex justify-content-center\">\r\n                              <h5>\r\n                                Status:\r\n                                <Badge className=\"mx-2\" color=\"primary\">\r\n                                  {this.state.ViewOneData?.status}\r\n                                </Badge>\r\n                              </h5>\r\n                            </div>\r\n                          </>\r\n                        ) : (\r\n                          <>\r\n                            <h5>\r\n                              status:\r\n                              <Badge className=\"mx-2\" color=\"primary\">\r\n                                {this.state.ViewOneData?.status}\r\n                              </Badge>\r\n                            </h5>\r\n                          </>\r\n                        )}\r\n                      </Col>\r\n                      {/* <Col>\r\n                        <Label>Download Invoice :</Label>\r\n                        <div className=\"d-flex justify-content-center\">\r\n                          <FaDownload\r\n                            onClick={this.handleStockTrxInvoiceShow}\r\n                            color=\"#00c0e\"\r\n                            fill=\"#00c0e\"\r\n                            style={{ cursor: \"pointer\" }}\r\n                            size={20}\r\n                          />\r\n                        </div>\r\n                      </Col> */}\r\n                    </Row>\r\n\r\n                    <Row>\r\n                      <Col>\r\n                        <Table style={{ cursor: \"pointer\" }} striped>\r\n                          <thead>\r\n                            <tr>\r\n                              <th>#</th>\r\n                              <th>Product Name</th>\r\n                              <th>Price</th>\r\n                              <th>Size</th>\r\n                              <th>Unit</th>\r\n                              <th>HSN CODE</th>\r\n                              <th>GST</th>\r\n                              <th>Quantity</th>\r\n                              <th>Total</th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            {this.state.ViewOneData?.orderItems &&\r\n                              this.state.ViewOneData?.orderItems?.map(\r\n                                (ele, i) => (\r\n                                  <>\r\n                                    <tr>\r\n                                      <th scope=\"row\">{i + 1}</th>\r\n                                      <td>{ele?.product?.Product_Title}</td>\r\n                                      <td>{ele?.product?.Product_MRP}</td>\r\n                                      <td>{ele?.product?.Size}</td>\r\n                                      <td>{ele?.unitQty}</td>\r\n                                      <td>{ele?.product?.HSN_Code}</td>\r\n                                      <td>{ele?.product[\"GST Rate\"]}</td>\r\n                                      <td>{ele?.qty}</td>\r\n                                      <td>\r\n                                        {ele?.product?.Product_MRP *\r\n                                          ele?.product?.Size *\r\n                                          ele?.qty}\r\n                                      </td>\r\n                                    </tr>\r\n                                  </>\r\n                                )\r\n                              )}\r\n                          </tbody>\r\n                        </Table>\r\n                      </Col>\r\n                    </Row>\r\n                  </>\r\n                ) : null}\r\n              </>\r\n            )}\r\n          </ModalBody>\r\n        </Modal>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default purchasereportamount;\r\n","module.exports = __webpack_public_path__ + \"static/media/logomain.cee4d0c2.png\";"],"sourceRoot":""}