{"version":3,"sources":["views/apps/freshlist/accounts/CreateCustomer.js","../node_modules/reactstrap/es/FormGroup.js"],"names":["i","TransPorterToShow","CreateCustomer","useState","CreatAccountView","setCreatAccountView","RoleList","setRoleList","TransporterList","setTransporterList","AllTransporterList","setAllTransporterList","Countries","setCountry","BulkImport","setBulkImport","States","setState","Cities","setCities","Selectedtransporter","setSelectedtransporter","formData","setFormData","dropdownValue","setdropdownValue","CustomerGroup","setCustomerGroup","index","setindex","Mode","setMode","error","setError","Context","useContext","UserContext","history","useHistory","Params","useParams","handleInputChange","e","type","target","name","value","checked","test","files","length","useEffect","navigator","geolocation","getCurrentPosition","position","Date","timestamp","toLocaleString","Geotagging","coords","latitude","longitude","swal","timeout","enableHighAccuracy","id","_Get","View_Customer_ById","then","res","Customer","selectedtransporter","assignTransporter","map","ele","Country","countryselected","getAllCountries","filter","State","stateselected","getStatesOfCountry","isoCode","console","log","City","cityselected","getCitiesOfState","countryCode","status","catch","err","userData","JSON","parse","localStorage","getItem","Create_Transporter_List","database","Transporter","userdata","View_CustomerGroup","myActive","Get_RoleList","_id","ShowList","Role","item","roleName","toLowerCase","includes","CreateCustomerxmlView","jsonData","xmlJs","xml2json","data","compact","spaces","input","MyDropDown","submitHandler","preventDefault","undefined","formdata","FormData","append","_BulkUpload","Bulk_Upload_Customer","message","dropdown","_text","_attributes","transporter_detail","stringify","val","rolename","CreateCustomersave","goBack","response","onSelect1","selectedList","selectedItem","onRemove1","className","lg","md","render","style","cursor","color","onClick","push","onSubmit","required","onChange","selected","options","selectedIndex","getAttribute","split","data-name","label","key","sm","option","groupName","Registration_Type","VALUE","list","handleSetShowTransporter","isObject","selectedValues","onSelect","onRemove","displayValue","moment","tz","format","phoneinput","inputClass","country","onKeyDown","countryCodeEditable","phone","library","getOptionLabel","getOptionValue","placeholder","dateFormat","UserInformatio","timeZone","number","onWheel","multiple","allimages","Array","from","handleFileChange","marginRight","Ripple","_excluded","propTypes","children","PropTypes","node","row","bool","check","inline","disabled","tag","tagPropType","string","cssModule","object","FormGroup","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps"],"mappings":"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","file":"static/js/322.449cd5a8.chunk.js","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\r\nimport xmlJs from \"xml-js\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Form,\r\n  Row,\r\n  Input,\r\n  Label,\r\n  Button,\r\n  FormGroup,\r\n  CustomInput,\r\n  Badge,\r\n} from \"reactstrap\";\r\nimport Multiselect from \"multiselect-react-dropdown\";\r\nimport { history } from \"../../../../history\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Country, State, City } from \"country-state-city\";\r\nimport Select from \"react-select\";\r\nimport moment from \"moment-timezone\";\r\nimport { Route, useHistory, useParams } from \"react-router-dom\";\r\n\r\nimport swal from \"sweetalert\";\r\nimport \"../../../../../src/layouts/assets/scss/pages/users.scss\";\r\n\r\nimport {\r\n  CreateAccountSave,\r\n  CreateAccountView,\r\n  CreateCustomersave,\r\n  CreateCustomerxmlView,\r\n  Get_RoleList,\r\n  _BulkUpload,\r\n  _Get,\r\n} from \"../../../../ApiEndPoint/ApiCalling\";\r\nimport { BiEnvelope } from \"react-icons/bi\";\r\nimport { FcPhoneAndroid } from \"react-icons/fc\";\r\nimport { BsWhatsapp } from \"react-icons/bs\";\r\nimport \"../../../../assets/scss/pages/users.scss\";\r\nimport UserContext from \"../../../../context/Context\";\r\nimport { CloudLightning } from \"react-feather\";\r\nimport { FaPlus } from \"react-icons/fa\";\r\nimport {\r\n  Bulk_Upload_Customer,\r\n  Create_Transporter_List,\r\n  View_CustomerGroup,\r\n  View_Customer_ById,\r\n} from \"../../../../ApiEndPoint/Api\";\r\nlet TransPorterToShow = [];\r\nconst CreateCustomer = () => {\r\n  const [CreatAccountView, setCreatAccountView] = useState([]);\r\n  const [RoleList, setRoleList] = useState([]);\r\n  const [TransporterList, setTransporterList] = useState([]);\r\n  const [AllTransporterList, setAllTransporterList] = useState([]);\r\n  const [Countries, setCountry] = useState({});\r\n  const [BulkImport, setBulkImport] = useState(null);\r\n  const [States, setState] = useState({});\r\n  const [Cities, setCities] = useState({});\r\n  const [Selectedtransporter, setSelectedtransporter] = useState([]);\r\n  const [formData, setFormData] = useState({});\r\n  const [dropdownValue, setdropdownValue] = useState([]);\r\n  const [CustomerGroup, setCustomerGroup] = useState([]);\r\n  const [index, setindex] = useState(\"\");\r\n  const [Mode, setMode] = useState(\"Create\");\r\n  const [error, setError] = useState(\"\");\r\n  const [permissions, setpermissions] = useState({});\r\n\r\n  const Context = useContext(UserContext);\r\n  let history = useHistory();\r\n  let Params = useParams();\r\n\r\n  const handleFileChange = (e, type, i) => {\r\n    const { name, value, checked } = e.target;\r\n    let allimages = Array.from(e.target.files);\r\n    setindex(i);\r\n    setFormData({\r\n      ...formData,\r\n      [name]: allimages,\r\n    });\r\n  };\r\n  const handleChange = () => {\r\n    console.log(\"object\");\r\n  };\r\n  const handleInputChange = (e, type, i) => {\r\n    const { name, value, checked } = e.target;\r\n    setindex(i);\r\n    if (type == \"checkbox\") {\r\n      if (checked) {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      } else {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      }\r\n    } else {\r\n      if (type == \"number\") {\r\n        if (/^\\d{0,10}$/.test(value)) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          setError(\"\");\r\n        }\r\n        //  else {\r\n        //   setError(\r\n        //     \"Please enter a valid number with a maximum length of 10 digits\"\r\n        //   );\r\n        // }\r\n      } else if (type == \"file\") {\r\n        if (e.target.files) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: e.target.files[0],\r\n          });\r\n        }\r\n      } else {\r\n        if (value.length <= 10) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          // console.log(value);\r\n          setError(\"\");\r\n        } else {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          // setError(\"Input length exceeds the maximum of 10 characters\");\r\n        }\r\n      }\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const date = new Date(position.timestamp);\r\n          const CurentTime = date.toLocaleString();\r\n          formData.Geotagging = `${position.coords.latitude},${position.coords.longitude}`;\r\n        },\r\n        (error) => {\r\n          swal(`Error: ${error}`);\r\n        },\r\n        { timeout: 10000, enableHighAccuracy: true }\r\n      );\r\n    } else {\r\n      swal(`Error: Geolocation not found`);\r\n    }\r\n  }, []);\r\n  useEffect(() => {\r\n    if (Params?.id == 0) {\r\n      setMode(\"Create\");\r\n    } else {\r\n      setMode(\"Edit\");\r\n\r\n      _Get(View_Customer_ById, Params?.id)\r\n        .then((res) => {\r\n          let value = res?.Customer[0];\r\n          setFormData(value);\r\n          let selectedtransporter = value?.assignTransporter?.map((ele) => {\r\n            return ele?.id;\r\n          });\r\n\r\n          if (selectedtransporter?.length) {\r\n            setSelectedtransporter(selectedtransporter);\r\n          }\r\n          if (value?.Country) {\r\n            let countryselected = Country?.getAllCountries()?.filter(\r\n              (ele, i) => ele?.name == value?.Country\r\n            );\r\n            setCountry(countryselected);\r\n            if (value?.State) {\r\n              let stateselected = State?.getStatesOfCountry(\r\n                countryselected[0]?.isoCode\r\n              )?.filter((ele, i) => ele?.name == value?.State);\r\n              setState(stateselected);\r\n              console.log(stateselected);\r\n              if (value?.City) {\r\n                let cityselected = City.getCitiesOfState(\r\n                  stateselected[0]?.countryCode,\r\n                  stateselected[0]?.isoCode\r\n                )?.filter((ele, i) => ele?.name == value?.City);\r\n                setCities(cityselected);\r\n              }\r\n            }\r\n          }\r\n          if (value?.status) {\r\n            formData[\"status\"] = value?.status;\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n    let userData = JSON.parse(localStorage.getItem(\"userData\"));\r\n    _Get(Create_Transporter_List, userData?.database)\r\n      .then((res) => {\r\n        let value = res?.Transporter;\r\n\r\n        if (value?.length) {\r\n          setTransporterList(value);\r\n          setAllTransporterList(value);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let userdata = JSON.parse(localStorage.getItem(\"userData\"));\r\n    _Get(View_CustomerGroup, userdata?.database)\r\n      .then((res) => {\r\n        let myActive = res?.CustomerGroup?.filter(\r\n          (ele) => ele?.status == \"Active\"\r\n        );\r\n        setCustomerGroup(myActive);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n\r\n    Get_RoleList(userdata?._id, userdata?.database)\r\n      .then((res) => {\r\n        let ShowList = res?.Role?.filter(\r\n          (item, i) => item?.roleName?.toLowerCase()?.includes(\"customer\")\r\n          //  ||\r\n          // item?.roleName?.toLowerCase()?.includes(\"transporter\")\r\n        );\r\n        setRoleList(ShowList);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        swal(\"Roles List Not found\");\r\n      });\r\n\r\n    // console.log(userdata?._id);\r\n    // formData[\"created_by\"] = userdata?._id;\r\n  }, []);\r\n  useEffect(() => {\r\n    CreateCustomerxmlView()\r\n      .then((res) => {\r\n        const jsonData = xmlJs.xml2json(res.data, {\r\n          compact: true,\r\n          spaces: 2,\r\n        });\r\n\r\n        console.log(JSON.parse(jsonData)?.CreateCustomer);\r\n        setCreatAccountView(JSON.parse(jsonData)?.CreateCustomer?.input);\r\n\r\n        setdropdownValue(JSON.parse(jsonData)?.CreateCustomer?.MyDropDown);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        swal(\"Something Went Wrong\");\r\n      });\r\n  }, []);\r\n\r\n  const submitHandler = async (e) => {\r\n    e.preventDefault();\r\n    if (BulkImport !== null || BulkImport != undefined) {\r\n      let formdata = new FormData();\r\n      formdata.append(\"file\", BulkImport);\r\n\r\n      await _BulkUpload(Bulk_Upload_Customer, formdata)\r\n        .then((res) => {\r\n          swal(`${res?.message}`);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          swal(\"Something Went Wrong\");\r\n        });\r\n    } else {\r\n      let userdata = JSON.parse(localStorage.getItem(\"userData\"));\r\n      let formdata = new FormData();\r\n      dropdownValue?.map((ele, i) => {\r\n        formdata.append(\r\n          `${ele?.dropdown?.name?._text}`,\r\n          formData[ele?.dropdown?.name?._text]\r\n        );\r\n      });\r\n      CreatAccountView?.map((ele, i) => {\r\n        if (ele?.type?._attributes?.type == \"text\") {\r\n          if (ele?.name._text == \"transporter_detail\") {\r\n            formdata.append(`${ele?.name._text}`, formData[ele?.name?._text]);\r\n\r\n            if (formData.transporter_detail == \"other\") {\r\n              let id = TransporterList?.map((ele) => {\r\n                return { id: ele?._id };\r\n              });\r\n              let assignTransporter = id;\r\n              formdata.append(\r\n                \"assignTransporter\",\r\n                JSON.stringify(assignTransporter)\r\n              );\r\n            }\r\n          } else {\r\n            formdata.append(`${ele?.name._text}`, formData[ele?.name?._text]);\r\n          }\r\n        } else if (ele?.type?._attributes?.type == \"file\") {\r\n          if (ele?.name?._text == \"Shopphoto\") {\r\n            formData[ele?.name?._text]?.map((val, index) => {\r\n              formdata.append(\"file\", formData[ele?.name?._text][index]);\r\n            });\r\n          }\r\n          if (ele?.name?._text == \"photo\") {\r\n            formData[ele?.name?._text]?.map((val, index) => {\r\n              formdata.append(\"files\", formData[ele?.name?._text][index]);\r\n            });\r\n          }\r\n        } else {\r\n          formdata.append(\r\n            `${ele?.name?._text}`,\r\n            formData[ele?.name?._text] && formData[ele?.name?._text]\r\n              ? formData[ele?.name?._text]\r\n              : null\r\n          );\r\n        }\r\n      });\r\n      // formdata.append(\r\n      //   `${dropdownValue?.name?._text}`,\r\n      //   formData[dropdownValue?.name?._text]\r\n      // );\r\n      formdata.append(\"status\", formData?.status);\r\n      formdata.append(\"database\", userdata?.database);\r\n\r\n      formdata.append(\"rolename\", formData?.rolename);\r\n\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(\r\n          (position) => {\r\n            const date = new Date(position.timestamp);\r\n            const CurentTime = date.toLocaleString();\r\n            formdata.append(\"latitude\", position.coords.latitude);\r\n            formdata.append(\"longitude\", position.coords.longitude);\r\n          },\r\n          (error) => {\r\n            // this.setState({ Error: `Error: ${error}` });\r\n            swal(`Error: ${error}`);\r\n          },\r\n          { timeout: 10000, enableHighAccuracy: true }\r\n        );\r\n      } else {\r\n        swal(`Error: Geolocation not found`);\r\n      }\r\n\r\n      // formdata.forEach((value, key) => {\r\n      //   console.log(key, value);\r\n      // });\r\n\r\n      if (error) {\r\n        // swal(\"Error occured while Entering Details\");\r\n      } else {\r\n        CreateCustomersave(formdata)\r\n          .then((res) => {\r\n            console.log(res);\r\n            setFormData({});\r\n            if (res.status) {\r\n              history.goBack();\r\n              swal(\"Customer Created Successfully\");\r\n            }\r\n          })\r\n          .catch((err) => {\r\n            console.log(err.response);\r\n            swal(\"something Went Wrong\");\r\n          });\r\n      }\r\n    }\r\n  };\r\n  const handleSetShowTransporter = (VALUE) => {\r\n    let list = [...AllTransporterList];\r\n    TransPorterToShow = [];\r\n    list?.map((ele) => {\r\n      ele?.City?.map((val) => {\r\n        if (val?.name.includes(formData?.City)) {\r\n          TransPorterToShow?.push(ele);\r\n        }\r\n      });\r\n    });\r\n\r\n    setTransporterList(TransPorterToShow);\r\n  };\r\n  const onSelect1 = (selectedList, selectedItem) => {\r\n    setSelectedtransporter(selectedList);\r\n    console.log(selectedList);\r\n  };\r\n  const onRemove1 = (selectedList, selectedItem) => {\r\n    console.log(selectedList);\r\n    setSelectedtransporter(selectedList);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   console.log(formData);\r\n  // }, [formData]);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Card>\r\n          <Row className=\"m-2\">\r\n            <Col lg=\"2\" md=\"2\">\r\n              <h1 className=\"float-left\">{Mode && Mode} Customer</h1>\r\n            </Col>\r\n            <Col></Col>\r\n            <Col lg=\"2\" md=\"2\">\r\n              <div className=\"float-right\">\r\n                <Route\r\n                  render={({ history }) => (\r\n                    <Button\r\n                      style={{ cursor: \"pointer\" }}\r\n                      className=\"float-right mr-1\"\r\n                      color=\"primary\"\r\n                      onClick={() =>\r\n                        history.push(\"/app/SoftNumen/CustomerSearch\")\r\n                      }>\r\n                      {\" \"}\r\n                      Back\r\n                      {/* <FaPlus size={15} /> Create User */}\r\n                    </Button>\r\n                  )}\r\n                />\r\n              </div>\r\n            </Col>\r\n            <Col lg=\"2\" md=\"2\">\r\n              <div className=\"float-right\">\r\n                <Route\r\n                  render={({ history }) => (\r\n                    <Button\r\n                      style={{ cursor: \"pointer\" }}\r\n                      className=\"float-right mr-1\"\r\n                      color=\"primary\"\r\n                      onClick={() =>\r\n                        history.push(\r\n                          `/app/ajgroup/house/CustomerGroupList`\r\n                          // `/app/Ajgroup/account/CreateCustomerGroup/${0}`\r\n                        )\r\n                      }>\r\n                      {\" \"}\r\n                      Create Customer Group\r\n                      {/* <FaPlus size={15} /> Create User */}\r\n                    </Button>\r\n                  )}\r\n                />\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          {/* <hr /> */}\r\n\r\n          <CardBody>\r\n            <Form className=\"m-1\" onSubmit={submitHandler}>\r\n              <Row className=\"mb-2\">\r\n                <Col lg=\"4\" md=\"4\">\r\n                  <FormGroup>\r\n                    <Label className=\"mb-1\">Role List *</Label>\r\n                    <CustomInput\r\n                      required\r\n                      type=\"select\"\r\n                      name=\"rolename\"\r\n                      value={formData[\"rolename\"]}\r\n                      onChange={(e) => {\r\n                        const selected = e.target.options[\r\n                          e.target.selectedIndex\r\n                        ]\r\n                          .getAttribute(\"data-name\")\r\n                          ?.split(\" \");\r\n\r\n                        setFormData({\r\n                          ...formData,\r\n                          [\"rolename\"]: e.target.value,\r\n                          [\"roleName\"]: selected[1],\r\n                        });\r\n                      }}>\r\n                      <option>--select Role--</option>\r\n                      {RoleList &&\r\n                        RoleList?.length &&\r\n                        RoleList?.map((ele, i) => {\r\n                          return (\r\n                            <option\r\n                              data-name={`${ele?.position} ${ele?.roleName}`}\r\n                              value={ele?._id}>\r\n                              {ele?.roleName}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                    </CustomInput>\r\n                  </FormGroup>\r\n                </Col>\r\n                {dropdownValue && dropdownValue ? (\r\n                  <>\r\n                    {dropdownValue?.map((ele, i) => {\r\n                      if (\r\n                        formData?.roleName &&\r\n                        formData?.roleName == \"Transporter\"\r\n                      ) {\r\n                        if (\r\n                          ele?.dropdown?.label?._text == \"Select Party Type\"\r\n                        ) {\r\n                          return null;\r\n                        } else {\r\n                          return (\r\n                            <>\r\n                              <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                <FormGroup>\r\n                                  <Label className=\"mb-1\">\r\n                                    {ele?.dropdown?.label?._text &&\r\n                                      ele?.dropdown?.label?._text}\r\n                                  </Label>\r\n                                  <CustomInput\r\n                                    required\r\n                                    type=\"select\"\r\n                                    name={ele?.dropdown?.name?._text}\r\n                                    value={formData[ele?.dropdown?.name?._text]}\r\n                                    onChange={handleInputChange}>\r\n                                    <option value=\"\">--Select --</option>\r\n                                    {ele?.dropdown?.option?.map(\r\n                                      (option, index) => (\r\n                                        <option\r\n                                          key={index}\r\n                                          value={option?._attributes?.value}>\r\n                                          {option?._attributes?.value}\r\n                                        </option>\r\n                                      )\r\n                                    )}\r\n                                  </CustomInput>\r\n                                </FormGroup>\r\n                              </Col>\r\n                            </>\r\n                          );\r\n                        }\r\n                      } else {\r\n                        return (\r\n                          <>\r\n                            <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                              <FormGroup>\r\n                                <Label className=\"mb-1\">\r\n                                  {ele?.dropdown?.label?._text &&\r\n                                    ele?.dropdown?.label?._text}\r\n                                </Label>\r\n                                <CustomInput\r\n                                  required\r\n                                  type=\"select\"\r\n                                  name={ele?.dropdown?.name?._text}\r\n                                  value={formData[ele?.dropdown?.name?._text]}\r\n                                  onChange={handleInputChange}>\r\n                                  <option value=\"\">--Select --</option>\r\n                                  {ele?.dropdown?.option?.map(\r\n                                    (option, index) => (\r\n                                      <option\r\n                                        key={index}\r\n                                        value={option?._attributes?.value}>\r\n                                        {option?._attributes?.value}\r\n                                      </option>\r\n                                    )\r\n                                  )}\r\n                                </CustomInput>\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </>\r\n                        );\r\n                      }\r\n                    })}\r\n                  </>\r\n                ) : null}\r\n\r\n                {CreatAccountView &&\r\n                  CreatAccountView?.map((ele, i) => {\r\n                    if (ele?.name?._text == \"Category\") {\r\n                      return (\r\n                        <>\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label className=\"mb-1\">\r\n                                {ele?.label?._text} *\r\n                              </Label>\r\n                              <CustomInput\r\n                                value={formData?.ele?.name?._text}\r\n                                onChange={(e) => {\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [ele?.name?._text]: e.target.value,\r\n                                  });\r\n                                }}\r\n                                type=\"select\">\r\n                                <option>--Select Category--</option>\r\n                                {CustomerGroup &&\r\n                                  CustomerGroup?.map((ele, i) => (\r\n                                    <option key={ele?._id} value={ele?._id}>\r\n                                      {ele?.groupName}\r\n                                    </option>\r\n                                  ))}\r\n                              </CustomInput>\r\n\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </>\r\n                      );\r\n                    }\r\n                    if (\r\n                      formData?.Registration_Type &&\r\n                      formData?.Registration_Type == \"Unregistered\"\r\n                    ) {\r\n                      if (ele?.label?._text.includes(\"GST Number\")) {\r\n                        return null;\r\n                      }\r\n                    }\r\n                    if (\r\n                      ele?.label?._text &&\r\n                      ele?.label?._text?.toLowerCase()?.includes(\"transporter\")\r\n                    ) {\r\n                      return (\r\n                        <>\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label className=\"mb-1\">\r\n                                {ele?.label?._text}\r\n                              </Label>\r\n                              <CustomInput\r\n                                value={formData[\"transporter_detail\"]}\r\n                                onChange={(e) => {\r\n                                  if (e.target.value == \"other\") {\r\n                                    handleSetShowTransporter(e.target.value);\r\n                                  }\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [ele?.name?._text]: e.target.value,\r\n                                  });\r\n                                }}\r\n                                type=\"select\">\r\n                                <option>--Select Transporter Type--</option>\r\n                                <option value=\"Local\">Local</option>\r\n                                <option value=\"other\">Other</option>\r\n                              </CustomInput>\r\n\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                          {formData?.transporter_detail &&\r\n                          formData?.transporter_detail == \"other\" ? (\r\n                            <>\r\n                              <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                <FormGroup>\r\n                                  <Label className=\"mb-1\">\r\n                                    Transporter List\r\n                                  </Label>\r\n                                  <Multiselect\r\n                                    required\r\n                                    isObject=\"false\"\r\n                                    options={TransporterList} // Options to display in the dropdown\r\n                                    selectedValues={\r\n                                      Selectedtransporter && Selectedtransporter\r\n                                    } // Preselected value to persist in dropdown\r\n                                    onSelect={onSelect1} // Function will trigger on select event\r\n                                    onRemove={onRemove1} // Function will trigger on remove event\r\n                                    displayValue=\"firstName\" // Property name to display in the dropdown options\r\n                                  />\r\n\r\n                                  {index === i ? (\r\n                                    <>\r\n                                      {error && (\r\n                                        <span style={{ color: \"red\" }}>\r\n                                          {error}\r\n                                        </span>\r\n                                      )}\r\n                                    </>\r\n                                  ) : (\r\n                                    <></>\r\n                                  )}\r\n                                </FormGroup>\r\n                              </Col>\r\n                            </>\r\n                          ) : null}\r\n                        </>\r\n                      );\r\n                    }\r\n\r\n                    const convertedTime = moment(\"2022-08-05T12:00:00\")\r\n                      .tz(\"America/New_York\")\r\n                      .format(\"D MMM, YYYY HH:mm\");\r\n\r\n                    if (!!ele?.phoneinput) {\r\n                      return (\r\n                        <>\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label className=\"mb-1\">\r\n                                {ele?.label?._text}\r\n                              </Label>\r\n                              <PhoneInput\r\n                                inputClass=\"myphoneinput\"\r\n                                country={\"us\"}\r\n                                onKeyDown={(e) => {\r\n                                  if (\r\n                                    ele?.type?._attributes?.type == \"number\"\r\n                                  ) {\r\n                                    [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                      e.preventDefault();\r\n                                  }\r\n                                }}\r\n                                countryCodeEditable={false}\r\n                                name={ele?.name?._text}\r\n                                value={formData[ele?.name?._text]}\r\n                                onChange={(phone) => {\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [ele?.name?._text]: phone,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </>\r\n                      );\r\n                    } else if (!!ele?.library) {\r\n                      if (ele?.label._text?.includes(\"ountry\")) {\r\n                        {\r\n                          /* console.log(ele); */\r\n                        }\r\n                        return (\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label className=\"mb-1\">\r\n                                {ele?.label?._text}\r\n                              </Label>\r\n                              <Select\r\n                                inputClass=\"countryclass\"\r\n                                className=\"countryclassnw\"\r\n                                options={Country.getAllCountries()}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={Countries}\r\n                                onChange={(country) => {\r\n                                  setCountry(country);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"Country\"]: country?.name,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else if (ele?.label._text?.includes(\"tate\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label className=\"mb-1\">\r\n                                {ele?.label?._text}\r\n                              </Label>\r\n                              <Select\r\n                                options={State?.getStatesOfCountry(\r\n                                  Countries?.isoCode\r\n                                )}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={States}\r\n                                onChange={(State) => {\r\n                                  setState(State);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"State\"]: State?.name,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else if (ele?.label._text?.includes(\"ity\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label className=\"mb-1\">\r\n                                {ele?.label?._text}\r\n                              </Label>\r\n                              <Select\r\n                                options={City?.getCitiesOfState(\r\n                                  States?.countryCode,\r\n                                  States?.isoCode\r\n                                )}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={Cities}\r\n                                onChange={(City) => {\r\n                                  setCities(City);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"City\"]: City?.name,\r\n                                    [\"transporter_detail\"]: \"Local\",\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else {\r\n                        return (\r\n                          <>\r\n                            {ele?.type?._attributes?.type == \"date\" ? (\r\n                              <>\r\n                                <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                  <FormGroup key={i}>\r\n                                    <Label className=\"mb-1\">\r\n                                      {ele?.label?._text}\r\n                                    </Label>\r\n\r\n                                    <Input\r\n                                      onKeyDown={(e) => {\r\n                                        if (\r\n                                          ele?.type?._attributes?.type ==\r\n                                          \"number\"\r\n                                        ) {\r\n                                          [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                            e.key\r\n                                          ) && e.preventDefault();\r\n                                        }\r\n                                      }}\r\n                                      type={ele?.type?._attributes?.type}\r\n                                      placeholder={ele?.placeholder?._text}\r\n                                      name={ele?.name?._text}\r\n                                      dateFormat={\r\n                                        Context?.UserInformatio?.dateFormat\r\n                                      }\r\n                                      value={\r\n                                        moment(formData[ele?.name?._text])\r\n                                          .tz(Context?.UserInformatio?.timeZone)\r\n                                          .format(\r\n                                            Context?.UserInformatio?.dateFormat\r\n                                          )\r\n                                        // formData[ele?.name?._text]\r\n                                      }\r\n                                      // value={formData[ele?.name?._text]}\r\n                                      onChange={(e) =>\r\n                                        handleInputChange(\r\n                                          e,\r\n                                          ele?.type?._attributes?.type,\r\n                                          i\r\n                                        )\r\n                                      }\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </FormGroup>\r\n                                </Col>\r\n                              </>\r\n                            ) : (\r\n                              <>\r\n                                <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                  <FormGroup key={i}>\r\n                                    <Label className=\"mb-1\">\r\n                                      {ele?.label?._text}\r\n                                    </Label>\r\n\r\n                                    <Input\r\n                                      onKeyDown={(e) => {\r\n                                        if (\r\n                                          ele?.type?._attributes?.type ==\r\n                                          \"number\"\r\n                                        ) {\r\n                                          [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                            e.key\r\n                                          ) && e.preventDefault();\r\n                                        }\r\n                                      }}\r\n                                      type={ele?.type?._attributes?.type}\r\n                                      placeholder={ele?.placeholder?._text}\r\n                                      name={ele?.name?._text}\r\n                                      value={formData[ele?.name?._text]}\r\n                                      onChange={(e) =>\r\n                                        handleInputChange(\r\n                                          e,\r\n                                          ele?.type?._attributes?.type,\r\n                                          i\r\n                                        )\r\n                                      }\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </FormGroup>\r\n                                </Col>\r\n                              </>\r\n                            )}\r\n                          </>\r\n                        );\r\n                      }\r\n                    } else {\r\n                      return (\r\n                        <>\r\n                          {!!ele?.number ? (\r\n                            <>\r\n                              <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                <FormGroup key={i}>\r\n                                  <Label className=\"mb-1\">\r\n                                    {ele?.label?._text}\r\n                                  </Label>\r\n\r\n                                  <Input\r\n                                    onWheel={(e) => {\r\n                                      e.preventDefault(); // Prevent the mouse wheel scroll event\r\n                                    }}\r\n                                    onKeyDown={(e) => {\r\n                                      if (\r\n                                        ele?.type?._attributes?.type == \"number\"\r\n                                      ) {\r\n                                        [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                          e.preventDefault();\r\n                                      }\r\n                                    }}\r\n                                    type={ele?.type?._attributes?.type}\r\n                                    placeholder={ele?.placeholder?._text}\r\n                                    name={ele?.name?._text}\r\n                                    value={formData[ele?.name?._text]}\r\n                                    onChange={(e) =>\r\n                                      handleInputChange(\r\n                                        e,\r\n                                        ele?.type?._attributes?.type,\r\n                                        i\r\n                                      )\r\n                                    }\r\n                                  />\r\n                                  {index === i ? (\r\n                                    <>\r\n                                      {error && (\r\n                                        <span style={{ color: \"red\" }}>\r\n                                          {error}\r\n                                        </span>\r\n                                      )}\r\n                                    </>\r\n                                  ) : (\r\n                                    <></>\r\n                                  )}\r\n                                </FormGroup>\r\n                              </Col>\r\n                            </>\r\n                          ) : (\r\n                            <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                              <FormGroup key={i}>\r\n                                {ele?.type?._attributes?.type &&\r\n                                ele?.type?._attributes?.type == \"file\" ? (\r\n                                  <>\r\n                                    <Label className=\"mb-1\">\r\n                                      {ele?.label?._text}\r\n                                    </Label>\r\n\r\n                                    <Input\r\n                                      multiple\r\n                                      className=\"form-control\"\r\n                                      type={ele?.type?._attributes?.type}\r\n                                      placeholder={ele?.placeholder?._text}\r\n                                      name={ele?.name?._text}\r\n                                      //   value={formData[ele?.name?._text]}\r\n                                      onChange={(e) => {\r\n                                        // const value = e.target.value;\r\n                                        // // Use regular expression to allow only numbers\r\n                                        // const numericValue = value.replace(\r\n                                        //   /\\D/g,\r\n                                        //   \"\"\r\n                                        // );\r\n                                        handleFileChange(\r\n                                          e,\r\n                                          ele?.type?._attributes?.type,\r\n                                          i\r\n                                        );\r\n                                      }}\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </>\r\n                                ) : (\r\n                                  <>\r\n                                    <Label className=\"mb-1\">\r\n                                      {ele?.label?._text}\r\n                                    </Label>\r\n\r\n                                    <Input\r\n                                      className=\"form-control\"\r\n                                      onKeyDown={(e) => {\r\n                                        if (\r\n                                          ele?.type?._attributes?.type ==\r\n                                          \"number\"\r\n                                        ) {\r\n                                          [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                            e.key\r\n                                          ) && e.preventDefault();\r\n                                        }\r\n                                      }}\r\n                                      type={ele?.type?._attributes?.type}\r\n                                      placeholder={ele?.placeholder?._text}\r\n                                      name={ele?.name?._text}\r\n                                      value={formData[ele?.name?._text]}\r\n                                      onChange={(e) => {\r\n                                        // const value = e.target.value;\r\n                                        // // Use regular expression to allow only numbers\r\n                                        // const numericValue = value.replace(\r\n                                        //   /\\D/g,\r\n                                        //   \"\"\r\n                                        // );\r\n                                        handleInputChange(\r\n                                          e,\r\n                                          ele?.type?._attributes?.type,\r\n                                          i\r\n                                        );\r\n                                      }}\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </>\r\n                                )}\r\n\r\n                                {/* <Label className=\"mb-1\">\r\n                                  {ele?.label?._text}\r\n                                </Label>\r\n\r\n                                <Input\r\n                                  className=\"form-control\"\r\n                                  onKeyDown={(e) => {\r\n                                    if (\r\n                                      ele?.type?._attributes?.type == \"number\"\r\n                                    ) {\r\n                                      [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                        e.preventDefault();\r\n                                    }\r\n                                  }}\r\n                                  type={ele?.type?._attributes?.type}\r\n                                  placeholder={ele?.placeholder?._text}\r\n                                  name={ele?.name?._text}\r\n                                  value={formData[ele?.name?._text]}\r\n                                  onChange={(e) => {\r\n                                    // const value = e.target.value;\r\n                                    // // Use regular expression to allow only numbers\r\n                                    // const numericValue = value.replace(\r\n                                    //   /\\D/g,\r\n                                    //   \"\"\r\n                                    // );\r\n                                    handleInputChange(\r\n                                      e,\r\n                                      ele?.type?._attributes?.type,\r\n                                      i\r\n                                    );\r\n                                  }}\r\n                                />\r\n                                {index === i ? (\r\n                                  <>\r\n                                    {error && (\r\n                                      <span style={{ color: \"red\" }}>\r\n                                        {error}\r\n                                      </span>\r\n                                    )}\r\n                                  </>\r\n                                ) : (\r\n                                  <></>\r\n                                )} */}\r\n                              </FormGroup>\r\n                            </Col>\r\n                          )}\r\n                        </>\r\n                      );\r\n                    }\r\n                  })}\r\n              </Row>\r\n\r\n              <hr />\r\n              <Row>\r\n                <Col lg=\"12\" md=\"12\" sm=\"12\">\r\n                  <Label>OR</Label>\r\n                </Col>\r\n                <Col lg=\"4\" md=\"4\" sm=\"12\">\r\n                  <FormGroup>\r\n                    <Label>Bulk Import</Label>\r\n\r\n                    <Input\r\n                      className=\"form-control\"\r\n                      type=\"file\"\r\n                      placeholder=\"\"\r\n                      name=\"BulkImport\"\r\n                      onChange={(e) => {\r\n                        setBulkImport(e.target.files[0]);\r\n                      }}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n              </Row>\r\n              <Row className=\"mt-2\">\r\n                <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2 mt-1\">\r\n                  <Label className=\"mb-0\">Status</Label>\r\n                  <div\r\n                    className=\"form-label-group\"\r\n                    onChange={(e) => {\r\n                      setFormData({\r\n                        ...formData,\r\n                        [\"status\"]: e.target.value,\r\n                      });\r\n                    }}>\r\n                    <input\r\n                      checked={formData.status == \"Active\"}\r\n                      style={{ marginRight: \"3px\" }}\r\n                      type=\"radio\"\r\n                      name=\"status\"\r\n                      value=\"Active\"\r\n                    />\r\n                    <span style={{ marginRight: \"20px\" }}>Active</span>\r\n\r\n                    <input\r\n                      checked={formData.status == \"Deactive\"}\r\n                      style={{ marginRight: \"3px\" }}\r\n                      type=\"radio\"\r\n                      name=\"status\"\r\n                      value=\"Deactive\"\r\n                    />\r\n                    <span style={{ marginRight: \"3px\" }}>Deactive</span>\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row>\r\n                <Button.Ripple\r\n                  color=\"primary\"\r\n                  type=\"submit\"\r\n                  className=\"mr-1 mt-2 mx-2\">\r\n                  Submit\r\n                </Button.Ripple>\r\n              </Row>\r\n            </Form>\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default CreateCustomer;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"row\", \"disabled\", \"check\", \"inline\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  row: PropTypes.bool,\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar FormGroup = function FormGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      row = props.row,\n      disabled = props.disabled,\n      check = props.check,\n      inline = props.inline,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, row ? 'row' : false, check ? 'form-check' : 'form-group', check && inline ? 'form-check-inline' : false, check && disabled ? 'disabled' : false), cssModule);\n\n  if (Tag === 'fieldset') {\n    attributes.disabled = disabled;\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormGroup.propTypes = propTypes;\nFormGroup.defaultProps = defaultProps;\nexport default FormGroup;"],"sourceRoot":""}