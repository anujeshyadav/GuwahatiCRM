{"version":3,"sources":["views/forms/form-elements/datepicker/Timepicker.js","views/forms/form-elements/datepicker/Datepickers.js","views/forms/form-elements/datepicker/Pickers.js","views/apps/freshlist/customer/warehouse/AddDamage.js"],"names":["Timepickers","state","basic","Date","timeLimit","preloaded","this","className","md","sm","value","options","enableTime","noCalendar","dateFormat","onChange","date","setState","minTime","maxTime","defaultDate","React","Component","Datepickers","basicPicker","dateTimePicker","humanFriendly","minMax","disabledRange","multipleDates","rangePicker","weekNum","inlinePicker","Card","CardHeader","CardTitle","CardBody","Row","Col","minDate","altInput","altFormat","data-enable-time","maxDate","fp_incr","disable","from","to","mode","preloadRange","weekNumbers","inline","Pickers","Fragment","breadCrumbTitle","breadCrumbParent","breadCrumbActive","Timepicker","GrandTotal","SelectedITems","SelectedSize","CreateTarget","args","useState","setIndex","ProductWTWList","setProductWTWList","WareHouseone","setWareHouseone","grandTotalAmt","setGrandTotalAmt","UnitList","setUnitList","setUserInfo","WareHouselist","setWarehouseList","product","productId","AvailaleQty","availableQty","transferQty","price","totalprice","Size","unitType","stockTrxDate","targetEndDate","discount","Shipping","tax","grandTotal","setProduct","handleProductChangeProduct","e","index","avalaibleSize","Number","target","console","log","name","list","includes","available","Askingfor","swal","amt","length","map","val","reduce","a","b","handleRemoveSelected","selectedList","selectedItem","splice","ele","i","qty","Product_MRP","indextotal","handleRemoveSelectedone","unitQty","useEffect","userData","JSON","parse","localStorage","getItem","Warehouse_Temporarlylist","_id","then","res","adminDetails","catch","err","UnitListView","database","Unit","userInfo","removeMoreProduct","newFormValues","DamagedStockSubmitHandler","preventDefault","payload","typeStatus","warehouse","totalPrice","currentStock","Save_Damagedstock","lg","render","history","style","cursor","color","onClick","goBack","onSubmit","required","selectionLimit","isObject","onSelect","productItems","myproduct","Product_Title","MIN_stockalert","onRemove","removedItem","displayValue","key","push","prevProductList","updatedProductList","updatedProduct","handleSelection","primaryUnit","handleSelectionone","type","min","placeholder","disabled","readOnly","Ripple"],"mappings":"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","file":"static/js/216.bae68471.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { Row, Col, Card, CardBody, CardHeader, CardTitle } from \"reactstrap\"\r\nimport Flatpickr from \"react-flatpickr\";\r\n\r\nclass Timepickers extends React.Component{\r\n  state ={\r\n    basic : new Date(),\r\n    timeLimit : new Date(),\r\n    preloaded : new Date()\r\n  }\r\n\r\n  render(){\r\n    let { basic, timeLimit } = this.state\r\n    return(\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Timepickers</CardTitle>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <Row>\r\n            <Col className=\"mb-3\" md=\"6\" sm=\"12\">\r\n              <h5 className=\"text-bold-500\">Basic 24hrs</h5>\r\n              <Flatpickr\r\n                className=\"form-control\"\r\n                value={basic}\r\n                options={{\r\n                  enableTime: true,\r\n                  noCalendar: true,\r\n                  dateFormat: \"H:i\",\r\n                }}\r\n                onChange={date => {\r\n                  this.setState({ basic : date });\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col className=\"mb-3\" md=\"6\" sm=\"12\">\r\n              <h5 className=\"text-bold-500\">Limit</h5>\r\n              <Flatpickr\r\n                className=\"form-control\"\r\n                value={timeLimit}\r\n                options={{\r\n                  enableTime: true,\r\n                  noCalendar: true,\r\n                  dateFormat: \"H:i\",\r\n                  minTime: \"16:00\",\r\n                  maxTime: \"22:30\"\r\n                }}\r\n                onChange={date => {\r\n                  this.setState({ timeLimit : date });\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col className=\"mb-3\" md=\"6\" sm=\"12\">\r\n              <h5 className=\"text-bold-500\">Preloaded</h5>\r\n              <Flatpickr\r\n                className=\"form-control\"\r\n                options={{\r\n                  enableTime: true,\r\n                  noCalendar: true,\r\n                  dateFormat: \"H:i\",\r\n                  defaultDate: \"13:45\"\r\n                }}\r\n                onChange={date => {\r\n                  this.setState({ preloaded : date });\r\n                }}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </CardBody>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Timepickers","import React from \"react\";\r\nimport { Row, Col, Card, CardBody, CardHeader, CardTitle } from \"reactstrap\";\r\nimport Flatpickr from \"react-flatpickr\";\r\n\r\nclass Datepickers extends React.Component {\r\n  state = {\r\n    basicPicker: new Date(),\r\n    dateTimePicker: new Date(),\r\n    humanFriendly: new Date(),\r\n    minMax: new Date(),\r\n    disabledRange: new Date(),\r\n    multipleDates: new Date(),\r\n    rangePicker: new Date(),\r\n    weekNum: new Date(),\r\n    inlinePicker: new Date(),\r\n  };\r\n\r\n  render() {\r\n    let {\r\n      basicPicker,\r\n      dateTimePicker,\r\n      humanFriendly,\r\n      minMax,\r\n      disabledRange,\r\n      multipleDates,\r\n      rangePicker,\r\n      weekNum,\r\n      inlinePicker,\r\n    } = this.state;\r\n\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Datepickers</CardTitle>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <Row>\r\n            <Col className=\"mb-3\" md=\"6\" sm=\"12\">\r\n              <h5 className=\"text-bold-500\">Basic</h5>\r\n              <Flatpickr\r\n                className=\"form-control\"\r\n                value={basicPicker}\r\n                onChange={(date) => {\r\n                  this.setState({ basicPicker: date });\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col className=\"mb-3\" md=\"6\" sm=\"12\">\r\n              <h5 className=\"text-bold-500\">Date & Time</h5>\r\n              <Flatpickr\r\n                options={{\r\n                  minDate: \"today\",\r\n                  altInput: true,\r\n                  // altFormat: \"j-m-Y H:i:S\",\r\n                  altFormat: \"m-j-Y H:i:S\",\r\n                }}\r\n                className=\"form-control\"\r\n                data-enable-time\r\n                value={dateTimePicker}\r\n                onChange={(date) => {\r\n                  this.setState({ dateTimePicker: date });\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col className=\"mb-3\" md=\"6\" sm=\"12\">\r\n              <h5 className=\"text-bold-500\">Human Friendly</h5>\r\n              <Flatpickr\r\n                className=\"form-control\"\r\n                value={humanFriendly}\r\n                options={{\r\n                  altInput: true,\r\n                  altFormat: \"F j, Y\",\r\n                  dateFormat: \"Y-m-d\",\r\n                }}\r\n                onChange={(date) => {\r\n                  this.setState({ humanFriendly: date });\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col className=\"mb-3\" md=\"6\" sm=\"12\">\r\n              <h5 className=\"text-bold-500\">Min & Max Dates</h5>\r\n              <Flatpickr\r\n                className=\"form-control\"\r\n                value={minMax}\r\n                options={{ minDate: \"today\", maxDate: new Date().fp_incr(14) }}\r\n                onChange={(date) => {\r\n                  this.setState({ minMax: date });\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col className=\"mb-3\" md=\"6\" sm=\"12\">\r\n              <h5 className=\"text-bold-500\">Disabled Range</h5>\r\n              <Flatpickr\r\n                className=\"form-control\"\r\n                value={disabledRange}\r\n                options={{\r\n                  dateFormat: \"Y-m-d\",\r\n                  disable: [\r\n                    {\r\n                      from: \"2020-02-01\",\r\n                      to: \"2020-02-10\",\r\n                    },\r\n                    {\r\n                      from: \"2020-02-20\",\r\n                      to: \"2020-02-25\",\r\n                    },\r\n                  ],\r\n                }}\r\n                onChange={(date) => {\r\n                  this.setState({ disabledRange: date });\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col className=\"mb-3\" md=\"6\" sm=\"12\">\r\n              <h5 className=\"text-bold-500\">Multiple Dates</h5>\r\n              <Flatpickr\r\n                className=\"form-control\"\r\n                value={multipleDates}\r\n                options={{ mode: \"multiple\" }}\r\n                onChange={(date) => {\r\n                  this.setState({ multipleDates: date });\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col className=\"mb-3\" md=\"6\" sm=\"12\">\r\n              <h5 className=\"text-bold-500\">Range</h5>\r\n              <Flatpickr\r\n                value={rangePicker}\r\n                className=\"form-control\"\r\n                options={{ mode: \"range\" }}\r\n              />\r\n            </Col>\r\n            <Col className=\"mb-3\" md=\"6\" sm=\"12\">\r\n              <h5 className=\"text-bold-500\">Preloaded Range</h5>\r\n              <Flatpickr\r\n                className=\"form-control\"\r\n                options={{\r\n                  mode: \"range\",\r\n                  defaultDate: [\"2020-02-01\", \"2020-02-15\"],\r\n                }}\r\n                onChange={(date) => {\r\n                  this.setState({ preloadRange: date });\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col className=\"mb-md-0 mb-3\" md=\"6\" sm=\"12\">\r\n              <h5 className=\"text-bold-500\">Week Numbers</h5>\r\n              <Flatpickr\r\n                className=\"form-control\"\r\n                value={weekNum}\r\n                options={{ weekNumbers: true }}\r\n                onChange={(date) => {\r\n                  this.setState({ weekNum: date });\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col md=\"6\" sm=\"12\">\r\n              <h5 className=\"text-bold-500\">Inline</h5>\r\n              <Flatpickr\r\n                className=\"form-control\"\r\n                value={inlinePicker}\r\n                options={{ inline: true }}\r\n                onChange={(date) => {\r\n                  this.setState({ inlinePicker: date });\r\n                }}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </CardBody>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Datepickers;\r\n","import React from \"react\";\r\nimport { Row, Col } from \"reactstrap\";\r\nimport Breadcrumbs from \"../../../../components/@vuexy/breadCrumbs/BreadCrumb\";\r\nimport Datepickers from \"./Datepickers\";\r\nimport Timepickers from \"./Timepicker\";\r\n\r\nimport \"flatpickr/dist/themes/light.css\";\r\nimport \"../../../../assets/scss/plugins/forms/flatpickr/flatpickr.scss\";\r\n\r\nclass Pickers extends React.Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Breadcrumbs\r\n          breadCrumbTitle=\"Date & Time Picker\"\r\n          breadCrumbParent=\"Form Elements\"\r\n          breadCrumbActive=\"Date & Time Picker\"\r\n        />\r\n        <Row>\r\n          <Col sm=\"12\">\r\n            <Datepickers />\r\n          </Col>\r\n          <Col sm=\"12\">\r\n            <Timepickers />\r\n          </Col>\r\n        </Row>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nexport default Pickers;\r\n// import { useState, useRef } from \"react\";\r\n// import Tesseract from \"tesseract.js\";\r\n\r\n// function anuj() {\r\n//   const [imagePath, setImagePath] = useState(\"\");\r\n//   const [text, setText] = useState(\"aa\");\r\n\r\n//   const handleChange = (event) => {\r\n//     setImage(URL.createObjectURL(event.target.files[0]));\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <main className=\"App-main\">\r\n//         <h3>Actual image uploaded</h3>\r\n//         {/* <img src={imagePath} className=\"App-logo\" alt=\"logo\" /> */}\r\n\r\n//         <h3>Extracted text</h3>\r\n//         <div className=\"text-box\">\r\n//           <p> {text} </p>\r\n//         </div>\r\n//         <input type=\"file\" onChange={handleChange} />\r\n//       </main>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default anuj;\r\n","// import React, { useRef } from \"react\";\r\n// import { Route } from \"react-router-dom\";\r\n// import xmlJs from \"xml-js\";\r\n// import {\r\n//   Card,\r\n//   CardBody,\r\n//   Input,\r\n//   Row,\r\n//   Modal,\r\n//   Col,\r\n//   UncontrolledDropdown,\r\n//   DropdownMenu,\r\n//   DropdownItem,\r\n//   DropdownToggle,\r\n//   Button,\r\n//   ModalHeader,\r\n//   ModalBody,\r\n//   Badge,\r\n// } from \"reactstrap\";\r\n\r\n// import { ContextLayout } from \"../../../../../utility/context/Layout\";\r\n// import { AgGridReact } from \"ag-grid-react\";\r\n// import \"ag-grid-community/dist/styles/ag-grid.css\";\r\n// import EditAccount from \"../../accounts/EditAccount\";\r\n// import ViewAccount from \"../../accounts/ViewAccount\";\r\n// import jsPDF from \"jspdf\";\r\n// import \"jspdf-autotable\";\r\n// import Logo from \"../../../../../assets/img/profile/pages/logomain.png\";\r\n// import Papa from \"papaparse\";\r\n// import { Eye, Trash2, ChevronDown, Edit } from \"react-feather\";\r\n// import { IoMdRemoveCircleOutline } from \"react-icons/io\";\r\n// import \"../../../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\r\n// import \"../../../../../assets/scss/pages/users.scss\";\r\n\r\n// import {\r\n//   FaArrowAltCircleLeft,\r\n//   FaArrowAltCircleRight,\r\n//   FaFilter,\r\n//   FaPlus,\r\n// } from \"react-icons/fa\";\r\n// import moment from \"moment-timezone\";\r\n// import swal from \"sweetalert\";\r\n// import {\r\n//   CreateAccountList,\r\n//   CreateAccountView,\r\n//   DeleteAccount,\r\n//   Stock_trxFactorytoWList,\r\n//   ViewFactoryStock,\r\n//   View_Wareahouseid,\r\n// } from \"../../../../../ApiEndPoint/ApiCalling\";\r\n// import {\r\n//   BsCloudDownloadFill,\r\n//   BsFillArrowDownSquareFill,\r\n//   BsFillArrowUpSquareFill,\r\n// } from \"react-icons/bs\";\r\n// import * as XLSX from \"xlsx\";\r\n// import UserContext from \"../../../../../context/Context\";\r\n\r\n// const SelectedColums = [];\r\n\r\n// class AddDamage extends React.Component {\r\n//   static contextType = UserContext;\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.gridRef = React.createRef();\r\n//     this.gridApi = null;\r\n//     this.state = {\r\n//       isOpen: false,\r\n//       Arrindex: \"\",\r\n//       rowData: [],\r\n//       setMySelectedarr: [],\r\n//       SelectedCols: [],\r\n//       paginationPageSize: 5,\r\n//       currenPageSize: \"\",\r\n//       getPageSize: \"\",\r\n\r\n//       columnDefs: [\r\n//         {\r\n//           headerName: \"S.No\",\r\n//           valueGetter: \"node.rowIndex + 1\",\r\n//           field: \"node.rowIndex + 1\",\r\n//           width: 150,\r\n//           filter: true,\r\n//         },\r\n//         {\r\n//           headerName: \"Product Title\",\r\n//           field: \"productId.Product_Title\",\r\n//           filter: true,\r\n//           width: 200,\r\n//           cellRendererFramework: (params) => {\r\n//             console.log(params?.data);\r\n//             return (\r\n//               <div>\r\n//                 <span>{params.data?.productId.Product_Title}</span>\r\n//               </div>\r\n//             );\r\n//           },\r\n//         },\r\n//         {\r\n//           headerName: \"Price\",\r\n//           field: \"price\",\r\n//           filter: true,\r\n//           width: 200,\r\n//           cellRendererFramework: (params) => {\r\n//             console.log(params);\r\n//             return (\r\n//               <div>\r\n//                 <span>{params.data?.price}</span>\r\n//               </div>\r\n//             );\r\n//           },\r\n//         },\r\n\r\n//         {\r\n//           headerName: \"UnitType\",\r\n//           field: \"unitType\",\r\n//           filter: true,\r\n//           width: 200,\r\n//           cellRendererFramework: (params) => {\r\n//             return (\r\n//               <div>\r\n//                 <span>{params.data?.unitType}</span>\r\n//               </div>\r\n//             );\r\n//           },\r\n//         },\r\n//         {\r\n//           headerName: \"Current Stock\",\r\n//           field: \"Size\",\r\n//           filter: true,\r\n//           width: 200,\r\n//           cellRendererFramework: (params) => {\r\n//             return (\r\n//               <div>\r\n//                 <span>{params.data?.Size}</span>\r\n//               </div>\r\n//             );\r\n//           },\r\n//         },\r\n\r\n//         // {\r\n//         //   headerName: \"Status\",\r\n//         //   field: \"status\",\r\n//         //   filter: true,\r\n//         //   width: 150,\r\n//         //   cellRendererFramework: (params) => {\r\n//         //     return params.data?.status === \"transferring\" ? (\r\n//         //       <div className=\"badge badge-pill badge-success\">\r\n//         //         {params.data?.status}\r\n//         //       </div>\r\n//         //     ) : params.value === \"false\" ? (\r\n//         //       <div className=\"badge badge-pill badge-warning\">\r\n//         //         {params.data?.status}\r\n//         //       </div>\r\n//         //     ) : null;\r\n//         //   },\r\n//         // },\r\n//         // {\r\n//         //   headerName: \"Grand Total\",\r\n//         //   field: \"grandTotal\",\r\n//         //   filter: true,\r\n//         //   sortable: true,\r\n//         //   cellRendererFramework: (params) => {\r\n//         //     return (\r\n//         //       <>\r\n//         //         <div className=\"actions cursor-pointer\">\r\n//         //           <span>{params?.data?.grandTotal}</span>\r\n//         //         </div>\r\n//         //       </>\r\n//         //     );\r\n//         //   },\r\n//         // },\r\n//         // {\r\n//         //   headerName: \"Created date\",\r\n//         //   field: \"createdAt\",\r\n//         //   filter: true,\r\n//         //   sortable: true,\r\n//         //   cellRendererFramework: (params) => {\r\n//         //     return (\r\n//         //       <>\r\n//         //         <div className=\"actions cursor-pointer\">\r\n//         //           <span>{params?.data?.createdAt}</span>\r\n//         //         </div>\r\n//         //       </>\r\n//         //     );\r\n//         //   },\r\n//         // },\r\n\r\n//         {\r\n//           headerName: \"Actions\",\r\n//           field: \"sortorder\",\r\n//           field: \"transactions\",\r\n//           width: 150,\r\n//           cellRendererFramework: (params) => {\r\n//             return (\r\n//               <div className=\"actions cursor-pointer\">\r\n//                 <Eye\r\n//                   className=\"mr-50\"\r\n//                   size=\"25px\"\r\n//                   color=\"green\"\r\n//                   //   onClick={() =>\r\n//                   //     history.push(\r\n//                   //       `/app/freshlist/customer/viewCustomer/${params.data?._id}`\r\n//                   //     )\r\n//                   //   }\r\n//                 />\r\n//                 <Edit\r\n//                   className=\"mr-50\"\r\n//                   size=\"25px\"\r\n//                   color=\"blue\"\r\n//                   //   onClick={() =>\r\n//                   //     history.push(\r\n//                   //       `/app/freshlist/customer/editCustomer/${params.data._id}`\r\n//                   //     )\r\n//                   //   }\r\n//                 />\r\n//                 <Trash2\r\n//                   className=\"mr-50\"\r\n//                   size=\"25px\"\r\n//                   color=\"red\"\r\n//                   onClick={() => {\r\n//                     let selectedData = this.gridApi.getSelectedRows();\r\n//                     this.runthisfunction(params.data._id);\r\n//                     this.gridApi.updateRowData({ remove: selectedData });\r\n//                   }}\r\n//                 />\r\n//               </div>\r\n//             );\r\n//           },\r\n//         },\r\n//       ],\r\n//       AllcolumnDefs: [],\r\n//       SelectedcolumnDefs: [],\r\n//       defaultColDef: {\r\n//         sortable: true,\r\n//         enablePivot: true,\r\n//         enableValue: true,\r\n//         resizable: true,\r\n//         suppressMenu: true,\r\n//       },\r\n//     };\r\n//   }\r\n\r\n//   LookupviewStart = () => {\r\n//     this.setState((prevState) => ({\r\n//       modal: !prevState.modal,\r\n//     }));\r\n//   };\r\n\r\n//   handleChangeEdit = (data, types) => {\r\n//     let type = types;\r\n//     if (type == \"readonly\") {\r\n//       this.setState({ ViewOneUserView: true });\r\n//       this.setState({ ViewOneData: data });\r\n//     } else {\r\n//       this.setState({ EditOneUserView: true });\r\n//       this.setState({ EditOneData: data });\r\n//     }\r\n//   };\r\n\r\n//   async componentDidMount() {\r\n//     const UserInformation = this.context?.UserInformatio;\r\n//     let pageparmission = JSON.parse(localStorage.getItem(\"userData\"));\r\n//     let userid = pageparmission?._id;\r\n//     await View_Wareahouseid(userid)\r\n//       .then((res) => {\r\n//         console.log(res?.User);\r\n//         if (res?.User?.productItems) {\r\n//           this.setState({ rowData: res?.User?.productItems });\r\n//         }\r\n//       })\r\n//       .catch((err) => {\r\n//         console.log(err);\r\n//       });\r\n//     // await ViewFactoryStock()\r\n//     //   .then((res) => {\r\n//     //     debugger;\r\n//     //     console.log(res?.Factory);\r\n//     //     this.setState({ rowData: res?.Factory });\r\n//     //     this.setState({ AllcolumnDefs: this.state.columnDefs });\r\n\r\n//     //     let userHeading = JSON.parse(localStorage.getItem(\"FactoryStock\"));\r\n//     //     if (userHeading?.length) {\r\n//     //       this.setState({ columnDefs: userHeading });\r\n//     //       this.gridApi.setColumnDefs(userHeading);\r\n//     //       this.setState({ SelectedcolumnDefs: userHeading });\r\n//     //     } else {\r\n//     //       this.setState({ columnDefs: this.state.columnDefs });\r\n//     //       this.setState({ SelectedcolumnDefs: this.state.columnDefs });\r\n//     //     }\r\n//     //     this.setState({ SelectedCols: this.state.columnDefs });\r\n//     //   })\r\n//     //   .catch((err) => {\r\n//     //     console.log(err);\r\n//     //   });\r\n//     // Stock_trxFactorytoWList(userid)\r\n//     //   .then((res) => {\r\n//     //     console.log(res);\r\n//     //   })\r\n//     //   .catch((err) => {\r\n//     //     console.log(err);\r\n//     //   });\r\n//   }\r\n\r\n//   toggleDropdown = () => {\r\n//     this.setState((prevState) => ({ isOpen: !prevState.isOpen }));\r\n//   };\r\n\r\n//   runthisfunction(id) {\r\n//     swal(\"Warning\", \"Sure You Want to Delete it\", {\r\n//       buttons: {\r\n//         cancel: \"cancel\",\r\n//         catch: { text: \"Delete \", value: \"delete\" },\r\n//       },\r\n//     }).then((value) => {\r\n//       switch (value) {\r\n//         case \"delete\":\r\n//           DeleteAccount(id)\r\n//             .then((res) => {\r\n//               let selectedData = this.gridApi.getSelectedRows();\r\n//               this.gridApi.updateRowData({ remove: selectedData });\r\n//             })\r\n//             .catch((err) => {\r\n//               console.log(err);\r\n//             });\r\n//           break;\r\n//         default:\r\n//       }\r\n//     });\r\n//   }\r\n\r\n//   onGridReady = (params) => {\r\n//     this.gridApi = params.api;\r\n//     this.gridColumnApi = params.columnApi;\r\n//     this.gridRef.current = params.api;\r\n\r\n//     this.setState({\r\n//       currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\r\n//       getPageSize: this.gridApi.paginationGetPageSize(),\r\n//       totalPages: this.gridApi.paginationGetTotalPages(),\r\n//     });\r\n//   };\r\n\r\n//   updateSearchQuery = (val) => {\r\n//     this.gridApi.setQuickFilter(val);\r\n//   };\r\n\r\n//   filterSize = (val) => {\r\n//     if (this.gridApi) {\r\n//       this.gridApi.paginationSetPageSize(Number(val));\r\n//       this.setState({\r\n//         currenPageSize: val,\r\n//         getPageSize: val,\r\n//       });\r\n//     }\r\n//   };\r\n//   handleChangeHeader = (e, value, index) => {\r\n//     let check = e.target.checked;\r\n//     if (check) {\r\n//       SelectedColums?.push(value);\r\n//     } else {\r\n//       const delindex = SelectedColums?.findIndex(\r\n//         (ele) => ele?.headerName === value?.headerName\r\n//       );\r\n\r\n//       SelectedColums?.splice(delindex, 1);\r\n//     }\r\n//   };\r\n//   parseCsv(csvData) {\r\n//     return new Promise((resolve, reject) => {\r\n//       Papa.parse(csvData, {\r\n//         header: true,\r\n//         skipEmptyLines: true,\r\n//         complete: (result) => {\r\n//           if (result.data && result.data.length > 0) {\r\n//             resolve(result.data);\r\n//           } else {\r\n//             reject(new Error(\"No data found in the CSV\"));\r\n//           }\r\n//         },\r\n//         error: (error) => {\r\n//           reject(error);\r\n//         },\r\n//       });\r\n//     });\r\n//   }\r\n//   generatePDF(parsedData) {\r\n//     let pdfsize = [Object.keys(parsedData[0])][0].length;\r\n//     let size = pdfsize > 15 ? \"a1\" : pdfsize < 14 > 10 ? \"a3\" : \"a4\";\r\n\r\n//     const doc = new jsPDF(\"landscape\", \"mm\", size, false);\r\n//     doc.setTextColor(5, 87, 97);\r\n//     const tableData = parsedData.map((row) => Object.values(row));\r\n//     doc.addImage(Logo, \"JPEG\", 10, 10, 50, 30);\r\n//     let date = new Date();\r\n//     doc.setCreationDate(date);\r\n//     doc.text(\"UserAccount\", 14, 51);\r\n//     doc.autoTable({\r\n//       head: [Object.keys(parsedData[0])],\r\n//       body: tableData,\r\n//       startY: 60,\r\n//     });\r\n\r\n//     doc.save(\"UserList.pdf\");\r\n//   }\r\n\r\n//   exportToPDF = async () => {\r\n//     const csvData = this.gridApi.getDataAsCsv({\r\n//       processCellCallback: this.processCell,\r\n//     });\r\n//     try {\r\n//       const parsedData = await this.parseCsv(csvData);\r\n//       this.generatePDF(parsedData);\r\n//     } catch (error) {\r\n//       console.error(\"Error parsing CSV:\", error);\r\n//     }\r\n//   };\r\n//   processCell = (params) => {\r\n//     // console.log(params);\r\n//     // Customize cell content as needed\r\n//     return params.value;\r\n//   };\r\n\r\n//   convertCsvToExcel(csvData) {\r\n//     return new Promise((resolve) => {\r\n//       Papa.parse(csvData, {\r\n//         header: true,\r\n//         dynamicTyping: true,\r\n//         skipEmptyLines: true,\r\n//         complete: function (result) {\r\n//           const worksheet = XLSX.utils.json_to_sheet(result.data);\r\n//           const workbook = XLSX.utils.book_new();\r\n//           XLSX.utils.book_append_sheet(workbook, worksheet, \"Sheet1\");\r\n//           const excelBuffer = XLSX.write(workbook, {\r\n//             bookType: \"xlsx\",\r\n//             type: \"array\",\r\n//           });\r\n//           const blob = new Blob([excelBuffer], {\r\n//             type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n//           });\r\n//           resolve(blob);\r\n//         },\r\n//       });\r\n//     });\r\n//   }\r\n//   downloadExcelFile(blob) {\r\n//     const url = window.URL.createObjectURL(blob);\r\n//     const a = document.createElement(\"a\");\r\n//     a.href = url;\r\n//     a.download = \"Userlist.xlsx\";\r\n//     document.body.appendChild(a);\r\n//     a.click();\r\n//     window.URL.revokeObjectURL(url);\r\n//   }\r\n\r\n//   exportToExcel = async (e) => {\r\n//     const CsvData = this.gridApi.getDataAsCsv({\r\n//       processCellCallback: this.processCell,\r\n//     });\r\n//     const blob = await this.convertCsvToExcel(CsvData);\r\n//     this.downloadExcelFile(blob);\r\n//   };\r\n\r\n//   convertCSVtoExcel = () => {\r\n//     const CsvData = this.gridApi.getDataAsCsv({\r\n//       processCellCallback: this.processCell,\r\n//     });\r\n//     Papa.parse(CsvData, {\r\n//       complete: (result) => {\r\n//         const ws = XLSX.utils.json_to_sheet(result.data);\r\n//         const wb = XLSX.utils.book_new();\r\n//         XLSX.utils.book_append_sheet(wb, ws, \"Sheet1\");\r\n//         const excelType = \"xls\";\r\n//         XLSX.writeFile(wb, `UserList.${excelType}`);\r\n//       },\r\n//     });\r\n//   };\r\n\r\n//   shiftElementUp = () => {\r\n//     let currentIndex = this.state.Arrindex;\r\n//     if (currentIndex > 0) {\r\n//       const myArrayCopy = [...this.state.SelectedcolumnDefs];\r\n//       const elementToMove = myArrayCopy.splice(currentIndex, 1)[0];\r\n//       this.setState({ Arrindex: currentIndex - 1 });\r\n//       myArrayCopy.splice(currentIndex - 1, 0, elementToMove);\r\n//       this.setState({ SelectedcolumnDefs: myArrayCopy });\r\n//     }\r\n//   };\r\n\r\n//   shiftElementDown = () => {\r\n//     let currentIndex = this.state.Arrindex;\r\n//     if (currentIndex < this.state.SelectedcolumnDefs.length - 1) {\r\n//       const myArrayCopy = [...this.state.SelectedcolumnDefs];\r\n//       const elementToMove = myArrayCopy.splice(currentIndex, 1)[0];\r\n//       this.setState({ Arrindex: currentIndex + 1 });\r\n//       myArrayCopy.splice(currentIndex + 1, 0, elementToMove);\r\n//       this.setState({ SelectedcolumnDefs: myArrayCopy });\r\n//     }\r\n//   };\r\n//   convertCsvToXml = () => {\r\n//     const CsvData = this.gridApi.getDataAsCsv({\r\n//       processCellCallback: this.processCell,\r\n//     });\r\n//     Papa.parse(CsvData, {\r\n//       complete: (result) => {\r\n//         const rows = result.data;\r\n\r\n//         // Create XML\r\n//         let xmlString = \"<root>\\n\";\r\n\r\n//         rows.forEach((row) => {\r\n//           xmlString += \"  <row>\\n\";\r\n//           row.forEach((cell, index) => {\r\n//             xmlString += `    <field${index + 1}>${cell}</field${index + 1}>\\n`;\r\n//           });\r\n//           xmlString += \"  </row>\\n\";\r\n//         });\r\n\r\n//         xmlString += \"</root>\";\r\n\r\n//         // setXmlData(xmlString);\r\n\r\n//         // Create a download link\r\n//         const blob = new Blob([xmlString], { type: \"text/xml\" });\r\n//         const link = document.createElement(\"a\");\r\n//         link.href = URL.createObjectURL(blob);\r\n//         link.download = \"output.xml\";\r\n//         link.click();\r\n//       },\r\n//     });\r\n//   };\r\n\r\n//   HandleSetVisibleField = (e) => {\r\n//     e.preventDefault();\r\n//     this.gridApi.setColumnDefs(this.state.SelectedcolumnDefs);\r\n//     this.setState({ columnDefs: this.state.SelectedcolumnDefs });\r\n//     this.setState({ SelectedcolumnDefs: this.state.SelectedcolumnDefs });\r\n//     this.setState({ rowData: this.state.rowData });\r\n//     localStorage.setItem(\r\n//       \"FactoryStock\",\r\n//       JSON.stringify(this.state.SelectedcolumnDefs)\r\n//     );\r\n//     this.LookupviewStart();\r\n//   };\r\n\r\n//   HeadingRightShift = () => {\r\n//     const updatedSelectedColumnDefs = [\r\n//       ...new Set([\r\n//         ...this.state.SelectedcolumnDefs.map((item) => JSON.stringify(item)),\r\n//         ...SelectedColums.map((item) => JSON.stringify(item)),\r\n//       ]),\r\n//     ].map((item) => JSON.parse(item));\r\n//     this.setState({\r\n//       SelectedcolumnDefs: [...new Set(updatedSelectedColumnDefs)], // Update the state with the combined array\r\n//     });\r\n//   };\r\n//   handleLeftShift = () => {\r\n//     let SelectedCols = this.state.SelectedcolumnDefs.slice();\r\n//     let delindex = this.state.Arrindex; /* Your delete index here */\r\n\r\n//     if (SelectedCols && delindex >= 0) {\r\n//       const splicedElement = SelectedCols.splice(delindex, 1); // Remove the element\r\n\r\n//       this.setState({\r\n//         SelectedcolumnDefs: SelectedCols, // Update the state with the modified array\r\n//       });\r\n//     }\r\n//   };\r\n//   render() {\r\n//     const {\r\n//       rowData,\r\n//       columnDefs,\r\n//       defaultColDef,\r\n//       SelectedcolumnDefs,\r\n//       isOpen,\r\n//       SelectedCols,\r\n//       AllcolumnDefs,\r\n//     } = this.state;\r\n//     return (\r\n//       <>\r\n//         {/* <ExcelReader /> */}\r\n//         <Row className=\"app-user-list\">\r\n//           {this.state.EditOneUserView && this.state.EditOneUserView ? (\r\n//             <Row className=\"card\">\r\n//               <Col>\r\n//                 <div className=\"d-flex justify-content-end p-1\">\r\n//                   <Button\r\n//                     onClick={(e) => {\r\n//                       e.preventDefault();\r\n//                       this.setState({ EditOneUserView: false });\r\n//                       this.componentDidMount();\r\n//                     }}\r\n//                     color=\"danger\">\r\n//                     Back\r\n//                   </Button>\r\n//                 </div>\r\n//               </Col>\r\n\r\n//               <EditAccount EditOneData={this.state.EditOneData} />\r\n//             </Row>\r\n//           ) : (\r\n//             <>\r\n//               {this.state.ViewOneUserView && this.state.ViewOneUserView ? (\r\n//                 <>\r\n//                   <Row className=\"card\">\r\n//                     <Col>\r\n//                       <h1 className=\"float-left\">Stock Trx</h1>\r\n//                     </Col>\r\n//                     <Col>\r\n//                       <div className=\"d-flex justify-content-end p-1\">\r\n//                         <Button\r\n//                           onClick={(e) => {\r\n//                             e.preventDefault();\r\n//                             this.setState({ ViewOneUserView: false });\r\n//                           }}\r\n//                           color=\"danger\">\r\n//                           Back\r\n//                         </Button>\r\n//                       </div>\r\n//                     </Col>\r\n//                     <ViewAccount ViewOneData={this.state.ViewOneData} />\r\n//                   </Row>\r\n//                 </>\r\n//               ) : (\r\n//                 <>\r\n//                   <Col sm=\"12\">\r\n//                     <Card>\r\n//                       <Row className=\"m-2\">\r\n//                         <Col>\r\n//                           <h1 className=\"float-left\">My Stock List</h1>\r\n//                         </Col>\r\n//                         <Col>\r\n//                           <span className=\"mx-1\">\r\n//                             <FaFilter\r\n//                               style={{ cursor: \"pointer\" }}\r\n//                               title=\"filter coloumn\"\r\n//                               size=\"25px\"\r\n//                               onClick={this.LookupviewStart}\r\n//                               color=\"#39cccc\"\r\n//                               className=\"float-right\"\r\n//                             />\r\n//                           </span>\r\n//                           <span className=\"mx-1\">\r\n//                             <div className=\"dropdown-container float-right\">\r\n//                               <BsCloudDownloadFill\r\n//                                 style={{ cursor: \"pointer\" }}\r\n//                                 title=\"download file\"\r\n//                                 size=\"25px\"\r\n//                                 className=\"dropdown-button \"\r\n//                                 color=\"#39cccc\"\r\n//                                 onClick={this.toggleDropdown}\r\n//                               />\r\n//                               {isOpen && (\r\n//                                 <div\r\n//                                   style={{\r\n//                                     position: \"absolute\",\r\n//                                     zIndex: \"1\",\r\n//                                   }}\r\n//                                   className=\"dropdown-content dropdownmy\">\r\n//                                   <h5\r\n//                                     onClick={() => this.exportToPDF()}\r\n//                                     style={{ cursor: \"pointer\" }}\r\n//                                     className=\" mx-1 myactive mt-1\">\r\n//                                     .PDF\r\n//                                   </h5>\r\n//                                   <h5\r\n//                                     onClick={() =>\r\n//                                       this.gridApi.exportDataAsCsv()\r\n//                                     }\r\n//                                     style={{ cursor: \"pointer\" }}\r\n//                                     className=\" mx-1 myactive\">\r\n//                                     .CSV\r\n//                                   </h5>\r\n//                                   <h5\r\n//                                     onClick={this.convertCSVtoExcel}\r\n//                                     style={{ cursor: \"pointer\" }}\r\n//                                     className=\" mx-1 myactive\">\r\n//                                     .XLS\r\n//                                   </h5>\r\n//                                   <h5\r\n//                                     onClick={this.exportToExcel}\r\n//                                     style={{ cursor: \"pointer\" }}\r\n//                                     className=\" mx-1 myactive\">\r\n//                                     .XLSX\r\n//                                   </h5>\r\n//                                   <h5\r\n//                                     onClick={() => this.convertCsvToXml()}\r\n//                                     style={{ cursor: \"pointer\" }}\r\n//                                     className=\" mx-1 myactive\">\r\n//                                     .XML\r\n//                                   </h5>\r\n//                                 </div>\r\n//                               )}\r\n//                             </div>\r\n//                           </span>\r\n//                           <span>\r\n//                             <Route\r\n//                               render={({ history }) => (\r\n//                                 <Badge\r\n//                                   style={{ cursor: \"pointer\" }}\r\n//                                   className=\"float-right mr-1\"\r\n//                                   color=\"primary\"\r\n//                                   onClick={() => history.goBack()}>\r\n//                                   <FaPlus size={15} /> Back\r\n//                                 </Badge>\r\n//                               )}\r\n//                             />\r\n//                           </span>\r\n//                         </Col>\r\n//                       </Row>\r\n//                       <CardBody>\r\n//                         {this.state.rowData === null ? null : (\r\n//                           <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\r\n//                             <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\r\n//                               <div className=\"mb-1\">\r\n//                                 <UncontrolledDropdown className=\"p-1 ag-dropdown\">\r\n//                                   <DropdownToggle tag=\"div\">\r\n//                                     {this.gridApi\r\n//                                       ? this.state.currenPageSize\r\n//                                       : \"\" * this.state.getPageSize -\r\n//                                         (this.state.getPageSize - 1)}{\" \"}\r\n//                                     -{\" \"}\r\n//                                     {this.state.rowData.length -\r\n//                                       this.state.currenPageSize *\r\n//                                         this.state.getPageSize >\r\n//                                     0\r\n//                                       ? this.state.currenPageSize *\r\n//                                         this.state.getPageSize\r\n//                                       : this.state.rowData.length}{\" \"}\r\n//                                     of {this.state.rowData.length}\r\n//                                     <ChevronDown className=\"ml-50\" size={15} />\r\n//                                   </DropdownToggle>\r\n//                                   <DropdownMenu right>\r\n//                                     <DropdownItem\r\n//                                       tag=\"div\"\r\n//                                       onClick={() => this.filterSize(5)}>\r\n//                                       5\r\n//                                     </DropdownItem>\r\n//                                     <DropdownItem\r\n//                                       tag=\"div\"\r\n//                                       onClick={() => this.filterSize(20)}>\r\n//                                       20\r\n//                                     </DropdownItem>\r\n//                                     <DropdownItem\r\n//                                       tag=\"div\"\r\n//                                       onClick={() => this.filterSize(50)}>\r\n//                                       50\r\n//                                     </DropdownItem>\r\n//                                     <DropdownItem\r\n//                                       tag=\"div\"\r\n//                                       onClick={() => this.filterSize(100)}>\r\n//                                       100\r\n//                                     </DropdownItem>\r\n//                                     <DropdownItem\r\n//                                       tag=\"div\"\r\n//                                       onClick={() => this.filterSize(134)}>\r\n//                                       134\r\n//                                     </DropdownItem>\r\n//                                   </DropdownMenu>\r\n//                                 </UncontrolledDropdown>\r\n//                               </div>\r\n//                               <div className=\"d-flex flex-wrap justify-content-end mb-1\">\r\n//                                 <div className=\"table-input mr-1\">\r\n//                                   <Input\r\n//                                     placeholder=\"search Item here...\"\r\n//                                     onChange={(e) =>\r\n//                                       this.updateSearchQuery(e.target.value)\r\n//                                     }\r\n//                                     value={this.state.value}\r\n//                                   />\r\n//                                 </div>\r\n//                               </div>\r\n//                             </div>\r\n//                             <ContextLayout.Consumer className=\"ag-theme-alpine\">\r\n//                               {(context) => (\r\n//                                 <AgGridReact\r\n//                                   id=\"myAgGrid\"\r\n//                                   // gridOptions={{\r\n//                                   //   domLayout: \"autoHeight\",\r\n//                                   //   // or other layout options\r\n//                                   // }}\r\n//                                   gridOptions={this.gridOptions}\r\n//                                   rowSelection=\"multiple\"\r\n//                                   defaultColDef={defaultColDef}\r\n//                                   columnDefs={columnDefs}\r\n//                                   rowData={rowData}\r\n//                                   // onGridReady={(params) => {\r\n//                                   //   this.gridApi = params.api;\r\n//                                   //   this.gridColumnApi = params.columnApi;\r\n//                                   //   this.gridRef.current = params.api;\r\n\r\n//                                   //   this.setState({\r\n//                                   //     currenPageSize:\r\n//                                   //       this.gridApi.paginationGetCurrentPage() +\r\n//                                   //       1,\r\n//                                   //     getPageSize:\r\n//                                   //       this.gridApi.paginationGetPageSize(),\r\n//                                   //     totalPages:\r\n//                                   //       this.gridApi.paginationGetTotalPages(),\r\n//                                   //   });\r\n//                                   // }}\r\n//                                   onGridReady={this.onGridReady}\r\n//                                   colResizeDefault={\"shift\"}\r\n//                                   animateRows={true}\r\n//                                   floatingFilter={false}\r\n//                                   pagination={true}\r\n//                                   paginationPageSize={\r\n//                                     this.state.paginationPageSize\r\n//                                   }\r\n//                                   pivotPanelShow=\"always\"\r\n//                                   enableRtl={context.state.direction === \"rtl\"}\r\n//                                   ref={this.gridRef} // Attach the ref to the grid\r\n//                                   domLayout=\"autoHeight\" // Adjust layout as needed\r\n//                                 />\r\n//                               )}\r\n//                             </ContextLayout.Consumer>\r\n//                           </div>\r\n//                         )}\r\n//                       </CardBody>\r\n//                     </Card>\r\n//                   </Col>\r\n//                 </>\r\n//               )}\r\n//             </>\r\n//           )}\r\n//         </Row>\r\n\r\n//         <Modal\r\n//           isOpen={this.state.modal}\r\n//           toggle={this.LookupviewStart}\r\n//           className={this.props.className}\r\n//           style={{ maxWidth: \"1050px\" }}>\r\n//           <ModalHeader toggle={this.LookupviewStart}>Change Fileds</ModalHeader>\r\n//           <ModalBody className=\"modalbodyhead\">\r\n//             <Row>\r\n//               <Col lg=\"4\" md=\"4\" sm=\"12\" xl=\"4\" xs=\"12\">\r\n//                 <h4>Avilable Columns</h4>\r\n//                 <div className=\"mainshffling\">\r\n//                   <div class=\"ex1\">\r\n//                     {AllcolumnDefs &&\r\n//                       AllcolumnDefs?.map((ele, i) => {\r\n//                         return (\r\n//                           <>\r\n//                             <div\r\n//                               onClick={(e) =>\r\n//                                 this.handleChangeHeader(e, ele, i)\r\n//                               }\r\n//                               key={i}\r\n//                               className=\"mycustomtag mt-1\">\r\n//                               <span className=\"mt-1\">\r\n//                                 <h5\r\n//                                   style={{ cursor: \"pointer\" }}\r\n//                                   className=\"allfields\">\r\n//                                   <input\r\n//                                     type=\"checkbox\"\r\n//                                     // checked={check && check}\r\n//                                     className=\"mx-1\"\r\n//                                   />\r\n\r\n//                                   {ele?.headerName}\r\n//                                 </h5>\r\n//                               </span>\r\n//                             </div>\r\n//                           </>\r\n//                         );\r\n//                       })}\r\n//                   </div>\r\n//                 </div>\r\n//               </Col>\r\n//               <Col lg=\"2\" md=\"2\" sm=\"12\" xl=\"2\" xs=\"12\" className=\"colarrowbtn\">\r\n//                 <div className=\"mainarrowbtn\">\r\n//                   <div style={{ cursor: \"pointer\" }}>\r\n//                     <FaArrowAltCircleRight\r\n//                       onClick={this.HeadingRightShift}\r\n//                       className=\"arrowassign\"\r\n//                       size=\"30px\"\r\n//                     />\r\n//                   </div>\r\n//                   <div style={{ cursor: \"pointer\" }} className=\"my-2\">\r\n//                     <FaArrowAltCircleLeft\r\n//                       onClick={this.handleLeftShift}\r\n//                       className=\"arrowassign\"\r\n//                       size=\"30px\"\r\n//                     />\r\n//                   </div>\r\n//                 </div>\r\n//               </Col>\r\n//               <Col lg=\"6\" md=\"6\" sm=\"12\" xl=\"6\" xs=\"12\">\r\n//                 <Row>\r\n//                   <Col lg=\"8\" md=\"8\" sm=\"12\" xs=\"12\">\r\n//                     <h4>Visible Columns</h4>\r\n//                     <div className=\"mainshffling\">\r\n//                       <div class=\"ex1\">\r\n//                         {SelectedcolumnDefs &&\r\n//                           SelectedcolumnDefs?.map((ele, i) => {\r\n//                             return (\r\n//                               <>\r\n//                                 <div key={i} className=\"mycustomtag mt-1\">\r\n//                                   <span className=\"mt-1\">\r\n//                                     <h5\r\n//                                       onClick={() =>\r\n//                                         this.setState({ Arrindex: i })\r\n//                                       }\r\n//                                       style={{\r\n//                                         cursor: \"pointer\",\r\n//                                         backgroundColor: `${\r\n//                                           this.state.Arrindex === i\r\n//                                             ? \"#1877f2\"\r\n//                                             : \"\"\r\n//                                         }`,\r\n//                                       }}\r\n//                                       className=\"allfields\">\r\n//                                       <IoMdRemoveCircleOutline\r\n//                                         onClick={() => {\r\n//                                           const SelectedCols =\r\n//                                             this.state.SelectedcolumnDefs.slice();\r\n//                                           const delindex =\r\n//                                             SelectedCols.findIndex(\r\n//                                               (element) =>\r\n//                                                 element?.headerName ==\r\n//                                                 ele?.headerName\r\n//                                             );\r\n\r\n//                                           if (SelectedCols && delindex >= 0) {\r\n//                                             const splicedElement =\r\n//                                               SelectedCols.splice(delindex, 1); // Remove the element\r\n//                                             // splicedElement contains the removed element, if needed\r\n\r\n//                                             this.setState({\r\n//                                               SelectedcolumnDefs: SelectedCols, // Update the state with the modified array\r\n//                                             });\r\n//                                           }\r\n//                                           // const delindex =\r\n//                                           //   SelectedCols.findIndex(\r\n//                                           //     (element) =>\r\n//                                           //       element?.headerName ==\r\n//                                           //       ele?.headerName\r\n//                                           //   );\r\n\r\n//                                           // SelectedCols?.splice(delindex, 1);\r\n//                                           // this.setState({\r\n//                                           //   SelectedcolumnDefs: SelectedCols,\r\n//                                           // });\r\n//                                         }}\r\n//                                         style={{ cursor: \"pointer\" }}\r\n//                                         size=\"25px\"\r\n//                                         color=\"red\"\r\n//                                         className=\"mr-1\"\r\n//                                       />\r\n\r\n//                                       {ele?.headerName}\r\n//                                     </h5>\r\n//                                   </span>\r\n//                                 </div>\r\n//                               </>\r\n//                             );\r\n//                           })}\r\n//                       </div>\r\n//                     </div>\r\n//                   </Col>\r\n//                   <Col lg=\"4\" md=\"4\" sm=\"12\" xs=\"12\">\r\n//                     <div className=\"updownbtn justify-content-center\">\r\n//                       <div>\r\n//                         <BsFillArrowUpSquareFill\r\n//                           className=\"arrowassign mb-1\"\r\n//                           size=\"30px\"\r\n//                           onClick={this.shiftElementUp}\r\n//                         />\r\n//                       </div>\r\n//                       <div>\r\n//                         <BsFillArrowDownSquareFill\r\n//                           onClick={this.shiftElementDown}\r\n//                           className=\"arrowassign\"\r\n//                           size=\"30px\"\r\n//                         />\r\n//                       </div>\r\n//                     </div>\r\n//                   </Col>\r\n//                 </Row>\r\n//               </Col>\r\n//             </Row>\r\n//             <Row>\r\n//               <Col>\r\n//                 <div className=\"d-flex justify-content-center\">\r\n//                   <Button onClick={this.HandleSetVisibleField} color=\"primary\">\r\n//                     Submit\r\n//                   </Button>\r\n//                 </div>\r\n//               </Col>\r\n//             </Row>\r\n//           </ModalBody>\r\n//         </Modal>\r\n//       </>\r\n//     );\r\n//   }\r\n// }\r\n// export default AddDamage;\r\n\r\nimport React, { useEffect, useState, useContext } from \"react\";\r\nimport xmlJs from \"xml-js\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Form,\r\n  Row,\r\n  Input,\r\n  Label,\r\n  Button,\r\n  FormGroup,\r\n  CustomInput,\r\n  ModalBody,\r\n  ModalHeader,\r\n  Modal,\r\n  InputGroup,\r\n  Badge,\r\n} from \"reactstrap\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { BiEnvelope } from \"react-icons/bi\";\r\nimport { BsFillChatDotsFill, BsWhatsapp } from \"react-icons/bs\";\r\nimport { FaHistory } from \"react-icons/fa\";\r\nimport { FcPhoneAndroid } from \"react-icons/fc\";\r\nimport { AiOutlineSearch } from \"react-icons/ai\";\r\nimport Flatpickr from \"react-flatpickr\";\r\n\r\nimport Multiselect from \"multiselect-react-dropdown\";\r\n\r\nimport { FiSend } from \"react-icons/fi\";\r\n\r\nimport \"../../../../../assets/scss/pages/users.scss\";\r\nimport {\r\n  ProductListView,\r\n  CreatePartyList,\r\n  Create_Sales_personList,\r\n  Create_Targetsave,\r\n  CreateWarehouseList,\r\n  UnitListView,\r\n  StocktrxFtoW,\r\n  WarehousetoWareHouseTrx,\r\n  Warehouse_Temporarlylist,\r\n  Save_Damagedstock,\r\n} from \"../../../../../ApiEndPoint/ApiCalling\";\r\nimport \"../../../../../assets/scss/pages/users.scss\";\r\nimport Timepickers from \"../../../../forms/form-elements/datepicker/Timepicker\";\r\nimport Pickers from \"../../../../forms/form-elements/datepicker/Pickers\";\r\nimport { Route } from \"react-router-dom\";\r\n\r\nlet GrandTotal = [];\r\nlet SelectedITems = [];\r\nlet SelectedSize = [];\r\nconst CreateTarget = (args) => {\r\n  const [formData, setFormData] = useState({});\r\n  const [Index, setIndex] = useState(\"\");\r\n  const [StockTrxdate, setStockTrxDate] = useState(\"\");\r\n  const [targetEndDate, settargetEndDate] = useState(\"\");\r\n  const [index, setindex] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [ProductList, setProductList] = useState([]);\r\n  const [ProductWTWList, setProductWTWList] = useState([]);\r\n  const [PartyList, setPartyList] = useState([]);\r\n  const [Salesperson, setSalesperson] = useState(\"\");\r\n  const [WareHouseone, setWareHouseone] = useState([]);\r\n  const [WareHousetwo, setWareHousetwo] = useState([]);\r\n  const [TypeOfTrx, setTypeOfTrx] = useState(\"\");\r\n  const [grandTotalAmt, setGrandTotalAmt] = useState(0);\r\n  const [UnitList, setUnitList] = useState([]);\r\n  const [UserInfo, setUserInfo] = useState({});\r\n  const [modal, setModal] = useState(false);\r\n  const [items, setItems] = useState(\"\");\r\n  const [audit, setAudit] = useState(false);\r\n  const [WareHouselist, setWarehouseList] = useState([]);\r\n  const toggle = (item) => {\r\n    setItems(item);\r\n    setModal(!modal);\r\n  };\r\n  const audittoggle = () => {\r\n    setAudit(!audit);\r\n    // setModal(!modal);\r\n  };\r\n  const handleopentoggle = (iteam) => {\r\n    toggle(iteam);\r\n  };\r\n  const handleHistory = () => {\r\n    audittoggle();\r\n  };\r\n  const [product, setProduct] = useState([\r\n    {\r\n      product: \"\",\r\n      productId: \"\",\r\n      AvailaleQty: null,\r\n      availableQty: \"\",\r\n      transferQty: 1,\r\n      price: \"\",\r\n      totalprice: \"\",\r\n      Size: \"\",\r\n      unitType: \"\",\r\n      stockTrxDate: \"\",\r\n      targetEndDate: \"\",\r\n      discount: \"\",\r\n      Shipping: \"\",\r\n      tax: \"\",\r\n      grandTotal: \"\",\r\n    },\r\n  ]);\r\n\r\n  const handleProductChangeProduct = (e, index, avalaibleSize) => {\r\n    if (avalaibleSize >= Number(e.target.value)) {\r\n      setIndex(index);\r\n      console.log(product);\r\n\r\n      const { name, value } = e.target;\r\n      const list = [...product];\r\n      if (name.includes(\"transferQty\")) {\r\n        // list[index][\"Size\"] = Number(value);\r\n        let available = Number(list[index][\"AvailaleQty\"]);\r\n        let Askingfor = Number(value);\r\n        if (available >= Askingfor) {\r\n          list[index][name] = Askingfor;\r\n        } else {\r\n          swal(\"Can not Transfer More then Stock\");\r\n          list[index][name] = available - 1;\r\n        }\r\n      } else {\r\n        list[index][name] = value;\r\n      }\r\n      console.log(GrandTotal);\r\n\r\n      let amt = 0;\r\n      if (list.length > 0) {\r\n        const x = list?.map((val) => {\r\n          GrandTotal[index] = val.Size * val.price * val.transferQty;\r\n          list[index][\"totalprice\"] = val.Size * val.price * val.transferQty;\r\n          return val.Size * val.price * val.transferQty;\r\n        });\r\n        amt = x.reduce((a, b) => a + b);\r\n        console.log(\"GrandTotal\", amt);\r\n      }\r\n      // console.log(list)\r\n      setProduct(list);\r\n      setGrandTotalAmt(amt);\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n  const handleProductChangeProductone = (e, index) => {\r\n    setIndex(index);\r\n    console.log(product);\r\n    debugger;\r\n    const { name, value } = e.target;\r\n    const list = [...product];\r\n    if (name.includes(\"transferQty\")) {\r\n      list[index][name] = Number(value);\r\n    } else {\r\n      list[index][name] = value;\r\n    }\r\n    console.log(GrandTotal);\r\n\r\n    let amt = 0;\r\n    if (list.length > 0) {\r\n      const x = list?.map((val) => {\r\n        GrandTotal[index] = val.Size * val.price * val.transferQty;\r\n        list[index][\"totalprice\"] = val.Size * val.price * val.transferQty;\r\n        return val.Size * val.price * val.transferQty;\r\n      });\r\n      amt = x.reduce((a, b) => a + b);\r\n      console.log(\"GrandTotal\", amt);\r\n    }\r\n    // console.log(list)\r\n    setProduct(list);\r\n    setGrandTotalAmt(amt);\r\n  };\r\n\r\n  const handleRemoveSelected = (selectedList, selectedItem, index) => {\r\n    // console.log(selectedList);\r\n    // console.log(selectedItem); // removed item\r\n    // console.log(product);\r\n    // console.log(index);\r\n    // console.log(SelectedITems);\r\n    SelectedITems.splice(index, 1);\r\n    let myarr = product?.map((ele, i) => {\r\n      console.log(ele?.qty * selectedItem[i]?.Product_MRP);\r\n      let indextotal = ele?.qty * SelectedITems[i]?.Product_MRP;\r\n      GrandTotal[index] = indextotal;\r\n      return indextotal;\r\n    });\r\n\r\n    let amt = myarr.reduce((a, b) => a + b);\r\n    setGrandTotalAmt(amt);\r\n  };\r\n  const handleRemoveSelectedone = (selectedList, selectedItem, index) => {\r\n    SelectedSize.splice(index, 1);\r\n    let myarr = product?.map((ele, i) => {\r\n      console.log(ele?.Size * ele?.price * SelectedSize[i]?.unitQty);\r\n      let indextotal = ele?.Size * SelectedSize[i]?.unitQty;\r\n      GrandTotal[index] = indextotal;\r\n      return indextotal;\r\n    });\r\n\r\n    let amt = myarr.reduce((a, b) => a + b);\r\n    setGrandTotalAmt(amt);\r\n  };\r\n  const handleSelection = (selectedList, selectedItem, index) => {\r\n    // product[index][\"AvailaleQty\"] = myproduct?.Size;\r\n    SelectedITems.push(selectedItem);\r\n    setProduct((prevProductList) => {\r\n      const updatedProductList = [...prevProductList]; // Create a copy of the productList array\r\n      const updatedProduct = { ...updatedProductList[index] }; // Create a copy of the product at the specified index\r\n      updatedProduct.price = selectedItem?.Product_MRP; // Update the price of the copied product\r\n      updatedProduct.productId = selectedItem?.productId?._id;\r\n      updatedProduct.AvailaleQty = selectedItem?.Size;\r\n      updatedProductList[index] = updatedProduct; // Replace the product at the specified index with the updated one\r\n\r\n      return updatedProductList; // Return the updated product list to set the state\r\n    });\r\n  };\r\n  const handleSelectionProduct = (selectedList, selectedItem, index) => {\r\n    // product[index][\"AvailaleQty\"] = myproduct?.Size;\r\n    debugger;\r\n    SelectedITems.push(selectedItem);\r\n    setProduct((prevProductList) => {\r\n      const updatedProductList = [...prevProductList]; // Create a copy of the productList array\r\n      const updatedProduct = { ...updatedProductList[index] }; // Create a copy of the product at the specified index\r\n      updatedProduct.price = selectedItem?.Product_MRP; // Update the price of the copied product\r\n      updatedProduct.productId = selectedItem?._id;\r\n      updatedProduct.AvailaleQty = selectedItem?.Size;\r\n      updatedProductList[index] = updatedProduct; // Replace the product at the specified index with the updated one\r\n\r\n      return updatedProductList; // Return the updated product list to set the state\r\n    });\r\n  };\r\n  const handleSelectionone = (selectedList, selectedItem, index) => {\r\n    SelectedSize.push(selectedItem);\r\n\r\n    setProduct((prevProductList) => {\r\n      const updatedProductList = [...prevProductList]; // Create a copy of the productList array\r\n      const updatedProduct = { ...updatedProductList[index] }; // Create a copy of the product at the specified index\r\n      updatedProduct.Size = selectedItem?.unitQty; // Update the price of the copied product\r\n      updatedProduct.unitType = selectedItem?.primaryUnit;\r\n      updatedProductList[index] = updatedProduct; // Replace the product at the specified index with the updated one\r\n      let myarr = prevProductList?.map((ele, i) => {\r\n        console.log(ele?.transferQty * ele?.price * SelectedSize[i]?.unitQty);\r\n        let indextotal =\r\n          ele?.transferQty * ele?.price * SelectedSize[i]?.unitQty;\r\n        GrandTotal[index] = indextotal;\r\n        return indextotal;\r\n      });\r\n      let amt = myarr.reduce((a, b) => a + b);\r\n      setGrandTotalAmt(amt);\r\n      return updatedProductList; // Return the updated product list to set the state\r\n    });\r\n    // onSelect1(selectedList, selectedItem, index);\r\n  };\r\n  const handleInputChange = (e, type, i) => {\r\n    const { name, value, checked } = e.target;\r\n    setindex(i);\r\n    if (type == \"checkbox\") {\r\n      if (checked) {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      } else {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      }\r\n    } else {\r\n      if (type == \"number\") {\r\n        if (/^\\d{0,10}$/.test(value)) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          setError(\"\");\r\n        } else {\r\n          setError(\r\n            \"Please enter a valid number with a maximum length of 10 digits\"\r\n          );\r\n        }\r\n      } else {\r\n        if (value.length <= 10) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          setError(\"\");\r\n        } else {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n  // handleInputChange;\r\n  // useEffect(() => {\r\n  //   console.log(window);\r\n  //   console.log(product);\r\n  //   console.log(GrandTotal);\r\n  //   console.log(Salesperson);\r\n  //   console.log(StockTrxdate);\r\n  //   console.log(targetEndDate);\r\n  // }, [product, targetEndDate]);\r\n\r\n  useEffect(() => {\r\n    let userData = JSON.parse(localStorage.getItem(\"userData\"));\r\n    Warehouse_Temporarlylist(userData?._id)\r\n      .then((res) => {\r\n        console.log(res?.adminDetails);\r\n\r\n        setWarehouseList(res?.adminDetails);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n\r\n    UnitListView(userData?._id, userData?.database)\r\n      .then((res) => {\r\n        console.log(res);\r\n        setUnitList(res?.Unit);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n    // ProductListView(userData?._id)\r\n    //   .then((res) => {\r\n    //     console.log(res.Product);\r\n    //     setProductList(res?.Product);\r\n    //   })\r\n    //   .catch((err) => {\r\n    //     console.log(err);\r\n    //   });\r\n  }, []);\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userData\"));\r\n    console.log(userInfo);\r\n    setUserInfo(userInfo);\r\n    // CreateOrder_ID()\r\n    //   .then((res) => {\r\n    //     const lastElement = res?.Order[res?.Order?.length - 1].id;\r\n    //     const prefix = lastElement?.substring(0, 5);\r\n    //     const number = parseInt(lastElement?.match(/\\d+$/)[0], 10) + 1;\r\n    //     const concatenatedString = prefix + number;\r\n    //     setOrderID(concatenatedString);\r\n    //   })\r\n    //   .catch((err) => {\r\n    //     console.log(err);\r\n    //   });\r\n    // CreateOrder_ViewData()\r\n    //   .then((res) => {\r\n    //     const jsonData = xmlJs.xml2json(res.data, { compact: true, spaces: 2 });\r\n    //     setCreatAccountView(JSON.parse(jsonData));\r\n    //     setStatusDropDown(\r\n    //       JSON.parse(jsonData)?.createOrder.CurrentStatus?.MyDropDown?.dropdown\r\n    //     );\r\n    //     setdropdownValue(JSON.parse(jsonData));\r\n    //     setPartDetails(JSON.parse(jsonData)?.createOrder.PartDetails);\r\n    //   })\r\n    //   .catch((err) => {\r\n    //     console.log(err);\r\n    //   });\r\n  }, []);\r\n\r\n  let addMoreProduct = () => {\r\n    setProduct([\r\n      ...product,\r\n      {\r\n        product: \"\", //\r\n        productId: \"\",\r\n        AvailaleQty: null,\r\n        availableQty: \"\",\r\n        transferQty: 1, //\r\n        price: \"\", //\r\n        totalprice: \"\", //\r\n        Size: \"\",\r\n        unitType: \"\",\r\n        stockTrxDate: \"\",\r\n        targetEndDate: \"\",\r\n        discount: \"\",\r\n        Shipping: \"\",\r\n        tax: \"\",\r\n        grandTotal: \"\",\r\n      },\r\n    ]);\r\n  };\r\n  let removeMoreProduct = (i) => {\r\n    let newFormValues = [...product];\r\n    newFormValues.splice(i, 1);\r\n    GrandTotal.splice(i, 1);\r\n    let amt = GrandTotal.reduce((a, b) => a + b);\r\n    setGrandTotalAmt(amt);\r\n\r\n    setProduct(newFormValues);\r\n  };\r\n  // let handlePartChange = (i, e) => {\r\n  //   let newFormValues = [...part];\r\n  //   newFormValues[i][e.target.name] = e.target.value;\r\n  //   setPart(newFormValues);\r\n  // };\r\n\r\n  const DamagedStockSubmitHandler = async (e) => {\r\n    e.preventDefault();\r\n    // body: warehouse, productId, Size, unitType, transferQty, price, totalPrice;\r\n\r\n    let userdata = JSON.parse(localStorage.getItem(\"userData\"));\r\n    let payload = {\r\n      typeStatus: \"Damadged\",\r\n      warehouse: WareHouseone[0]?._id,\r\n      productId: product[0]?.productId,\r\n      Size: product[0]?.Size,\r\n      unitType: product[0]?.unitType,\r\n      transferQty: product[0]?.transferQty,\r\n      price: product[0]?.price,\r\n      totalPrice:\r\n        product[0]?.transferQty * product[0]?.Size * product[0]?.price,\r\n      currentStock: product[0]?.transferQty * product[0]?.Size,\r\n    };\r\n\r\n    await Save_Damagedstock(payload)\r\n      .then((res) => {\r\n        //   window.location.reload();\r\n        // history.goBack();\r\n        swal(\"Damadged Stock Created\");\r\n\r\n        console.log(res);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        swal(\"Something Went Wrong\");\r\n      });\r\n  };\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    let userdata = JSON.parse(localStorage.getItem(\"userData\"));\r\n    // console.log(product);\r\n    // console.log(GrandTotal);\r\n    // console.log(Salesperson[0]?._id);\r\n    // console.log(targetStartDate);\r\n    // console.log(targetEndDate);\r\n    // console.log(grandTotalAmt);\r\n\r\n    let Allproduct = product?.map((ele, i) => {\r\n      console.log(ele);\r\n      return {\r\n        productId: ele?.productId,\r\n        unitType: ele?.unitType,\r\n        price: ele?.price,\r\n        Size: ele?.Size,\r\n        transferQty: ele?.transferQty,\r\n        totalPrice: ele?.totalprice,\r\n        currentStock: ele?.transferQty * ele?.Size,\r\n      };\r\n    });\r\n    let payload = {\r\n      productItems: Allproduct,\r\n      warehouseToId: WareHouseone[0]?._id,\r\n      stockTransferDate: StockTrxdate,\r\n      grandTotal: grandTotalAmt,\r\n      transferStatus: \"InProcess\",\r\n      created_by: userdata?._id,\r\n    };\r\n\r\n    if (error) {\r\n      swal(\"Error occured while Entering Details\");\r\n    } else {\r\n      StocktrxFtoW(payload)\r\n        .then((res) => {\r\n          // if (res.status) {\r\n          //   setFormData({});\r\n          //   window.location.reload();\r\n          swal(\"Stock Assigned to WareHouse\");\r\n          // }\r\n          console.log(res);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n  const onSelect1 = (selectedList, selectedItem, index) => {\r\n    console.log(selectedList);\r\n    setWareHouseone(selectedList);\r\n    // setProductList(selectedList[0].productItems);\r\n  };\r\n  const onSelectone = (selectedList, selectedItem, index) => {\r\n    console.log(selectedList);\r\n\r\n    setWareHouseone(selectedList);\r\n    // const list = [...product];\r\n    let MySelectedwarehouseProduct = selectedList[0].productItems?.map(\r\n      (ele, i) => {\r\n        let myproduct = ele?.productId;\r\n        ele[\"Product_Title\"] = myproduct?.Product_Title;\r\n        ele[\"Product_id\"] = myproduct?._id;\r\n        ele[\"Product_MRP\"] = myproduct?.Product_MRP;\r\n        ele[\"discount\"] = myproduct?.discount;\r\n        ele[\"transferQty\"] = myproduct?.transferQty;\r\n        ele[\"MIN_stockalert\"] = myproduct?.MIN_stockalert;\r\n      }\r\n    );\r\n\r\n    console.log(selectedList[0]?.productItems);\r\n\r\n    setProductWTWList(selectedList[0]?.productItems);\r\n  };\r\n  const onRemove1 = (selectedList, removedItem, index) => {\r\n    console.log(selectedList);\r\n    console.log(index);\r\n  };\r\n  const onRemoveone = (selectedList, removedItem, index) => {\r\n    console.log(selectedList);\r\n    console.log(index);\r\n  };\r\n  const onSelect2 = (selectedList, selectedItem, index) => {\r\n    console.log(selectedList);\r\n    setWareHousetwo(selectedList);\r\n  };\r\n  const onRemove2 = (selectedList, removedItem, index) => {\r\n    console.log(selectedList);\r\n    console.log(index);\r\n  };\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <Row className=\"m-2\">\r\n          <Col lg=\"8\" md=\"8\" sm=\"8\" className=\"mb-2 mt-1\">\r\n            <div>\r\n              <h1 className=\"\">Add Stock to Damage</h1>\r\n            </div>\r\n          </Col>\r\n          <Col>\r\n            <div className=\"float-right\">\r\n              <Route\r\n                render={({ history }) => (\r\n                  <Button\r\n                    style={{ cursor: \"pointer\" }}\r\n                    className=\"float-right mr-1\"\r\n                    color=\"primary\"\r\n                    onClick={() => history.goBack()}>\r\n                    {\" \"}\r\n                    Back\r\n                    {/* <FaPlus size={15} /> Create User */}\r\n                  </Button>\r\n                )}\r\n              />\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n        <CardBody>\r\n          <Form className=\"mx-1\" onSubmit={DamagedStockSubmitHandler}>\r\n            <Row>\r\n              <Col className=\"mb-1\" lg=\"3\" md=\"3\" sm=\"12\">\r\n                <div className=\"\">\r\n                  <Label>Choose Warehouse(from where) *</Label>\r\n                  <Multiselect\r\n                    required\r\n                    selectionLimit={1}\r\n                    // showCheckbox=\"true\"\r\n                    isObject=\"false\"\r\n                    options={WareHouselist} // Options to display in the dropdown\r\n                    // selectedValues={selectedValue}   // Preselected value to persist in dropdown\r\n                    onSelect={onSelectone} // Function will trigger on select event\r\n                    onRemove={onRemoveone} // Function will trigger on remove event\r\n                    displayValue=\"firstName\" // Property name to display in the dropdown options\r\n                  />\r\n                </div>\r\n              </Col>\r\n              {/* <Col className=\"mb-1\" lg=\"3\" md=\"3\" sm=\"12\">\r\n                <div className=\"\">\r\n                  <Label>Choose Warehouse (to be Transfer) * </Label>\r\n\r\n                  <Multiselect\r\n                    required\r\n                    selectionLimit={1}\r\n                    // showCheckbox=\"true\"\r\n                    isObject=\"false\"\r\n                    options={WareHouselist} // Options to display in the dropdown\r\n                    // selectedValues={selectedValue}   // Preselected value to persist in dropdown\r\n                    onSelect={onSelect2} // Function will trigger on select event\r\n                    onRemove={onRemove2} // Function will trigger on remove event\r\n                    displayValue=\"firstName\" // Property name to display in the dropdown options\r\n                  />\r\n                </div>\r\n              </Col> */}\r\n              {/* <Col className=\"mb-1\" lg=\"2\" md=\"2\" sm=\"12\">\r\n                <div className=\"\">\r\n                  <Label>Stock Transfer date</Label>\r\n                  <Input\r\n                    required\r\n                    type=\"date\"\r\n                    name=\"targetEndDate\"\r\n                    placeholder=\"Date of Delivery\"\r\n                    value={StockTrxdate}\r\n                    onChange={(e) => setStockTrxDate(e.target.value)}\r\n                  />\r\n                </div>\r\n              </Col> */}\r\n            </Row>\r\n            {product &&\r\n              product?.map((product, index) => (\r\n                <Row className=\"\" key={index}>\r\n                  <Col className=\"mb-1\" lg=\"2\" md=\"2\" sm=\"12\">\r\n                    <div className=\"\">\r\n                      <Label>Product Name</Label>\r\n                      <Multiselect\r\n                        required\r\n                        selectionLimit={1}\r\n                        // showCheckbox=\"true\"\r\n                        isObject=\"true\"\r\n                        options={ProductWTWList}\r\n                        // selectedValues={selectedValue}   // Preselected value to persist in dropdown\r\n                        onSelect={(selectedList, selectedItem) =>\r\n                          handleSelection(selectedList, selectedItem, index)\r\n                        }\r\n                        onRemove={(selectedList, selectedItem) => {\r\n                          handleRemoveSelected(\r\n                            selectedList,\r\n                            selectedItem,\r\n                            index\r\n                          );\r\n                        }}\r\n                        displayValue=\"Product_Title\" // Property name to display in the dropdown options\r\n                      />\r\n                      {/* <CustomInput\r\n                          name=\"productId\"\r\n                          onChange={(e) => handleProductChangeProduct(e, index)}\r\n                          type=\"select\">\r\n                          <option>--Select--</option>\r\n                          {ProductWTWList &&\r\n                            ProductWTWList?.map((ele, i) => {\r\n                              return (\r\n                                <option value={ele?.productId?._id}>\r\n                                  {ele?.productId.Product_Title}\r\n                                </option>\r\n                              );\r\n                            })}\r\n                        </CustomInput> */}\r\n                    </div>\r\n                  </Col>\r\n                  <Col className=\"mb-1\" lg=\"2\" md=\"2\" sm=\"12\">\r\n                    <div className=\"\">\r\n                      <Label>Size</Label>\r\n                      <Multiselect\r\n                        required\r\n                        selectionLimit={1}\r\n                        // showCheckbox=\"true\"\r\n                        isObject=\"false\"\r\n                        options={UnitList}\r\n                        // selectedValues={selectedValue}   // Preselected value to persist in dropdown\r\n                        onSelect={(selectedList, selectedItem) =>\r\n                          handleSelectionone(selectedList, selectedItem, index)\r\n                        }\r\n                        onRemove={(selectedList, selectedItem) => {\r\n                          handleRemoveSelectedone(\r\n                            selectedList,\r\n                            selectedItem,\r\n                            index\r\n                          );\r\n                        }}\r\n                        displayValue=\"primaryUnit\" // Property name to display in the dropdown options\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                  <Col className=\"mb-1\" lg=\"2\" md=\"2\" sm=\"12\">\r\n                    <div className=\"\">\r\n                      <Label>Damadged Quantity</Label>\r\n                      <Input\r\n                        type=\"number\"\r\n                        min={0}\r\n                        name=\"transferQty\"\r\n                        placeholder=\"Req_Qty\"\r\n                        value={product?.transferQty}\r\n                        onChange={(e) =>\r\n                          handleProductChangeProduct(\r\n                            e,\r\n                            index,\r\n                            product?.AvailaleQty\r\n                          )\r\n                        }\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                  <Col className=\"mb-1\" lg=\"2\" md=\"2\" sm=\"12\">\r\n                    <div className=\"\">\r\n                      <Label>Available Qty</Label>\r\n                      <Input\r\n                        disabled\r\n                        type=\"number\"\r\n                        min={0}\r\n                        name=\"AvailaleQty\"\r\n                        placeholder=\"Available Qty\"\r\n                        value={product?.AvailaleQty}\r\n                        // onChange={(e) => handleProductChangeProduct(e, index)}\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                  <Col className=\"mb-1\" lg=\"2\" md=\"2\" sm=\"12\">\r\n                    <div className=\"\">\r\n                      <Label>Price</Label>\r\n                      <Input\r\n                        type=\"number\"\r\n                        name=\"price\"\r\n                        readOnly\r\n                        placeholder=\"Price\"\r\n                        value={product.price}\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                  <Col className=\"mb-1\" lg=\"2\" md=\"2\" sm=\"12\">\r\n                    <div className=\"\">\r\n                      <Label>Total Price</Label>\r\n                      <Input\r\n                        type=\"number\"\r\n                        name=\"totalprice\"\r\n                        readOnly\r\n                        placeholder=\"TtlPrice\"\r\n                        value={\r\n                          product.Size * product.price * product.transferQty\r\n                        }\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n\r\n                  <Col className=\"d-flex mt-1 abb\" lg=\"3\" md=\"3\" sm=\"12\">\r\n                    <div className=\"btnStyle\">\r\n                      {index ? (\r\n                        <Badge\r\n                          type=\"button\"\r\n                          color=\"danger\"\r\n                          className=\"button remove \"\r\n                          onClick={() => removeMoreProduct(index)}>\r\n                          - Remove\r\n                        </Badge>\r\n                      ) : null}\r\n                    </div>\r\n\r\n                    {/* <div className=\"btnStyle\">\r\n                      <Badge\r\n                        className=\"ml-1 mb-1\"\r\n                        color=\"primary\"\r\n                        type=\"button\"\r\n                        onClick={() => addMoreProduct()}>\r\n                        + Add\r\n                      </Badge>\r\n                    </div> */}\r\n                  </Col>\r\n                </Row>\r\n              ))}\r\n\r\n            <Row>\r\n              <Col className=\"mb-1\" lg=\"12\" md=\"12\" sm=\"12\">\r\n                <div className=\" d-flex justify-content-end\">\r\n                  <Label className=\"pr-5\">\r\n                    Grand Total :{\" \"}\r\n                    <strong>\r\n                      {grandTotalAmt && grandTotalAmt == \"NaN\"\r\n                        ? 0\r\n                        : grandTotalAmt}{\" \"}\r\n                    </strong>\r\n                  </Label>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <div className=\"d-flex justify-content-center\">\r\n                  <Button.Ripple color=\"primary\" type=\"submit\" className=\"mt-2\">\r\n                    Submit\r\n                  </Button.Ripple>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </CardBody>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\nexport default CreateTarget;\r\n"],"sourceRoot":""}