{"version":3,"sources":["views/apps/freshlist/customer/HRM/RecPLace/setsalaryForm.js","../node_modules/reactstrap/es/FormGroup.js"],"names":["EmployeeSalaryForm","useState","payslipType","salary","fromAccount","formData","setFormData","modalOpen","setModalOpen","dropdownOpen","setDropdownOpen","accountDropdownOpen","setAccountDropdownOpen","toggleDropdown","toggleAccountDropdown","toggleModal","handleEmployeeSalarySubmit","e","preventDefault","console","log","alert","handleDropdownSelect","selectedOption","handleAccountDropdownSelect","style","marginLeft","cursor","color","fontSize","border","borderRadius","padding","backgroundColor","onClick","onSubmit","row","for","sm","isOpen","toggle","backdrop","caret","type","name","value","onChange","target","width","right","TaForm","title","amount","taFormData","setTaFormData","handleTaInputChange","id","placeholder","TravellingForm","setTitle","setAmount","Daform","Pfform","Advance","Esiform","Insurance","Payslip","handleSubmit","Over","tableData","setTableData","employeeName","overtime","numberOfDays","hours","rate","selectedItem","setSelectedItem","overflowX","striped","bordered","hover","map","data","index","key","handleEdit","updatedTableData","splice","handleDelete","PayslipForm","md","_excluded","propTypes","children","PropTypes","node","bool","check","inline","disabled","tag","tagPropType","className","string","cssModule","object","FormGroup","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps"],"mappings":"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","file":"static/js/386.1aed53eb.chunk.js","sourcesContent":["// import React, { useState } from 'react';\r\n// import { Card, CardBody, Row,Col, Form, FormGroup, Label, Input, Button, CardHeader } from 'reactstrap';\r\n\r\n// const EmployeeSalaryForm = () => {\r\n//   const [formData, setFormData] = useState({\r\n//     payslipType: '',\r\n//     salary: '',\r\n//     fromAccount: '',\r\n//   });\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     console.log('Form submitted:', formData);\r\n//     // Add logic to handle form submission (e.g., save data to backend)\r\n//   };\r\n\r\n//   const handleInputChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setFormData({ ...formData, [name]: value });\r\n//   };\r\n\r\n//   return (\r\n//     <Card>\r\n//       <CardBody>\r\n//         <h2>create employee Form</h2>\r\n//         <Form onSubmit={handleSubmit}>\r\n//           <FormGroup row>\r\n//             <Label for=\"payslipType\" sm={4}>\r\n//               Payslip Type:\r\n//             </Label>\r\n//             <Col sm={8}>\r\n//               <Input\r\n//                 type=\"text\"\r\n//                 name=\"payslipType\"\r\n//                 id=\"payslipType\"\r\n//                 value={formData.payslipType}\r\n//                 onChange={handleInputChange}\r\n//                 placeholder=\"Enter payslip type\"\r\n//               />\r\n//             </Col>\r\n//           </FormGroup>\r\n//           <FormGroup row>\r\n//             <Label for=\"salary\" sm={4}>\r\n//               Salary:\r\n//             </Label>\r\n//             <Col sm={8}>\r\n//               <Input\r\n//                 type=\"text\"\r\n//                 name=\"salary\"\r\n//                 id=\"salary\"\r\n//                 value={formData.salary}\r\n//                 onChange={handleInputChange}\r\n//                 placeholder=\"Enter salary\"\r\n//               />\r\n//             </Col>\r\n//           </FormGroup>\r\n//           <FormGroup row>\r\n//             <Label for=\"fromAccount\" sm={4}>\r\n//               From Account:\r\n//             </Label>\r\n//             <Col sm={8}>\r\n//               <Input\r\n//                 type=\"text\"\r\n//                 name=\"fromAccount\"\r\n//                 id=\"fromAccount\"\r\n//                 value={formData.fromAccount}\r\n//                 onChange={handleInputChange}\r\n//                 placeholder=\"Enter from account\"\r\n//               />\r\n//             </Col>\r\n//           </FormGroup>\r\n//           <FormGroup row>\r\n//             <Col sm={{ size: 8, offset: 4 }}>\r\n//               <Button color=\"primary\" type=\"submit\">\r\n//                 Save\r\n//               </Button>{' '}\r\n//               <Button color=\"secondary\" type=\"button\">\r\n//                 Cancel\r\n//               </Button>\r\n//             </Col>\r\n//           </FormGroup>\r\n//         </Form>\r\n//       </CardBody>\r\n//     </Card>\r\n//   );\r\n// };\r\n\r\n// const Advance = () => {\r\n//   const [title, setTitle] = useState('');\r\n//   const [amount, setAmount] = useState('');\r\n\r\n//   const handleSubmit = (e) => {\r\n//       e.preventDefault();\r\n//       // Handle form submission logic here\r\n//       console.log('Title:', title);\r\n//       console.log('Amount:', amount);\r\n//   };\r\n\r\n//   return (\r\n//      <Card>\r\n//       <CardHeader>\r\n\r\n//               <h1>Advance form</h1>\r\n//               <Form onSubmit={handleSubmit}>\r\n//                   <FormGroup>\r\n//                       <Col>\r\n//                           <Label for=\"titleDropdown\">Title</Label>\r\n//                           <Input\r\n//                               type=\"select\"\r\n//                               name=\"title\"\r\n//                               id=\"titleDropdown\"\r\n//                               value={title}\r\n//                               onChange={(e) => setTitle(e.target.value)}\r\n//                           >\r\n//                               <option value=\"\">Select</option>\r\n//                               <option value=\"Option 1\">Option 1</option>\r\n//                               <option value=\"Option 2\">Option 2</option>\r\n//                               {/* Add more options as needed */}\r\n//                           </Input>\r\n//                       </Col>\r\n//                   </FormGroup>\r\n\r\n//                   <FormGroup>\r\n//                       <Label for=\"amountInput\" >Amount</Label>\r\n//                       <Input\r\n//                           type=\"number\"\r\n//                           name=\"amount\"\r\n//                           placeholder='Enter Ammount'\r\n//                           id=\"amountInput\"\r\n//                           value={amount}\r\n//                           onChange={(e) => setAmount(e.target.value)}\r\n//                       />\r\n//                   </FormGroup>\r\n\r\n//                   <Button color=\"primary\" type=\"submit\">\r\n//                       Submit\r\n//                   </Button>\r\n//               </Form>\r\n//               </CardHeader>\r\n//               </Card>\r\n//   );\r\n// };\r\n\r\n// const Daform = () => {\r\n//   const [title, setTitle] = useState('');\r\n//   const [amount, setAmount] = useState('');\r\n\r\n//   const handleSubmit = (e) => {\r\n//       e.preventDefault();\r\n//       // Handle form submission logic here\r\n//       console.log('Title:', title);\r\n//       console.log('Amount:', amount);\r\n//   };\r\n\r\n//   return (\r\n//       <Card>\r\n//         <CardHeader>\r\n//               <h1>DA form</h1>\r\n//               <Form onSubmit={handleSubmit}>\r\n//                   <FormGroup>\r\n//                       <Label for=\"titleDropdown\">Title</Label>\r\n//                       <Input\r\n//                           type=\"select\"\r\n//                           name=\"title\"\r\n//                           id=\"titleDropdown\"\r\n//                           value={title}\r\n//                           onChange={(e) => setTitle(e.target.value)}\r\n//                       >\r\n//                           <option value=\"\">Select</option>\r\n//                           <option value=\"Option 1\">Option 1</option>\r\n//                           <option value=\"Option 2\">Option 2</option>\r\n//                           {/* Add more options as needed */}\r\n//                       </Input>\r\n//                   </FormGroup>\r\n\r\n//                   <FormGroup>\r\n//                       <Label for=\"amountInput\">Amount</Label>\r\n//                       <Input\r\n//                           type=\"number\"\r\n//                           name=\"amount\"\r\n//                           id=\"amountInput\"\r\n//                           value={amount}\r\n//                           placeholder='enter ammount'\r\n//                           onChange={(e) => setAmount(e.target.value)}\r\n//                       />\r\n//                   </FormGroup>\r\n\r\n//                   <Button color=\"primary\" type=\"submit\">\r\n//                       Submit\r\n//                   </Button>\r\n//               </Form>\r\n//               </CardHeader>\r\n//         </Card>  \r\n//   );\r\n// };\r\n\r\n// const Esiform = () => {\r\n//   const [title, setTitle] = useState('');\r\n//   const [amount, setAmount] = useState('');\r\n\r\n//   const handleSubmit = (e) => {\r\n//       e.preventDefault();\r\n//       // Handle form submission logic here\r\n//       console.log('Title:', title);\r\n//       console.log('Amount:', amount);\r\n//   };\r\n\r\n//   return (\r\n//       <Card>\r\n//           <CardHeader>\r\n//               <h1>ESI form</h1>\r\n//               <Form onSubmit={handleSubmit}>\r\n//                   <FormGroup>\r\n//                       <Label for=\"titleDropdown\">Title</Label>\r\n//                       <Input\r\n//                           type=\"select\"\r\n//                           name=\"title\"\r\n//                           id=\"titleDropdown\"\r\n//                           value={title}\r\n//                           onChange={(e) => setTitle(e.target.value)}\r\n//                       >\r\n//                           <option value=\"\">Select</option>\r\n//                           <option value=\"Option 1\">Option 1</option>\r\n//                           <option value=\"Option 2\">Option 2</option>\r\n//                           {/* Add more options as needed */}\r\n//                       </Input>\r\n//                   </FormGroup>\r\n\r\n//                   <FormGroup>\r\n//                       <Label for=\"amountInput\">Amount</Label>\r\n//                       <Input\r\n//                           type=\"number\"\r\n//                           name=\"amount\"\r\n//                           id=\"amountInput\"\r\n//                           value={amount}\r\n//                           placeholder='enter ammount'\r\n//                           onChange={(e) => setAmount(e.target.value)}\r\n//                       />\r\n//                   </FormGroup>\r\n\r\n//                   <Button color=\"primary\" type=\"submit\">\r\n//                       Submit\r\n//                   </Button>\r\n//               </Form>\r\n//           </CardHeader>\r\n//       </Card>\r\n//   );\r\n// };\r\n\r\n\r\n// const PayslipForm = () =>{\r\n//  return(\r\n// <div>\r\n//   <Row>\r\n//     <Col>\r\n//   <EmployeeSalaryForm/>\r\n//   </Col>\r\n//   <Col>\r\n//   <Advance/>\r\n//   </Col>\r\n//   </Row>\r\n//   <Row>\r\n//     <Col>\r\n//   <Daform/>\r\n//   </Col>\r\n//   <Col>\r\n//   <Esiform/>\r\n//   </Col>\r\n//   </Row>\r\n//   <Row>\r\n//         <Col sm=\"12\" md=\"6\">\r\n//           <Payslip />\r\n//         </Col>\r\n//         <Col sm=\"12\" md=\"6\">\r\n//           <Over />\r\n//         </Col>\r\n//       </Row>\r\n// </div>\r\n//  );\r\n// };\r\n// export default PayslipForm;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Row,\r\n  Col,\r\n  Input,\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Dropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  Table\r\n} from 'reactstrap';\r\nimport { FaPlus, FaMinus, FaEdit, FaTrash } from 'react-icons/fa';\r\n\r\nconst EmployeeSalaryForm = () => {\r\n  const [formData, setFormData] = useState({\r\n    payslipType: '',\r\n    salary: '',\r\n    fromAccount: '',\r\n  });\r\n\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [dropdownOpen, setDropdownOpen] = useState(false);\r\n  const [accountDropdownOpen, setAccountDropdownOpen] = useState(false);\r\n\r\n\r\n  const toggleDropdown = () => setDropdownOpen(!dropdownOpen);\r\n  const toggleAccountDropdown = () => setAccountDropdownOpen(!accountDropdownOpen);\r\n\r\n  const toggleModal = () => {\r\n    setModalOpen(!modalOpen);\r\n  };\r\n\r\n  const handleEmployeeSalarySubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n\r\n    if (!formData.payslipType || !formData.salary || !formData.fromAccount) {\r\n      alert('Please fill in all fields before saving.');\r\n      return;\r\n    }\r\n\r\n    console.log('Employee Salary Form submitted:', formData);\r\n    toggleModal();\r\n\r\n  };\r\n\r\n  const handleDropdownSelect = (selectedOption) => {\r\n    setFormData({ ...formData, payslipType: selectedOption });\r\n    toggleDropdown();\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  };\r\n\r\n  const handleAccountDropdownSelect = (selectedOption) => {\r\n    setFormData({ ...formData, fromAccount: selectedOption });\r\n    toggleAccountDropdown();\r\n  };\r\n  const handleRemoveAllFields = () => {\r\n    setFormData({\r\n      payslipType: '',\r\n      salary: '',\r\n      fromAccount: '',\r\n    });\r\n    // toggleModal();\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <h2>Employee Salary Form</h2>\r\n        <FaPlus\r\n          style={{\r\n            marginLeft: '45%',\r\n            cursor: 'pointer',\r\n            color: 'white',\r\n            fontSize: '29px',\r\n            border: '1px solid green',\r\n            borderRadius: '15px',\r\n            padding: '5px',\r\n            backgroundColor: 'green',\r\n          }}\r\n          onClick={toggleModal}\r\n        />\r\n        <FaMinus\r\n          style={{\r\n            marginLeft: '25px', // Adjusted marginLeft for closer positioning\r\n            cursor: 'pointer',\r\n            color: 'red',\r\n            fontSize: '29px',\r\n            border: '1px solid red',\r\n            borderRadius: '15px',\r\n            padding: '5px',\r\n            backgroundColor: 'white',\r\n          }}\r\n          onClick={handleRemoveAllFields}\r\n        />\r\n\r\n      </CardHeader>\r\n      <CardBody>\r\n        <Form onSubmit={handleEmployeeSalarySubmit}>\r\n          <FormGroup row>\r\n            <Label for=\"payslipType\" sm={4}>\r\n              Payslip Type:\r\n            </Label>\r\n            <div>{formData.payslipType}</div>\r\n          </FormGroup>\r\n          <FormGroup row>\r\n            <Label for=\"salary\" sm={4}>\r\n              Salary:\r\n            </Label>\r\n            <div>{formData.salary}</div>\r\n          </FormGroup>\r\n          <FormGroup row>\r\n            <Label for=\"fromAccount\" sm={4}>\r\n              From Account:\r\n            </Label>\r\n            <div>{formData.fromAccount}</div>\r\n          </FormGroup>\r\n\r\n        </Form>\r\n\r\n\r\n        <Modal isOpen={modalOpen} toggle={toggleModal} backdrop=\"static\">\r\n          <ModalHeader toggle={toggleModal}>Add Employee Salary</ModalHeader>\r\n          <ModalBody>\r\n            <Form onSubmit={handleEmployeeSalarySubmit}>\r\n              <FormGroup>\r\n                <Label for=\"payslipType\">Payslip Type:</Label>\r\n                <Dropdown isOpen={dropdownOpen} toggle={toggleDropdown}>\r\n                  <DropdownToggle caret>\r\n                    {formData.payslipType ? formData.payslipType : 'Select Payslip Type'}\r\n                  </DropdownToggle>\r\n                  <DropdownMenu>\r\n                    <DropdownItem onClick={() => handleDropdownSelect('Monthly Payslip')}>Monthly Payslip</DropdownItem>\r\n                    <DropdownItem onClick={() => handleDropdownSelect('Hourly Payslip')}>Hourly Payslip</DropdownItem>\r\n                  </DropdownMenu>\r\n                </Dropdown>\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <Label for=\"salary\">Salary:</Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"salary\"\r\n                  value={formData.salary}\r\n                  onChange={handleInputChange}\r\n                  style={{ width: '80%' }}\r\n                />\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <Label for=\"fromAccount\">From Account:</Label>\r\n                <Dropdown isOpen={accountDropdownOpen} toggle={toggleAccountDropdown}>\r\n                  <DropdownToggle caret>\r\n                    {formData.fromAccount ? formData.fromAccount : 'Select From Account'}\r\n                  </DropdownToggle>\r\n                  <DropdownMenu right>\r\n                    <DropdownItem onClick={() => handleAccountDropdownSelect('Account 1')}>Account 1</DropdownItem>\r\n                    <DropdownItem onClick={() => handleAccountDropdownSelect('Account 2')}>Account 2</DropdownItem>\r\n                  </DropdownMenu>\r\n                </Dropdown>\r\n              </FormGroup>\r\n              <Button color=\"primary\" type=\"submit\">\r\n                Save\r\n              </Button>{' '}\r\n              <Button color=\"secondary\" onClick={toggleModal}>\r\n                Cancel\r\n              </Button>\r\n            </Form>\r\n          </ModalBody>\r\n        </Modal>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst TaForm = () => {\r\n  const [taFormData, setTaFormData] = useState({\r\n    title: '',\r\n    amount: '',\r\n  });\r\n\r\n  const handleTaFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log('TA Form submitted:', taFormData);\r\n    // Additional logic for TA form submission\r\n  };\r\n\r\n  const handleTaInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setTaFormData({ ...taFormData, [name]: value });\r\n  };\r\n\r\n  return (\r\n    <Card >\r\n      <CardBody>\r\n\r\n        <Form onSubmit={handleTaFormSubmit}>\r\n          <h1>TA Form</h1>\r\n          <FormGroup>\r\n            <Label for=\"titleDropdown\">Title</Label>\r\n            <Input\r\n              type=\"select\"\r\n              name=\"title\"\r\n              id=\"titleDropdown\"\r\n              value={taFormData.title}\r\n              onChange={handleTaInputChange}\r\n            >\r\n              <option value=\"\">Select</option>\r\n              <option value=\"Option 1\">Option 1</option>\r\n              <option value=\"Option 2\">Option 2</option>\r\n\r\n            </Input>\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for=\"amountInput\">Amount</Label>\r\n            <Input\r\n              type=\"number\"\r\n              name=\"amount\"\r\n              id=\"amountInput\"\r\n              value={taFormData.amount}\r\n              placeholder='Enter Amount'\r\n              onChange={handleTaInputChange}\r\n            />\r\n          </FormGroup>\r\n\r\n          <Button color=\"primary\" type=\"submit\">\r\n            Submit\r\n          </Button>\r\n        </Form>\r\n\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst TravellingForm = () => {\r\n  const [title, setTitle] = useState('');\r\n  const [amount, setAmount] = useState('');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // Handle form submission logic here\r\n    console.log('Title:', title);\r\n    console.log('Amount:', amount);\r\n  };\r\n\r\n  return (\r\n    <Card >\r\n      <CardBody>\r\n\r\n        <Form onSubmit={handleSubmit}>\r\n          <h1>Travelling Form</h1>\r\n\r\n          <FormGroup>\r\n            <Label for=\"titleDropdown\">Title</Label>\r\n            <Input\r\n              type=\"select\"\r\n              name=\"title\"\r\n              id=\"titleDropdown\"\r\n              value={title}\r\n              onChange={(e) => setTitle(e.target.value)}\r\n            >\r\n              <option value=\"\">Select</option>\r\n              <option value=\"Option 1\">Option 1</option>\r\n              <option value=\"Option 2\">Option 2</option>\r\n\r\n            </Input>\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for=\"amountInput\">Amount</Label>\r\n            <Input\r\n              type=\"number\"\r\n              name=\"amount\"\r\n              id=\"amountInput\"\r\n              value={amount}\r\n              placeholder='Enter amount'\r\n              onChange={(e) => setAmount(e.target.value)}\r\n            />\r\n          </FormGroup>\r\n\r\n          <Button color=\"primary\" type=\"submit\">\r\n            Submit\r\n          </Button>\r\n        </Form>\r\n\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\nconst Daform = () => {\r\n  const [title, setTitle] = useState('');\r\n  const [amount, setAmount] = useState('');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log('Title:', title);\r\n    console.log('Amount:', amount);\r\n  };\r\n\r\n  return (\r\n    <Card >\r\n      <CardBody>\r\n\r\n        <Form onSubmit={handleSubmit}>\r\n          <h1>DA Form</h1>\r\n          <FormGroup>\r\n            <Label for=\"titleDropdown\">Title</Label>\r\n            <Input\r\n              type=\"select\"\r\n              name=\"title\"\r\n              id=\"titleDropdown\"\r\n              value={title}\r\n              onChange={(e) => setTitle(e.target.value)}\r\n            >\r\n              <option value=\"\">Select</option>\r\n              <option value=\"Option 1\">Option 1</option>\r\n              <option value=\"Option 2\">Option 2</option>\r\n\r\n            </Input>\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for=\"amountInput\">Amount</Label>\r\n            <Input\r\n              type=\"number\"\r\n              name=\"amount\"\r\n              id=\"amountInput\"\r\n              value={amount}\r\n              placeholder='enter ammount'\r\n              onChange={(e) => setAmount(e.target.value)}\r\n            />\r\n          </FormGroup>\r\n\r\n          <Button color=\"primary\" type=\"submit\">\r\n            Submit\r\n          </Button>\r\n        </Form>\r\n\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\nconst Pfform = () => {\r\n  const [title, setTitle] = useState('');\r\n  const [amount, setAmount] = useState('');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // Handle form submission logic here\r\n    console.log('Title:', title);\r\n    console.log('Amount:', amount);\r\n  };\r\n\r\n  return (\r\n    <Card >\r\n      <CardBody>\r\n\r\n        <Form onSubmit={handleSubmit}>\r\n          <h1>Pf Form</h1>\r\n          <FormGroup>\r\n            <Label for=\"titleDropdown\">Title</Label>\r\n            <Input\r\n              type=\"select\"\r\n              name=\"title\"\r\n              id=\"titleDropdown\"\r\n              value={title}\r\n              onChange={(e) => setTitle(e.target.value)}\r\n            >\r\n              <option value=\"\">Select</option>\r\n              <option value=\"Option 1\">Option 1</option>\r\n              <option value=\"Option 2\">Option 2</option>\r\n\r\n            </Input>\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for=\"amountInput\">Amount</Label>\r\n            <Input\r\n              type=\"number\"\r\n              name=\"amount\"\r\n              id=\"amountInput\"\r\n              value={amount}\r\n              placeholder='Enter Amount'\r\n              onChange={(e) => setAmount(e.target.value)}\r\n            />\r\n          </FormGroup>\r\n\r\n          <Button color=\"primary\" type=\"submit\">\r\n            Submit\r\n          </Button>\r\n        </Form>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\nconst Advance = () => {\r\n  const [title, setTitle] = useState('');\r\n  const [amount, setAmount] = useState('');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // Handle form submission logic here\r\n    console.log('Title:', title);\r\n    console.log('Amount:', amount);\r\n  };\r\n\r\n  return (\r\n    <Card >\r\n      <CardBody>\r\n\r\n        <Form onSubmit={handleSubmit}>\r\n          <h1>Advance Form</h1>\r\n          <FormGroup>\r\n            <Label for=\"titleDropdown\">Title</Label>\r\n            <Input\r\n              type=\"select\"\r\n              name=\"title\"\r\n              id=\"titleDropdown\"\r\n              value={title}\r\n              onChange={(e) => setTitle(e.target.value)}\r\n            >\r\n              <option value=\"\">Select</option>\r\n              <option value=\"Option 1\">Option 1</option>\r\n              <option value=\"Option 2\">Option 2</option>\r\n\r\n            </Input>\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for=\"amountInput\">Amount</Label>\r\n            <Input\r\n              type=\"number\"\r\n              name=\"amount\"\r\n              id=\"amountInput\"\r\n              value={amount}\r\n              placeholder='enter amount'\r\n              onChange={(e) => setAmount(e.target.value)}\r\n            />\r\n          </FormGroup>\r\n\r\n          <Button color=\"primary\" type=\"submit\">\r\n            Submit\r\n          </Button>\r\n        </Form>\r\n\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\nconst Esiform = () => {\r\n  const [title, setTitle] = useState('');\r\n  const [amount, setAmount] = useState('');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // Handle form submission logic here\r\n    console.log('Title:', title);\r\n    console.log('Amount:', amount);\r\n  };\r\n\r\n  return (\r\n    <Card >\r\n      <CardBody>\r\n        <Form onSubmit={handleSubmit}>\r\n          <h1>ESI Form</h1>\r\n          <FormGroup>\r\n            <Label for=\"titleDropdown\">Title</Label>\r\n            <Input\r\n              type=\"select\"\r\n              name=\"title\"\r\n              id=\"titleDropdown\"\r\n              value={title}\r\n              onChange={(e) => setTitle(e.target.value)}\r\n            >\r\n              <option value=\"\">Select</option>\r\n              <option value=\"Option 1\">Option 1</option>\r\n              <option value=\"Option 2\">Option 2</option>\r\n\r\n            </Input>\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for=\"amountInput\">Amount</Label>\r\n            <Input\r\n              type=\"number\"\r\n              name=\"amount\"\r\n              id=\"amountInput\"\r\n              value={amount}\r\n              placeholder='enter ammount'\r\n              onChange={(e) => setAmount(e.target.value)}\r\n            />\r\n          </FormGroup>\r\n\r\n          <Button color=\"primary\" type=\"submit\">\r\n            Submit\r\n          </Button>\r\n        </Form>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\nconst Insurance = () => {\r\n  const [title, setTitle] = useState('');\r\n  const [amount, setAmount] = useState('');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // Handle form submission logic here\r\n    console.log('Title:', title);\r\n    console.log('Amount:', amount);\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <CardBody>\r\n        <Form onSubmit={handleSubmit}>\r\n          <h1>Insurance Form</h1>\r\n          <FormGroup>\r\n            <Label for=\"titleDropdown\">Title</Label>\r\n            <Input\r\n              type=\"select\"\r\n              name=\"title\"\r\n              id=\"titleDropdown\"\r\n              value={title}\r\n              onChange={(e) => setTitle(e.target.value)}\r\n            >\r\n              <option value=\"\">Select</option>\r\n              <option value=\"Option 1\">Option 1</option>\r\n              <option value=\"Option 2\">Option 2</option>\r\n\r\n            </Input>\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for=\"amountInput\">Amount</Label>\r\n            <Input\r\n              type=\"number\"\r\n              name=\"amount\"\r\n              id=\"amountInput\"\r\n              value={amount}\r\n              placeholder='enter ammount'\r\n              onChange={(e) => setAmount(e.target.value)}\r\n            />\r\n          </FormGroup>\r\n\r\n          <Button color=\"primary\" type=\"submit\">\r\n            Submit\r\n          </Button>\r\n        </Form>\r\n\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\n\r\nconst Payslip = () => {\r\n  const [title, setTitle] = useState('');\r\n  const [amount, setAmount] = useState('');\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    console.log('Title:', title);\r\n    console.log('Amount:', amount);\r\n  };\r\n\r\n  return (\r\n    <Card >\r\n      <CardBody>\r\n\r\n        <Form onSubmit={handleSubmit}>\r\n          <h1>Pay Slip Form</h1>\r\n          <FormGroup>\r\n            <Label for=\"titleDropdown\">Title</Label>\r\n            <Input\r\n              type=\"select\"\r\n              name=\"title\"\r\n              id=\"titleDropdown\"\r\n              value={title}\r\n              onChange={(e) => setTitle(e.target.value)}\r\n            >\r\n              <option value=\"\">Select</option>\r\n              <option value=\"Option 1\">Option 1</option>\r\n              <option value=\"Option 2\">Option 2</option>\r\n\r\n            </Input>\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Label for=\"amountInput\">Amount</Label>\r\n            <Input\r\n              type=\"number\"\r\n              name=\"amount\"\r\n              id=\"amountInput\"\r\n              value={amount}\r\n              placeholder='Enter Amount'\r\n              onChange={(e) => setAmount(e.target.value)}\r\n            />\r\n          </FormGroup>\r\n\r\n          <Button color=\"primary\" type=\"submit\">\r\n            Submit\r\n          </Button>\r\n        </Form>\r\n\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\n\r\nconst Over = () => {\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [formData, setFormData] = useState({\r\n    employeeName: '',\r\n    overtime: '',\r\n    title: '',\r\n    numberOfDays: '',\r\n    hours: '',\r\n    rate: '',\r\n  });\r\n  const [selectedItem, setSelectedItem] = useState(null);\r\n\r\n  const toggleModal = () => {\r\n    setModalOpen(!modalOpen);\r\n    setSelectedItem(null);\r\n    setFormData({\r\n      employeeName: '',\r\n      overtime: '',\r\n      title: '',\r\n      numberOfDays: '',\r\n      hours: '',\r\n      rate: '',\r\n    });\r\n  };\r\n\r\n\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (selectedItem !== null) {\r\n\r\n      const updatedTableData = [...tableData];\r\n      updatedTableData[selectedItem] = formData;\r\n      setTableData(updatedTableData);\r\n      setSelectedItem(null);\r\n    } else {\r\n\r\n      setTableData([...tableData, formData]);\r\n    }\r\n\r\n    toggleModal();\r\n  };\r\n\r\n  const handleEdit = (index) => {\r\n\r\n    setSelectedItem(index);\r\n    setFormData(tableData[index]);\r\n    toggleModal();\r\n  };\r\n\r\n  const handleDelete = (index) => {\r\n\r\n    const updatedTableData = [...tableData];\r\n    updatedTableData.splice(index, 1);\r\n    setTableData(updatedTableData);\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <h1>OverTime Form</h1>\r\n        <FaPlus\r\n          style={{\r\n            // marginRight: '35px',\r\n            cursor: 'pointer',\r\n            color: 'white',\r\n            fontSize: '29px',\r\n            border: '1px solid green',\r\n            borderRadius: '15px',\r\n            padding: '5px',\r\n            backgroundColor: 'green',\r\n          }}\r\n          onClick={toggleModal}\r\n        />\r\n\r\n      </CardHeader>\r\n      <CardBody>\r\n\r\n        <Form>\r\n          <div style={{ overflowX: 'auto' }}>\r\n            <Table striped bordered hover>\r\n\r\n              <thead>\r\n                <tr>\r\n                  <th>EMPLOYEE NAME</th>\r\n                  <th>OVERTIME</th>\r\n\r\n                  <th>NUMBER OF DAYS</th>\r\n                  <th>HOURS</th>\r\n                  <th>RATE</th>\r\n                  <th>ACTION</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {tableData.map((data, index) => (\r\n                  <tr key={index}>\r\n                    <td>{data.employeeName}</td>\r\n                    <td>{data.overtime}</td>\r\n\r\n                    <td>{data.numberOfDays}</td>\r\n                    <td>{data.hours}</td>\r\n                    <td>{data.rate}</td>\r\n                    <td>\r\n                      <Button color=\"link\" style={{ fontSize: '20px' }} onClick={() => handleEdit(index)}>\r\n                        <FaEdit />\r\n                      </Button>\r\n                      <Button color=\"link\" style={{ fontSize: '20px' }} onClick={() => handleDelete(index)}>\r\n                        <FaTrash />\r\n                      </Button>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </Table>\r\n          </div>\r\n        </Form>\r\n\r\n        <Modal isOpen={modalOpen} toggle={toggleModal} backdrop=\"static\">\r\n          <ModalHeader toggle={toggleModal}>Add Overtime</ModalHeader>\r\n          <ModalBody>\r\n            <Form onSubmit={handleSubmit}>\r\n              <FormGroup>\r\n                <Label for=\"employeeNameInput\">Employee Name:</Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"employeeName\"\r\n                  value={formData.employeeName}\r\n                  onChange={(e) => setFormData({ ...formData, employeeName: e.target.value })}\r\n                />\r\n              </FormGroup>\r\n\r\n              <FormGroup>\r\n                <Label for=\"overtimeInput\">Overtime:</Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"overtime\"\r\n                  value={formData.overtime}\r\n                  onChange={(e) => setFormData({ ...formData, overtime: e.target.value })}\r\n                />\r\n              </FormGroup>\r\n\r\n\r\n\r\n              <FormGroup>\r\n                <Label for=\"numberOfDaysInput\">Number of Days:</Label>\r\n                <Input\r\n                  type=\"number\"\r\n                  name=\"numberOfDays\"\r\n                  value={formData.numberOfDays}\r\n                  onChange={(e) => setFormData({ ...formData, numberOfDays: e.target.value })}\r\n                />\r\n              </FormGroup>\r\n\r\n              <FormGroup>\r\n                <Label for=\"hoursInput\">Hours:</Label>\r\n                <Input\r\n                  type=\"number\"\r\n                  name=\"hours\"\r\n                  value={formData.hours}\r\n                  onChange={(e) => setFormData({ ...formData, hours: e.target.value })}\r\n                />\r\n              </FormGroup>\r\n\r\n              <FormGroup>\r\n                <Label for=\"rateInput\">Rate:</Label>\r\n                <Input\r\n                  type=\"number\"\r\n                  name=\"rate\"\r\n                  value={formData.rate}\r\n                  onChange={(e) => setFormData({ ...formData, rate: e.target.value })}\r\n                />\r\n              </FormGroup>\r\n\r\n              <Button color=\"primary\" type=\"submit\">\r\n                Submit\r\n              </Button>\r\n            </Form>\r\n          </ModalBody>\r\n        </Modal>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\n\r\n\r\nconst PayslipForm = () => {\r\n  return (\r\n    <div>\r\n      <Row >\r\n        <Col sm=\"12\" md=\"6\">\r\n          <EmployeeSalaryForm />\r\n        </Col>\r\n        <Col sm=\"12\" md=\"6\">\r\n          <TaForm />\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col sm=\"12\" md=\"6\">\r\n          <TravellingForm />\r\n        </Col>\r\n        <Col sm=\"12\" md=\"6\">\r\n          <Daform />\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col sm=\"12\" md=\"6\">\r\n          <Advance />\r\n        </Col>\r\n        <Col sm=\"12\" md=\"6\">\r\n          <Pfform />\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col sm=\"12\" md=\"6\">\r\n          <Insurance />\r\n        </Col>\r\n        <Col sm=\"12\" md=\"6\">\r\n          <Esiform />\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col sm=\"12\" md=\"6\">\r\n          <Payslip />\r\n        </Col>\r\n        <Col sm=\"12\" md=\"6\">\r\n          <Over />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PayslipForm;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"row\", \"disabled\", \"check\", \"inline\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  row: PropTypes.bool,\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar FormGroup = function FormGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      row = props.row,\n      disabled = props.disabled,\n      check = props.check,\n      inline = props.inline,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, row ? 'row' : false, check ? 'form-check' : 'form-group', check && inline ? 'form-check-inline' : false, check && disabled ? 'disabled' : false), cssModule);\n\n  if (Tag === 'fieldset') {\n    attributes.disabled = disabled;\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormGroup.propTypes = propTypes;\nFormGroup.defaultProps = defaultProps;\nexport default FormGroup;"],"sourceRoot":""}