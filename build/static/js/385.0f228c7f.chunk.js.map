{"version":3,"sources":["views/apps/freshlist/customer/HRM/RecPLace/practskillform.js","../node_modules/reactstrap/es/FormGroup.js"],"names":["MockTestForm","useState","questions","id","text","options","selectedOption","formData","setFormData","handleClearResponse","prevFormData","map","question","style","marginBottom","textAlign","color","onSubmit","e","preventDefault","console","log","q","index","key","row","sm","className","option","check","type","name","value","checked","onChange","questionId","size","offset","marginRight","onClick","_excluded","propTypes","children","PropTypes","node","bool","inline","disabled","tag","tagPropType","string","cssModule","object","FormGroup","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps"],"mappings":"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","file":"static/js/385.0f228c7f.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Card, CardBody, Col, Form, FormGroup, Label, Input, Button } from 'reactstrap';\r\n\r\nconst MockTestForm = () => {\r\n  const [formData, setFormData] = useState({\r\n    questions: [\r\n      {\r\n        id: 'question1',\r\n        text: '  What is the capital of France?',\r\n        options: [\r\n          { id: 'option1_1', text: 'Berlin' },\r\n          { id: 'option1_2', text: 'Paris' },\r\n          { id: 'option1_3', text: 'London' },\r\n          { id: 'option1_4', text: 'Rome' },\r\n        ],\r\n        selectedOption: null,\r\n      },\r\n      {\r\n        id: 'question2',\r\n        text: '  Which planet is known as the Red Planet?',\r\n        options: [\r\n          { id: 'option2_1', text: 'Mars' },\r\n          { id: 'option2_2', text: 'Venus' },\r\n          { id: 'option2_3', text: 'Jupiter' },\r\n          { id: 'option2_4', text: 'Saturn' },\r\n        ],\r\n        selectedOption: null,\r\n      },\r\n      {\r\n        id: 'question3',\r\n        text: '  The national animal of India is?',\r\n        options: [\r\n          { id: 'option2_1', text: 'Tiger' },\r\n          { id: 'option2_2', text: 'Lion' },\r\n          { id: 'option2_3', text: 'Deer' },\r\n          { id: 'option2_4', text: 'Beer' },\r\n        ],\r\n        selectedOption: null,\r\n      },\r\n      {\r\n        id: 'question4',\r\n        text: '  National Currency of India is?',\r\n        options: [\r\n          { id: 'option2_1', text: 'Dollar' },\r\n          { id: 'option2_2', text: 'Indian Rupee' },\r\n          { id: 'option2_3', text: 'Yen' },\r\n          { id: 'option2_4', text: 'Euro' },\r\n        ],\r\n        selectedOption: null,\r\n      },\r\n      {\r\n        id: 'question5',\r\n        text: '  What is the national flower of India?',\r\n        options: [\r\n          { id: 'option2_1', text: 'Rose' },\r\n          { id: 'option2_2', text: 'Lotus' },\r\n          { id: 'option2_3', text: 'Sunflower' },\r\n          { id: 'option2_4', text: 'Lily' },\r\n        ],\r\n        selectedOption: null,\r\n      },\r\n    ],\r\n  });\r\n\r\n  const handleOptionChange = (questionId, selectedOption) => {\r\n    setFormData((prevFormData) => ({\r\n      ...prevFormData,\r\n      questions: prevFormData.questions.map((question) =>\r\n        question.id === questionId ? { ...question, selectedOption } : question\r\n      ),\r\n    }));\r\n  };\r\n\r\n  const handleClearResponse = () => {\r\n    setFormData((prevFormData) => ({\r\n      ...prevFormData,\r\n      questions: prevFormData.questions.map((question) => ({\r\n        ...question,\r\n        selectedOption: null,\r\n      })),\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log('Selected Options:', formData.questions.map((q) => q.selectedOption));\r\n\r\n    handleClearResponse();\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <CardBody>\r\n        <h2 style={{ marginBottom: '20px', textAlign: 'center', color: '#007BFF' }}>\r\n          Mock Test Form\r\n        </h2>\r\n        <Form onSubmit={handleSubmit}>\r\n          {formData.questions.map((question, index) => (\r\n            <div key={question.id} style={{ marginBottom: '15px' }}>\r\n              <FormGroup row>\r\n                <Col sm={12} className=\"font-weight-bold\">\r\n                  Q{index + 1}: {question.text}\r\n                </Col>\r\n              </FormGroup>\r\n              {question.options.map((option) => (\r\n                <FormGroup key={option.id} row>\r\n                  <Col sm={10}>\r\n                    <Label check>\r\n                      <Input\r\n                        type=\"radio\"\r\n                        name={question.id}\r\n                        value={option.id}\r\n                        checked={question.selectedOption === option.id}\r\n                        onChange={() => handleOptionChange(question.id, option.id)}\r\n                      />\r\n                      {' '}\r\n                      {option.text}\r\n                    </Label>\r\n                  </Col>\r\n                </FormGroup>\r\n              ))}\r\n            </div>\r\n          ))}\r\n          <FormGroup row>\r\n            <Col sm={{ size: 6, offset: 4 }} className=\"text-center\">\r\n              <Button color=\"primary\" type=\"submit\" style={{ marginRight: '10px' }}>\r\n                Submit\r\n              </Button>\r\n              <Button color=\"danger\" type=\"button\" onClick={handleClearResponse}>\r\n                Clear Response\r\n              </Button>\r\n            </Col>\r\n          </FormGroup>\r\n        </Form>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default MockTestForm;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"row\", \"disabled\", \"check\", \"inline\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  row: PropTypes.bool,\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar FormGroup = function FormGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      row = props.row,\n      disabled = props.disabled,\n      check = props.check,\n      inline = props.inline,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, row ? 'row' : false, check ? 'form-check' : 'form-group', check && inline ? 'form-check-inline' : false, check && disabled ? 'disabled' : false), cssModule);\n\n  if (Tag === 'fieldset') {\n    attributes.disabled = disabled;\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormGroup.propTypes = propTypes;\nFormGroup.defaultProps = defaultProps;\nexport default FormGroup;"],"sourceRoot":""}