{"version":3,"sources":["views/apps/freshlist/accounts/CreateTransporter.js","../node_modules/reactstrap/es/FormGroup.js"],"names":["i","CreateCustomer","useState","CreatAccountView","setCreatAccountView","RoleList","setRoleList","Countries","setCountry","BulkImport","setBulkImport","States","setState","Cities","setCities","formData","setFormData","dropdownValue","setdropdownValue","transporterType","settransporterType","index","setindex","error","setError","Context","useContext","UserContext","history","useHistory","Params","useParams","handleInputChange","e","type","target","name","value","checked","test","files","length","useEffect","navigator","geolocation","getCurrentPosition","position","Date","timestamp","toLocaleString","Geotagging","coords","latitude","longitude","swal","timeout","enableHighAccuracy","userdata","JSON","parse","localStorage","getItem","Get_RoleList","_id","database","then","res","ShowList","Role","filter","item","roleName","toLowerCase","includes","catch","err","console","log","id","_Get","View_TransporterByID","transporter","Transporter","Duedate","split","Country","countryselected","getAllCountries","ele","State","stateselected","getStatesOfCountry","isoCode","City","_GetList","Create_transporter_xmlView","jsonData","xmlJs","xml2json","data","compact","spaces","input","MyDropDown","submitHandler","preventDefault","undefined","formdata","FormData","append","_BulkUpload","Bulk_Upload_Customer","message","dropdown","_text","map","_attributes","stringify","val","status","rolename","forEach","key","Createtransportersave","goBack","response","_Put","Update_TransporterByID","onSelect1","selectedList","selectedItem","onRemove1","className","render","style","cursor","color","onClick","onSubmit","lg","md","required","onChange","selected","options","selectedIndex","getAttribute","data-name","sm","label","option","Registration_Type","moment","tz","format","phoneinput","inputClass","country","onKeyDown","countryCodeEditable","phone","library","getOptionLabel","getOptionValue","isObject","getCitiesOfState","countryCode","selectedValues","onSelect","onRemove","displayValue","placeholder","dateFormat","UserInformatio","timeZone","number","onWheel","multiple","allimages","Array","from","handleFileChange","marginRight","Ripple","_excluded","propTypes","children","PropTypes","node","row","bool","check","inline","disabled","tag","tagPropType","string","cssModule","object","FormGroup","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps"],"mappings":";ofACA,kmGAAAA,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQA2/BeC,UA98BQ,WAAO,IAAD,oBAC3B,EAAgDC,mBAAS,IAAG,mBAArDC,EAAgB,KAAEC,EAAmB,KAC5C,EAAgCF,mBAAS,IAAG,mBAArCG,EAAQ,KAAEC,EAAW,KAC5B,EAAgCJ,mBAAS,IAAG,mBAArCK,EAAS,KAAEC,EAAU,KAC5B,EAAoCN,mBAAS,MAAK,mBAA3CO,GAAU,KAAEC,GAAa,KAChC,GAA2BR,mBAAS,IAAG,qBAAhCS,GAAM,MAAEC,GAAQ,MACvB,GAA4BV,mBAAS,IAAG,qBAAjCW,GAAM,MAAEC,GAAS,MACxB,GAAgCZ,mBAAS,IAAG,qBAArCa,GAAQ,MAAEC,GAAW,MAC5B,GAA0Cd,mBAAS,IAAG,qBAA/Ce,GAAa,MAAEC,GAAgB,MACtC,GAA8ChB,mBAAS,UAAS,qBAAzDiB,GAAe,MAAEC,GAAkB,MAC1C,GAA0BlB,mBAAS,IAAG,qBAA/BmB,GAAK,MAAEC,GAAQ,MACtB,GAA0BpB,mBAAS,IAAG,qBAA/BqB,GAAK,MAAEC,GAAQ,MAEhBC,GAAUC,qBAAWC,KACvBC,GAAUC,cACVC,GAASC,cAYPC,GAAoB,SAACC,EAAGC,EAAMlC,GAClC,MAAiCiC,EAAEE,OAA3BC,EAAI,EAAJA,KAAMC,EAAK,EAALA,MAAOC,EAAO,EAAPA,QACrBhB,GAAStB,GACG,YAARkC,EAEAlB,GAAY,2BACPD,IAAQ,kBACVqB,EAAOE,KASA,UAARJ,EACE,aAAaK,KAAKF,KACpBrB,GAAY,2BACPD,IAAQ,kBACVqB,EAAOC,KAEVb,GAAS,KAEM,QAARU,EACLD,EAAEE,OAAOK,OACXxB,GAAY,2BACPD,IAAQ,kBACVqB,EAAOH,EAAEE,OAAOK,MAAM,MAIvBH,EAAMI,QAAU,IAClBzB,GAAY,2BACPD,IAAQ,kBACVqB,EAAOC,KAGVb,GAAS,KAETR,GAAY,2BACPD,IAAQ,kBACVqB,EAAOC,MAMlBK,qBAAU,WACJC,UAAUC,YACZD,UAAUC,YAAYC,oBACpB,SAACC,GACc,IAAIC,KAAKD,EAASE,WACPC,iBACxBlC,GAASmC,WAAU,UAAMJ,EAASK,OAAOC,SAAQ,YAAIN,EAASK,OAAOE,cAEvE,SAAC9B,GACC+B,IAAK,UAAD,OAAW/B,MAEjB,CAAEgC,QAAS,IAAOC,oBAAoB,IAGxCF,IAAK,kCAEN,IAEHZ,qBAAU,WACR,IAAIe,EAAWC,KAAKC,MAAMC,aAAaC,QAAQ,aAC/CC,aAAqB,OAARL,QAAQ,IAARA,OAAQ,EAARA,EAAUM,IAAa,OAARN,QAAQ,IAARA,OAAQ,EAARA,EAAUO,UACnCC,MAAK,SAACC,GAAS,IAAD,EACTC,EAAc,OAAHD,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKE,YAAI,WAAN,EAAH,EAAWC,QAAO,SAACC,EAAMtE,GAAC,eACnC,OAAJsE,QAAI,IAAJA,GAAc,QAAV,EAAJA,EAAMC,gBAAQ,OAAe,QAAf,EAAd,EAAgBC,qBAAa,WAAzB,EAAJ,EAA+BC,SAAS,kBAE1CnE,EAAY6D,MAEbO,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZrB,IAAK,6BAER,IAEHZ,qBAAU,WACRkC,QAAQC,IAAU,OAAN/C,SAAM,IAANA,QAAM,EAANA,GAAQgD,IACF,IAAR,OAANhD,SAAM,IAANA,QAAM,EAANA,GAAQgD,IACV1D,GAAmB,WAEnBA,GAAmB,QAEnB2D,aAAKC,KAA4B,OAANlD,SAAM,IAANA,QAAM,EAANA,GAAQgD,IAChCb,MAAK,SAACC,GAAS,IAAD,EACTe,EAAiB,OAAHf,QAAG,IAAHA,OAAG,EAAHA,EAAKgB,YAAY,GAGnC,GAFAD,EAAYE,QAAqB,OAAXF,QAAW,IAAXA,GAAoB,QAAT,EAAXA,EAAaE,eAAO,WAAT,EAAX,EAAsBC,MAAM,KAAK,GACvDpE,GAAYiE,GACG,OAAXA,QAAW,IAAXA,OAAW,EAAXA,EAAaI,QAAS,CAAC,IAAD,EACpBC,EAAyB,OAAPD,UAAO,IAAPA,KAA0B,QAAnB,EAAPA,IAASE,yBAAiB,WAAnB,EAAP,EAA4BlB,QAChD,SAACmB,EAAKxF,GAAC,OAAQ,OAAHwF,QAAG,IAAHA,OAAG,EAAHA,EAAKpD,QAAmB,OAAX6C,QAAW,IAAXA,OAAW,EAAXA,EAAaI,YAGxC,GADA7E,EAAW8E,GACI,OAAXL,QAAW,IAAXA,OAAW,EAAXA,EAAaQ,MAAO,CAAC,IAAD,IAClBC,EAAqB,OAALD,UAAK,IAALA,KAEnB,QAFwB,EAALA,IAAOE,mBACP,QADyB,EAC3CL,EAAgB,UAAE,aAAlB,EAAoBM,gBACrB,WAFwB,EAAL,EAEjBvB,QAAO,SAACmB,EAAKxF,GAAC,OAAQ,OAAHwF,QAAG,IAAHA,OAAG,EAAHA,EAAKpD,QAAmB,OAAX6C,QAAW,IAAXA,OAAW,EAAXA,EAAaQ,UAChD7E,GAAS8E,GACTd,QAAQC,IAAIa,IACG,OAAXT,QAAW,IAAXA,OAAW,EAAXA,EAAaY,OAKf/E,GAAqB,OAAXmE,QAAW,IAAXA,OAAW,EAAXA,EAAaY,WAK9BnB,OAAM,SAACC,GACNC,QAAQC,IAAIF,SAGjB,IAEHjC,qBAAU,WACRoD,aAASC,MACN9B,MAAK,SAACC,GAAS,IAAD,UACP8B,EAAWC,IAAMC,SAAShC,EAAIiC,KAAM,CACxCC,SAAS,EACTC,OAAQ,IAGVzB,QAAQC,IAAwB,QAArB,EAACnB,KAAKC,MAAMqC,UAAS,aAApB,EAAsB/F,gBAClCG,EAAwC,QAArB,EAACsD,KAAKC,MAAMqC,UAAS,OAAgB,QAAhB,EAApB,EAAsB/F,sBAAc,WAAhB,EAApB,EAAsCqG,OAE1DpF,GAAqC,QAArB,EAACwC,KAAKC,MAAMqC,UAAS,OAAgB,QAAhB,EAApB,EAAsB/F,sBAAc,WAAhB,EAApB,EAAsCsG,eAExD7B,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZrB,IAAK,6BAER,IAEH,IAAMkD,GAAa,uCAAG,WAAOvE,GAAC,mFACT,GAAnBA,EAAEwE,iBAEiB,OAAfhG,SAAqCiG,GAAdjG,GAAuB,gBAEZ,OADhCkG,EAAW,IAAIC,UACVC,OAAO,OAAQpG,IAAY,SAE9BqG,aAAYC,IAAsBJ,GACrC1C,MAAK,SAACC,GACLZ,IAAK,GAAD,OAAO,OAAHY,QAAG,IAAHA,OAAG,EAAHA,EAAK8C,aAEdtC,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZrB,IAAK,2BACJ,KAAD,yBAEAG,EAAWC,KAAKC,MAAMC,aAAaC,QAAQ,cAC3C8C,EAAW,IAAIC,UAEVC,OAAO,GAAD,OACG,OAAb5F,SAAa,IAAbA,IAAuB,QAAV,EAAbA,GAAegG,gBAAQ,OAAM,QAAN,EAAvB,EAAyB7E,YAAI,WAAhB,EAAb,EAA+B8E,OAClCnG,GAAsB,OAAbE,SAAa,IAAbA,IAAuB,QAAV,EAAbA,GAAegG,gBAAQ,OAAM,QAAN,EAAvB,EAAyB7E,YAAI,WAAhB,EAAb,EAA+B8E,QAE1B,OAAhB/G,QAAgB,IAAhBA,KAAkBgH,KAAI,SAAC3B,EAAKxF,GAAO,IAAD,QACY,EACV,EAEzB,EAHT,GAAoC,SAA7B,OAAHwF,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtD,YAAI,OAAa,QAAb,EAAT,EAAWkF,mBAAW,WAAnB,EAAH,EAAwBlF,MACF,SAAjB,OAAHsD,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKpD,YAAI,WAAN,EAAH,EAAW8E,OACbP,EAASE,OAAO,GAAD,OAAO,OAAHrB,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKpD,YAAI,WAAN,EAAH,EAAW8E,OAASxD,KAAK2D,UAAUxG,KAEtD8F,EAASE,OAAO,GAAD,OAAO,OAAHrB,QAAG,IAAHA,OAAG,EAAHA,EAAKpD,KAAK8E,OAASnG,GAAY,OAAHyE,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKpD,YAAI,WAAN,EAAH,EAAW8E,aAEvD,GAAoC,SAA7B,OAAH1B,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtD,YAAI,OAAa,QAAb,EAAT,EAAWkF,mBAAW,WAAnB,EAAH,EAAwBlF,MAAgB,CAAC,IAAD,IACZ,IAKJ,IALjC,GAAwB,cAAjB,OAAHsD,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKpD,YAAI,WAAN,EAAH,EAAW8E,OACa,QAA1B,EAAAnG,GAAY,OAAHyE,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKpD,YAAI,WAAN,EAAH,EAAW8E,cAAM,OAA1B,EAA4BC,KAAI,SAACG,EAAKjG,GAAW,IAAD,EAC9CsF,EAASE,OAAO,OAAQ9F,GAAY,OAAHyE,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKpD,YAAI,WAAN,EAAH,EAAW8E,OAAO7F,OAGvD,GAAwB,UAAjB,OAAHmE,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKpD,YAAI,WAAN,EAAH,EAAW8E,OACa,QAA1B,EAAAnG,GAAY,OAAHyE,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKpD,YAAI,WAAN,EAAH,EAAW8E,cAAM,OAA1B,EAA4BC,KAAI,SAACG,EAAKjG,GAAW,IAAD,EAC9CsF,EAASE,OAAO,QAAS9F,GAAY,OAAHyE,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKpD,YAAI,WAAN,EAAH,EAAW8E,OAAO7F,WAGnD,CAAC,IAAD,IACLsF,EAASE,OAAO,GAAD,OAAO,OAAHrB,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKpD,YAAI,WAAN,EAAH,EAAW8E,OAASnG,GAAY,OAAHyE,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKpD,YAAI,WAAN,EAAH,EAAW8E,YAI/DP,EAASE,OAAO,SAAkB,OAAR9F,SAAQ,IAARA,QAAQ,EAARA,GAAUwG,QACpCZ,EAASE,OAAO,WAAoB,OAARpD,QAAQ,IAARA,OAAQ,EAARA,EAAUO,UACtC2C,EAASE,OAAO,WAAoB,OAAR9F,SAAQ,IAARA,QAAQ,EAARA,GAAUyG,UAEtCb,EAASc,SAAQ,SAACpF,EAAOqF,GACvB9C,QAAQC,IAAI6C,EAAKrF,MAGfd,KAGgB,MAAR,OAANO,SAAM,IAANA,QAAM,EAANA,GAAQgD,IACV6C,YAAsBhB,GACnB1C,MAAK,SAACC,GACLU,QAAQC,IAAIX,GAERA,EAAIqD,SACN3F,GAAQgG,SACRtE,IAAK,wCAGRoB,OAAM,SAACC,GACNC,QAAQC,IAAIF,EAAIkD,UAChBvE,IAAK,kCAITwE,aAAKC,KAA8B,OAANjG,SAAM,IAANA,QAAM,EAANA,GAAQgD,GAAI6B,GACtC1C,MAAK,SAACC,GACLU,QAAQC,IAAIX,GACRA,EAAIqD,SACN3F,GAAQgG,SACRtE,IAAK,wCAGRoB,OAAM,SAACC,GACNC,QAAQC,IAAIF,OAGnB,4CAEJ,gBAvFkB,sCAwFbqD,GAAY,SAACC,EAAcC,GAC/BpH,GAAUmH,GACVrD,QAAQC,IAAIoD,IAERE,GAAY,SAACF,EAAcC,GAC/BtD,QAAQC,IAAIoD,GACZnH,GAAUmH,IAEZ,OACE,6BACE,6BACE,kBAAC,IAAI,KACH,kBAAC,IAAG,CAACG,UAAU,OACb,kBAAC,IAAG,KACF,wBAAIA,UAAU,cACXjH,IAAmBA,GAAgB,iBAGxC,kBAAC,IAAG,KACF,yBAAKiH,UAAU,eACb,kBAAC,IAAK,CACJC,OAAQ,gBAAGzG,EAAO,EAAPA,QAAO,OAChB,kBAAC,IAAM,CACL0G,MAAO,CAAEC,OAAQ,WACjBH,UAAU,mBACVI,MAAM,UACNC,QAAS,kBAAM7G,EAAQgG,WAAU,cAU7C,kBAAC,IAAQ,KACP,kBAAC,IAAI,CAACQ,UAAU,MAAMM,SAAUlC,IAC9B,kBAAC,IAAG,CAAC4B,UAAU,QACb,kBAAC,IAAG,CAACO,GAAG,IAAIC,GAAG,KACb,kBAAC,IAAS,KACR,kBAAC,IAAK,CAACR,UAAU,QAAO,eACxB,kBAAC,IAAW,CACVS,UAAQ,EACR3G,KAAK,SACLE,KAAK,WACLC,MAAOtB,GAAmB,SAC1B+H,SAAU,SAAC7G,GAAO,IAAD,IACT8G,EAGsB,QAHd,EAAG9G,EAAEE,OAAO6G,QACxB/G,EAAEE,OAAO8G,eAERC,aAAa,oBAAY,aAHX,EAIb9D,MAAM,KAEVpE,GAAY,2BACPD,IAAQ,uBACV,WAAakB,EAAEE,OAAOE,OAAK,cAC3B,WAAa0G,EAAS,IAAE,OAG7B,gCAAQ,mBACP1I,IACS,OAARA,QAAQ,IAARA,OAAQ,EAARA,EAAUoC,UACF,OAARpC,QAAQ,IAARA,OAAQ,EAARA,EAAU8G,KAAI,SAAC3B,EAAKxF,GAClB,OACE,4BACEmJ,YAAA,UAAiB,OAAH3D,QAAG,IAAHA,OAAG,EAAHA,EAAK1C,SAAQ,YAAO,OAAH0C,QAAG,IAAHA,OAAG,EAAHA,EAAKjB,UACpClC,MAAU,OAAHmD,QAAG,IAAHA,OAAG,EAAHA,EAAKzB,KACR,OAAHyB,QAAG,IAAHA,OAAG,EAAHA,EAAKjB,iBAOnBtD,IAAiBA,GAChB,oCACE,kBAAC,IAAG,CAAC0H,GAAG,IAAIC,GAAG,IAAIQ,GAAG,MACpB,kBAAC,IAAS,KACR,kBAAC,IAAK,CAAChB,UAAU,SACD,OAAbnH,SAAa,IAAbA,IAAuB,QAAV,EAAbA,GAAegG,gBAAQ,OAAO,QAAP,EAAvB,EAAyBoC,aAAK,WAAjB,EAAb,EAAgCnC,SAClB,OAAbjG,SAAa,IAAbA,IAAuB,QAAV,EAAbA,GAAegG,gBAAQ,OAAO,QAAP,EAAvB,EAAyBoC,aAAK,WAAjB,EAAb,EAAgCnC,OAAO,IAAI,KAG/C,kBAAC,IAAW,CACV2B,UAAQ,EACR3G,KAAK,SACLE,KAAmB,OAAbnB,SAAa,IAAbA,IAAuB,QAAV,EAAbA,GAAegG,gBAAQ,OAAM,QAAN,EAAvB,EAAyB7E,YAAI,WAAhB,EAAb,EAA+B8E,MACrC7E,MAAOtB,GAAsB,OAAbE,SAAa,IAAbA,IAAuB,QAAV,EAAbA,GAAegG,gBAAQ,OAAM,QAAN,EAAvB,EAAyB7E,YAAI,WAAhB,EAAb,EAA+B8E,OAC/C4B,SAAU9G,IACV,4BAAQK,MAAM,IAAG,eACH,OAAbpB,SAAa,IAAbA,IAAuB,QAAV,EAAbA,GAAegG,gBAAQ,OAAQ,QAAR,EAAvB,EAAyBqC,cAAM,WAAlB,EAAb,EAAiCnC,KAChC,SAACmC,EAAQjI,GAAK,eACZ,4BACEqG,IAAKrG,EACLgB,MAAa,OAANiH,QAAM,IAANA,GAAmB,QAAb,EAANA,EAAQlC,mBAAW,WAAb,EAAN,EAAqB/E,OACrB,OAANiH,QAAM,IAANA,GAAmB,QAAb,EAANA,EAAQlC,mBAAW,WAAb,EAAN,EAAqB/E,cAqClC,KAEHlC,IACiB,OAAhBA,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBgH,KAAI,SAAC3B,EAAKxF,GAIvB,IAAD,EAHF,IACU,OAARe,SAAQ,IAARA,QAAQ,EAARA,GAAUwI,oBACqB,iBAAvB,OAARxI,SAAQ,IAARA,QAAQ,EAARA,GAAUwI,qBAEH,OAAH/D,QAAG,IAAHA,GAAU,QAAP,EAAHA,EAAK6D,aAAK,WAAP,EAAH,EAAYnC,MAAMzC,SAAS,eAC7B,OAAO,MAID,OAAR1D,SAAQ,IAARA,QAAQ,EAARA,GAAUwD,YACF,OAARxD,SAAQ,IAARA,OAAUwD,UAQZ,IAIuB,MA4CI,MACiB,EA2CK,EAwCD,EAqDvC,kCA4GF,sDArSeiF,IAAO,uBAC1BC,GAAG,oBACHC,OAAO,qBAEV,OAAS,OAAHlE,QAAG,IAAHA,OAAG,EAAHA,EAAKmE,YAEP,oCACE,kBAAC,IAAG,CAACjC,IAAK1H,EAAG2I,GAAG,IAAIC,GAAG,IAAIQ,GAAG,MAC5B,kBAAC,IAAS,KACR,kBAAC,IAAK,CAAChB,UAAU,QACX,OAAH5C,QAAG,IAAHA,GAAU,QAAP,EAAHA,EAAK6D,aAAK,WAAP,EAAH,EAAYnC,OAEf,kBAAC,IAAU,CACT0C,WAAW,eACXC,QAAS,KACTC,UAAW,SAAC7H,GAAO,IAAD,IAEkB,WAA7B,OAAHuD,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtD,YAAI,OAAa,QAAb,EAAT,EAAWkF,mBAAW,WAAnB,EAAH,EAAwBlF,OAExB,CAAC,IAAK,IAAK,IAAK,KAAKuC,SAASxC,EAAEyF,MAC9BzF,EAAEwE,kBAGRsD,qBAAqB,EACrB3H,KAAS,OAAHoD,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKpD,YAAI,WAAN,EAAH,EAAW8E,MACjB7E,MAAOtB,GAAY,OAAHyE,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKpD,YAAI,WAAN,EAAH,EAAW8E,OAC3B4B,SAAU,SAACkB,GAAW,IAAD,EACnBhJ,GAAY,2BACPD,IAAQ,kBACP,OAAHyE,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKpD,YAAI,WAAN,EAAH,EAAW8E,MAAQ8C,QAIzB3I,KAAUrB,EACT,oCACGuB,IACC,0BAAM+G,MAAO,CAAEE,MAAO,QACnBjH,KAKP,yCAMI,OAAHiE,QAAG,IAAHA,OAAG,EAAHA,EAAKyE,UACT,OAAHzE,QAAG,IAAHA,GAAgB,QAAb,EAAHA,EAAK6D,MAAMnC,aAAK,WAAb,EAAH,EAAkBzC,SAAS,WAK3B,kBAAC,IAAG,CAACiD,IAAK1H,EAAG2I,GAAG,IAAIC,GAAG,IAAIQ,GAAG,MAC5B,kBAAC,IAAS,KACR,kBAAC,IAAK,CAAChB,UAAU,QACX,OAAH5C,QAAG,IAAHA,GAAU,QAAP,EAAHA,EAAK6D,aAAK,WAAP,EAAH,EAAYnC,OAEf,kBAAC,IAAM,CACL0C,WAAW,eACXxB,UAAU,iBACVY,QAAS3D,IAAQE,kBACjB2E,eAAgB,SAAClB,GACf,OAAOA,EAAc,MAEvBmB,eAAgB,SAACnB,GACf,OAAOA,EAAc,MAEvB3G,MAAO9B,EACPuI,SAAU,SAACe,GACTrJ,EAAWqJ,GACX7I,GAAY,2BACPD,IAAQ,kBACV,UAAmB,OAAP8I,QAAO,IAAPA,OAAO,EAAPA,EAASzH,WAI3Bf,KAAUrB,EACT,oCACGuB,IACC,0BAAM+G,MAAO,CAAEE,MAAO,QACnBjH,KAKP,wCAKI,OAAHiE,QAAG,IAAHA,GAAgB,QAAb,EAAHA,EAAK6D,MAAMnC,aAAK,WAAb,EAAH,EAAkBzC,SAAS,SAElC,kBAAC,IAAG,CAACiD,IAAK1H,EAAG2I,GAAG,IAAIC,GAAG,IAAIQ,GAAG,MAC5B,kBAAC,IAAS,KACR,kBAAC,IAAK,CAAChB,UAAU,QACX,OAAH5C,QAAG,IAAHA,GAAU,QAAP,EAAHA,EAAK6D,aAAK,WAAP,EAAH,EAAYnC,OAEf,kBAAC,IAAM,CACL8B,QAAc,OAALvD,UAAK,IAALA,SAAK,EAALA,IAAOE,mBACL,OAATpF,QAAS,IAATA,OAAS,EAATA,EAAWqF,SAEbsE,eAAgB,SAAClB,GACf,OAAOA,EAAc,MAEvBmB,eAAgB,SAACnB,GACf,OAAOA,EAAc,MAEvB3G,MAAO1B,GACPmI,SAAU,SAACrD,GACT7E,GAAS6E,GACTzE,GAAY,2BACPD,IAAQ,kBACV,QAAe,OAAL0E,QAAK,IAALA,OAAK,EAALA,EAAOrD,WAIvBf,KAAUrB,EACT,oCACGuB,IACC,0BAAM+G,MAAO,CAAEE,MAAO,QACnBjH,KAKP,wCAKI,OAAHiE,QAAG,IAAHA,GAAgB,QAAb,EAAHA,EAAK6D,MAAMnC,aAAK,WAAb,EAAH,EAAkBzC,SAAS,QAElC,kBAAC,IAAG,CAACiD,IAAK1H,EAAG2I,GAAG,IAAIC,GAAG,IAAIQ,GAAG,MAC5B,kBAAC,IAAS,KACR,kBAAC,IAAK,CAAChB,UAAU,QACX,OAAH5C,QAAG,IAAHA,GAAU,QAAP,EAAHA,EAAK6D,aAAK,WAAP,EAAH,EAAYnC,OAEf,kBAAC,IAAW,CACV2B,UAAQ,EACRuB,SAAS,QACTpB,QAAa,OAAJnD,UAAI,IAAJA,SAAI,EAAJA,IAAMwE,iBACP,OAAN1J,SAAM,IAANA,QAAM,EAANA,GAAQ2J,YACF,OAAN3J,SAAM,IAANA,QAAM,EAANA,GAAQiF,SAEV2E,eAAgB1J,IAAUA,GAC1B2J,SAAUxC,GACVyC,SAAUtC,GACVuC,aAAa,SAsBdrJ,KAAUrB,EACT,oCACGuB,IACC,0BAAM+G,MAAO,CAAEE,MAAO,QACnBjH,KAKP,uCAON,oCACmC,SAA7B,OAAHiE,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtD,YAAI,OAAa,QAAb,EAAT,EAAWkF,mBAAW,WAAnB,EAAH,EAAwBlF,MACvB,oCACE,kBAAC,IAAG,CAACwF,IAAK1H,EAAG2I,GAAG,IAAIC,GAAG,IAAIQ,GAAG,MAC5B,kBAAC,IAAS,CAAC1B,IAAK1H,GACd,kBAAC,IAAK,CAACoI,UAAU,QACX,OAAH5C,QAAG,IAAHA,GAAU,QAAP,EAAHA,EAAK6D,aAAK,WAAP,EAAH,EAAYnC,OAGf,kBAAC,IAAK,CACJ4C,UAAW,SAAC7H,GAAO,IAAD,IAGd,WADG,OAAHuD,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtD,YAAI,OAAa,QAAb,EAAT,EAAWkF,mBAAW,WAAnB,EAAH,EAAwBlF,OAGxB,CAAC,IAAK,IAAK,IAAK,KAAKuC,SACnBxC,EAAEyF,MACCzF,EAAEwE,kBAGXvE,KAAS,OAAHsD,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtD,YAAI,OAAa,QAAb,EAAT,EAAWkF,mBAAW,WAAnB,EAAH,EAAwBlF,KAC9ByI,YAAgB,OAAHnF,QAAG,IAAHA,GAAgB,QAAb,EAAHA,EAAKmF,mBAAW,WAAb,EAAH,EAAkBzD,MAC/B9E,KAAS,OAAHoD,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKpD,YAAI,WAAN,EAAH,EAAW8E,MACjB0D,WACS,OAAPnJ,SAAO,IAAPA,IAAuB,QAAhB,EAAPA,GAASoJ,sBAAc,WAAhB,EAAP,EAAyBD,WAE3BvI,MACEmH,IAAOzI,GAAY,OAAHyE,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKpD,YAAI,WAAN,EAAH,EAAW8E,QACxBuC,GAAU,OAAPhI,SAAO,IAAPA,IAAuB,QAAhB,EAAPA,GAASoJ,sBAAc,WAAhB,EAAP,EAAyBC,UAC5BpB,OACQ,OAAPjI,SAAO,IAAPA,IAAuB,QAAhB,EAAPA,GAASoJ,sBAAc,WAAhB,EAAP,EAAyBD,YAK/B9B,SAAU,SAAC7G,GAAC,eACVD,GACEC,EACG,OAAHuD,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtD,YAAI,OAAa,QAAb,EAAT,EAAWkF,mBAAW,WAAnB,EAAH,EAAwBlF,KACxBlC,MAILqB,KAAUrB,EACT,oCACGuB,IACC,0BAAM+G,MAAO,CAAEE,MAAO,QACnBjH,KAKP,wCAMR,oCACE,kBAAC,IAAG,CAACmG,IAAK1H,EAAG2I,GAAG,IAAIC,GAAG,IAAIQ,GAAG,MAC5B,kBAAC,IAAS,CAAC1B,IAAK1H,GACd,kBAAC,IAAK,CAACoI,UAAU,QACX,OAAH5C,QAAG,IAAHA,GAAU,QAAP,EAAHA,EAAK6D,aAAK,WAAP,EAAH,EAAYnC,OAGf,kBAAC,IAAK,CACJ4C,UAAW,SAAC7H,GAAO,IAAD,IAGd,WADG,OAAHuD,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtD,YAAI,OAAa,QAAb,EAAT,EAAWkF,mBAAW,WAAnB,EAAH,EAAwBlF,OAGxB,CAAC,IAAK,IAAK,IAAK,KAAKuC,SACnBxC,EAAEyF,MACCzF,EAAEwE,kBAGXvE,KAAS,OAAHsD,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtD,YAAI,OAAa,QAAb,EAAT,EAAWkF,mBAAW,WAAnB,EAAH,EAAwBlF,KAC9ByI,YAAgB,OAAHnF,QAAG,IAAHA,GAAgB,QAAb,EAAHA,EAAKmF,mBAAW,WAAb,EAAH,EAAkBzD,MAC/B9E,KAAS,OAAHoD,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKpD,YAAI,WAAN,EAAH,EAAW8E,MACjB7E,MAAOtB,GAAY,OAAHyE,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKpD,YAAI,WAAN,EAAH,EAAW8E,OAC3B4B,SAAU,SAAC7G,GAAC,eACVD,GACEC,EACG,OAAHuD,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtD,YAAI,OAAa,QAAb,EAAT,EAAWkF,mBAAW,WAAnB,EAAH,EAAwBlF,KACxBlC,MAILqB,KAAUrB,EACT,oCACGuB,IACC,0BAAM+G,MAAO,CAAEE,MAAO,QACnBjH,KAKP,yCAWd,qCACQ,OAAHiE,QAAG,IAAHA,OAAG,EAAHA,EAAKuF,QACN,oCACE,kBAAC,IAAG,CAACrD,IAAK1H,EAAG2I,GAAG,IAAIC,GAAG,IAAIQ,GAAG,MAC5B,kBAAC,IAAS,CAAC1B,IAAK1H,GACd,kBAAC,IAAK,CAACoI,UAAU,QACX,OAAH5C,QAAG,IAAHA,GAAU,QAAP,EAAHA,EAAK6D,aAAK,WAAP,EAAH,EAAYnC,OAGf,kBAAC,IAAK,CACJ8D,QAAS,SAAC/I,GACRA,EAAEwE,kBAEJqD,UAAW,SAAC7H,GAAO,IAAD,IAEkB,WAA7B,OAAHuD,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtD,YAAI,OAAa,QAAb,EAAT,EAAWkF,mBAAW,WAAnB,EAAH,EAAwBlF,OAExB,CAAC,IAAK,IAAK,IAAK,KAAKuC,SAASxC,EAAEyF,MAC9BzF,EAAEwE,kBAGRvE,KAAS,OAAHsD,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtD,YAAI,OAAa,QAAb,EAAT,EAAWkF,mBAAW,WAAnB,EAAH,EAAwBlF,KAC9ByI,YAAgB,OAAHnF,QAAG,IAAHA,GAAgB,QAAb,EAAHA,EAAKmF,mBAAW,WAAb,EAAH,EAAkBzD,MAC/B9E,KAAS,OAAHoD,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKpD,YAAI,WAAN,EAAH,EAAW8E,MACjB7E,MAAOtB,GAAY,OAAHyE,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKpD,YAAI,WAAN,EAAH,EAAW8E,OAC3B4B,SAAU,SAAC7G,GAAC,eACVD,GACEC,EACG,OAAHuD,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtD,YAAI,OAAa,QAAb,EAAT,EAAWkF,mBAAW,WAAnB,EAAH,EAAwBlF,KACxBlC,MAILqB,KAAUrB,EACT,oCACGuB,IACC,0BAAM+G,MAAO,CAAEE,MAAO,QACnBjH,KAKP,wCAMR,kBAAC,IAAG,CAACmG,IAAK1H,EAAG2I,GAAG,IAAIC,GAAG,IAAIQ,GAAG,MAC5B,kBAAC,IAAS,CAAC1B,IAAK1H,IACV,OAAHwF,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtD,YAAI,OAAa,QAAb,EAAT,EAAWkF,mBAAW,WAAnB,EAAH,EAAwBlF,OACO,SAA7B,OAAHsD,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtD,YAAI,OAAa,QAAb,GAAT,EAAWkF,mBAAW,YAAnB,EAAH,GAAwBlF,MACtB,oCACE,kBAAC,IAAK,CAACkG,UAAU,QACX,OAAH5C,QAAG,IAAHA,GAAU,QAAP,GAAHA,EAAK6D,aAAK,YAAP,EAAH,GAAYnC,OAGf,kBAAC,IAAK,CACJ+D,UAAQ,EACR7C,UAAU,eACVlG,KAAS,OAAHsD,QAAG,IAAHA,GAAS,QAAN,GAAHA,EAAKtD,YAAI,QAAa,QAAb,GAAT,GAAWkF,mBAAW,YAAnB,EAAH,GAAwBlF,KAC9ByI,YAAgB,OAAHnF,QAAG,IAAHA,GAAgB,QAAb,GAAHA,EAAKmF,mBAAW,YAAb,EAAH,GAAkBzD,MAC/B9E,KAAS,OAAHoD,QAAG,IAAHA,GAAS,QAAN,GAAHA,EAAKpD,YAAI,YAAN,EAAH,GAAW8E,MAEjB4B,SAAU,SAAC7G,GAAO,IAAD,KA/uB5B,SAACA,EAAGC,EAAMlC,GACjC,MAAiCiC,EAAEE,OAA3BC,EAAI,EAAJA,KACJ8I,GADe,EAAL7I,MAAc,EAAPC,QACL6I,MAAMC,KAAKnJ,EAAEE,OAAOK,QACpClB,GAAStB,GACTgB,GAAY,2BACPD,IAAQ,kBACVqB,EAAO8I,KAgvB0BG,CACEpJ,EACG,OAAHuD,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtD,YAAI,OAAa,QAAb,EAAT,EAAWkF,mBAAW,OAAtB,EAAwBlF,KACxBlC,MAILqB,KAAUrB,EACT,oCACGuB,IACC,0BAAM+G,MAAO,CAAEE,MAAO,QACnBjH,KAKP,sCAIJ,oCACE,kBAAC,IAAK,CAAC6G,UAAU,QACX,OAAH5C,QAAG,IAAHA,GAAU,QAAP,GAAHA,EAAK6D,aAAK,YAAP,EAAH,GAAYnC,OAGf,kBAAC,IAAK,CACJkB,UAAU,eACV0B,UAAW,SAAC7H,GAAO,IAAD,IAGd,WADG,OAAHuD,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtD,YAAI,OAAa,QAAb,EAAT,EAAWkF,mBAAW,WAAnB,EAAH,EAAwBlF,OAGxB,CAAC,IAAK,IAAK,IAAK,KAAKuC,SACnBxC,EAAEyF,MACCzF,EAAEwE,kBAGXvE,KAAS,OAAHsD,QAAG,IAAHA,GAAS,QAAN,GAAHA,EAAKtD,YAAI,QAAa,QAAb,GAAT,GAAWkF,mBAAW,YAAnB,EAAH,GAAwBlF,KAC9ByI,YAAgB,OAAHnF,QAAG,IAAHA,GAAgB,QAAb,GAAHA,EAAKmF,mBAAW,YAAb,EAAH,GAAkBzD,MAC/B9E,KAAS,OAAHoD,QAAG,IAAHA,GAAS,QAAN,GAAHA,EAAKpD,YAAI,YAAN,EAAH,GAAW8E,MACjB7E,MAAOtB,GAAY,OAAHyE,QAAG,IAAHA,GAAS,QAAN,GAAHA,EAAKpD,YAAI,YAAN,EAAH,GAAW8E,OAC3B4B,SAAU,SAAC7G,GAAO,IAAD,IAOfD,GACEC,EACG,OAAHuD,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtD,YAAI,OAAa,QAAb,EAAT,EAAWkF,mBAAW,WAAnB,EAAH,EAAwBlF,KACxBlC,MAILqB,KAAUrB,EACT,oCACGuB,IACC,0BAAM+G,MAAO,CAAEE,MAAO,QACnBjH,KAKP,8CAyDxB,kBAAC,IAAG,CAAC6G,UAAU,QACb,kBAAC,IAAG,CAACO,GAAG,IAAIC,GAAG,IAAIQ,GAAG,IAAIhB,UAAU,aAClC,kBAAC,IAAK,CAACA,UAAU,QAAO,UACxB,yBACEA,UAAU,mBACVU,SAAU,SAAC7G,GACTjB,GAAY,2BACPD,IAAQ,kBACV,SAAWkB,EAAEE,OAAOE,WAGzB,2BACEiG,MAAO,CAAEgD,YAAa,OACtBhJ,QAA6B,WAAZ,OAARvB,SAAQ,IAARA,QAAQ,EAARA,GAAUwG,QACnBrF,KAAK,QACLE,KAAK,SACLC,MAAM,WAER,0BAAMiG,MAAO,CAAEgD,YAAa,SAAU,UAEtC,2BACEhD,MAAO,CAAEgD,YAAa,OACtBpJ,KAAK,QACLI,QAA6B,aAAZ,OAARvB,SAAQ,IAARA,QAAQ,EAARA,GAAUwG,QACnBnF,KAAK,SACLC,MAAM,aAER,0BAAMiG,MAAO,CAAEgD,YAAa,QAAS,eAK3C,kBAAC,IAAG,KACF,kBAAC,IAAOC,OAAM,CACZ/C,MAAM,UACNtG,KAAK,SACLkG,UAAU,kBAAiB,YAKjC,kBAAC,IAAI,CAACA,UAAU,MAAMM,SAAUlC,IAC9B,6BACA,kBAAC,IAAG,KACF,kBAAC,IAAG,CAACmC,GAAG,KAAKC,GAAG,KAAKQ,GAAG,MACtB,kBAAC,IAAK,KAAC,OAET,kBAAC,IAAG,CAACT,GAAG,IAAIC,GAAG,IAAIQ,GAAG,MACpB,kBAAC,IAAS,KACR,kBAAC,IAAK,KAAC,eAEP,kBAAC,IAAK,CACJhB,UAAU,eACVlG,KAAK,OACLyI,YAAY,GACZvI,KAAK,aACL0G,SAAU,SAAC7G,GACTvB,GAAcuB,EAAEE,OAAOK,MAAM,UAMvC,kBAAC,IAAG,KACF,kBAAC,IAAO+I,OAAM,CACZ/C,MAAM,UACNtG,KAAK,SACLkG,UAAU,kBAAiB,kB,iCCj/B7C,2EAEIoD,EAAY,CAAC,YAAa,YAAa,MAAO,WAAY,QAAS,SAAU,OAK7EC,EAAY,CACdC,SAAUC,IAAUC,KACpBC,IAAKF,IAAUG,KACfC,MAAOJ,IAAUG,KACjBE,OAAQL,IAAUG,KAClBG,SAAUN,IAAUG,KACpBI,IAAKC,cACL/D,UAAWuD,IAAUS,OACrBC,UAAWV,IAAUW,QAMnBC,EAAY,SAAmBC,GACjC,IAAIpE,EAAYoE,EAAMpE,UAClBiE,EAAYG,EAAMH,UAClBR,EAAMW,EAAMX,IACZI,EAAWO,EAAMP,SACjBF,EAAQS,EAAMT,MACdC,EAASQ,EAAMR,OACfS,EAAMD,EAAMN,IACZQ,EAAaC,YAA8BH,EAAOhB,GAElDoB,EAAUC,0BAAgBC,IAAW1E,IAAWyD,GAAM,MAAeE,EAAQ,aAAe,gBAAcA,IAASC,IAAS,uBAA6BD,IAASE,IAAW,YAAqBI,GAMtM,MAJY,aAARI,IACFC,EAAWT,SAAWA,GAGJc,IAAMC,cAAcP,EAAKQ,YAAS,GAAIP,EAAY,CACpEtE,UAAWwE,MAIfL,EAAUd,UAAYA,EACtBc,EAAUW,aA1BS,CACjBhB,IAAK,OA0BQK","file":"static/js/361.ad3459dc.chunk.js","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\r\nimport xmlJs from \"xml-js\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Form,\r\n  Row,\r\n  Input,\r\n  Label,\r\n  Button,\r\n  FormGroup,\r\n  CustomInput,\r\n  Badge,\r\n} from \"reactstrap\";\r\nimport { history } from \"../../../../history\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Country, State, City } from \"country-state-city\";\r\nimport Select from \"react-select\";\r\nimport moment from \"moment-timezone\";\r\nimport { Route, useHistory, useParams } from \"react-router-dom\";\r\n\r\nimport swal from \"sweetalert\";\r\nimport \"../../../../../src/layouts/assets/scss/pages/users.scss\";\r\n\r\nimport {\r\n  Createtransportersave,\r\n  Get_RoleList,\r\n  _BulkUpload,\r\n  _Get,\r\n  _GetList,\r\n  _Put,\r\n} from \"../../../../ApiEndPoint/ApiCalling\";\r\n\r\nimport \"../../../../assets/scss/pages/users.scss\";\r\nimport UserContext from \"../../../../context/Context\";\r\n\r\nimport {\r\n  Bulk_Upload_Customer,\r\n  Create_transporter_xmlView,\r\n  Update_TransporterByID,\r\n  View_TransporterByID,\r\n} from \"../../../../ApiEndPoint/Api\";\r\nimport Multiselect from \"multiselect-react-dropdown\";\r\n\r\nconst CreateCustomer = () => {\r\n  const [CreatAccountView, setCreatAccountView] = useState([]);\r\n  const [RoleList, setRoleList] = useState([]);\r\n  const [Countries, setCountry] = useState({});\r\n  const [BulkImport, setBulkImport] = useState(null);\r\n  const [States, setState] = useState({});\r\n  const [Cities, setCities] = useState([]);\r\n  const [formData, setFormData] = useState({});\r\n  const [dropdownValue, setdropdownValue] = useState([]);\r\n  const [transporterType, settransporterType] = useState(\"Create\");\r\n  const [index, setindex] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const Context = useContext(UserContext);\r\n  let history = useHistory();\r\n  let Params = useParams();\r\n\r\n  const handleFileChange = (e, type, i) => {\r\n    const { name, value, checked } = e.target;\r\n    let allimages = Array.from(e.target.files);\r\n    setindex(i);\r\n    setFormData({\r\n      ...formData,\r\n      [name]: allimages,\r\n    });\r\n  };\r\n\r\n  const handleInputChange = (e, type, i) => {\r\n    const { name, value, checked } = e.target;\r\n    setindex(i);\r\n    if (type == \"checkbox\") {\r\n      if (checked) {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      } else {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      }\r\n    } else {\r\n      if (type == \"number\") {\r\n        if (/^\\d{0,10}$/.test(value)) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          setError(\"\");\r\n        }\r\n      } else if (type == \"file\") {\r\n        if (e.target.files) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: e.target.files[0],\r\n          });\r\n        }\r\n      } else {\r\n        if (value.length <= 10) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n\r\n          setError(\"\");\r\n        } else {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const date = new Date(position.timestamp);\r\n          const CurentTime = date.toLocaleString();\r\n          formData.Geotagging = `${position.coords.latitude},${position.coords.longitude}`;\r\n        },\r\n        (error) => {\r\n          swal(`Error: ${error}`);\r\n        },\r\n        { timeout: 10000, enableHighAccuracy: true }\r\n      );\r\n    } else {\r\n      swal(`Error: Geolocation not found`);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let userdata = JSON.parse(localStorage.getItem(\"userData\"));\r\n    Get_RoleList(userdata?._id, userdata?.database)\r\n      .then((res) => {\r\n        let ShowList = res?.Role?.filter((item, i) =>\r\n          item?.roleName?.toLowerCase()?.includes(\"transporter\")\r\n        );\r\n        setRoleList(ShowList);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        swal(\"Roles List Not found\");\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(Params?.id);\r\n    if (Params?.id == 0) {\r\n      settransporterType(\"Create\");\r\n    } else {\r\n      settransporterType(\"Edit\");\r\n\r\n      _Get(View_TransporterByID, Params?.id)\r\n        .then((res) => {\r\n          let transporter = res?.Transporter[0];\r\n          transporter.Duedate = transporter?.Duedate?.split(\"T\")[0];\r\n          setFormData(transporter);\r\n          if (transporter?.Country) {\r\n            let countryselected = Country?.getAllCountries()?.filter(\r\n              (ele, i) => ele?.name == transporter?.Country\r\n            );\r\n            setCountry(countryselected);\r\n            if (transporter?.State) {\r\n              let stateselected = State?.getStatesOfCountry(\r\n                countryselected[0]?.isoCode\r\n              )?.filter((ele, i) => ele?.name == transporter?.State);\r\n              setState(stateselected);\r\n              console.log(stateselected);\r\n              if (transporter?.City) {\r\n                // let cityselected = City.getCitiesOfState(\r\n                //   stateselected[0]?.countryCode,\r\n                //   stateselected[0]?.isoCode\r\n                // )?.filter((ele, i) => ele?.name == transporter?.City);\r\n                setCities(transporter?.City);\r\n              }\r\n            }\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    _GetList(Create_transporter_xmlView)\r\n      .then((res) => {\r\n        const jsonData = xmlJs.xml2json(res.data, {\r\n          compact: true,\r\n          spaces: 2,\r\n        });\r\n\r\n        console.log(JSON.parse(jsonData)?.CreateCustomer);\r\n        setCreatAccountView(JSON.parse(jsonData)?.CreateCustomer?.input);\r\n\r\n        setdropdownValue(JSON.parse(jsonData)?.CreateCustomer?.MyDropDown);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        swal(\"Something Went Wrong\");\r\n      });\r\n  }, []);\r\n\r\n  const submitHandler = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (BulkImport !== null || BulkImport != undefined) {\r\n      let formdata = new FormData();\r\n      formdata.append(\"file\", BulkImport);\r\n\r\n      await _BulkUpload(Bulk_Upload_Customer, formdata)\r\n        .then((res) => {\r\n          swal(`${res?.message}`);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          swal(\"Something Went Wrong\");\r\n        });\r\n    } else {\r\n      let userdata = JSON.parse(localStorage.getItem(\"userData\"));\r\n      let formdata = new FormData();\r\n\r\n      formdata.append(\r\n        `${dropdownValue?.dropdown?.name?._text}`,\r\n        formData[dropdownValue?.dropdown?.name?._text]\r\n      );\r\n      CreatAccountView?.map((ele, i) => {\r\n        if (ele?.type?._attributes?.type == \"text\") {\r\n          if (ele?.name?._text == \"City\") {\r\n            formdata.append(`${ele?.name?._text}`, JSON.stringify(Cities));\r\n          } else {\r\n            formdata.append(`${ele?.name._text}`, formData[ele?.name?._text]);\r\n          }\r\n        } else if (ele?.type?._attributes?.type == \"file\") {\r\n          if (ele?.name?._text == \"Shopphoto\") {\r\n            formData[ele?.name?._text]?.map((val, index) => {\r\n              formdata.append(\"file\", formData[ele?.name?._text][index]);\r\n            });\r\n          }\r\n          if (ele?.name?._text == \"photo\") {\r\n            formData[ele?.name?._text]?.map((val, index) => {\r\n              formdata.append(\"files\", formData[ele?.name?._text][index]);\r\n            });\r\n          }\r\n        } else {\r\n          formdata.append(`${ele?.name?._text}`, formData[ele?.name?._text]);\r\n        }\r\n      });\r\n\r\n      formdata.append(\"status\", formData?.status);\r\n      formdata.append(\"database\", userdata?.database);\r\n      formdata.append(\"rolename\", formData?.rolename);\r\n\r\n      formdata.forEach((value, key) => {\r\n        console.log(key, value);\r\n      });\r\n\r\n      if (error) {\r\n        // swal(\"Error occured while Entering Details\");\r\n      } else {\r\n        if (Params?.id == \"0\") {\r\n          Createtransportersave(formdata)\r\n            .then((res) => {\r\n              console.log(res);\r\n\r\n              if (res.status) {\r\n                history.goBack();\r\n                swal(\"Transporter Created Successfully\");\r\n              }\r\n            })\r\n            .catch((err) => {\r\n              console.log(err.response);\r\n              swal(\"Please Fill correct details\");\r\n            });\r\n        } else {\r\n          // Update_TransporterByID\r\n          _Put(Update_TransporterByID, Params?.id, formdata)\r\n            .then((res) => {\r\n              console.log(res);\r\n              if (res.status) {\r\n                history.goBack();\r\n                swal(\"Transporter Updated Successfully\");\r\n              }\r\n            })\r\n            .catch((err) => {\r\n              console.log(err);\r\n            });\r\n        }\r\n      }\r\n    }\r\n  };\r\n  const onSelect1 = (selectedList, selectedItem) => {\r\n    setCities(selectedList);\r\n    console.log(selectedList);\r\n  };\r\n  const onRemove1 = (selectedList, selectedItem) => {\r\n    console.log(selectedList);\r\n    setCities(selectedList);\r\n  };\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Card>\r\n          <Row className=\"m-2\">\r\n            <Col>\r\n              <h1 className=\"float-left\">\r\n                {transporterType && transporterType} Transporter\r\n              </h1>\r\n            </Col>\r\n            <Col>\r\n              <div className=\"float-right\">\r\n                <Route\r\n                  render={({ history }) => (\r\n                    <Button\r\n                      style={{ cursor: \"pointer\" }}\r\n                      className=\"float-right mr-1\"\r\n                      color=\"primary\"\r\n                      onClick={() => history.goBack()}>\r\n                      Back\r\n                    </Button>\r\n                  )}\r\n                />\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          {/* <hr /> */}\r\n\r\n          <CardBody>\r\n            <Form className=\"m-1\" onSubmit={submitHandler}>\r\n              <Row className=\"mb-2\">\r\n                <Col lg=\"4\" md=\"4\">\r\n                  <FormGroup>\r\n                    <Label className=\"mb-1\">Role List *</Label>\r\n                    <CustomInput\r\n                      required\r\n                      type=\"select\"\r\n                      name=\"rolename\"\r\n                      value={formData[\"rolename\"]}\r\n                      onChange={(e) => {\r\n                        const selected = e.target.options[\r\n                          e.target.selectedIndex\r\n                        ]\r\n                          .getAttribute(\"data-name\")\r\n                          ?.split(\" \");\r\n\r\n                        setFormData({\r\n                          ...formData,\r\n                          [\"rolename\"]: e.target.value,\r\n                          [\"roleName\"]: selected[1],\r\n                        });\r\n                      }}>\r\n                      <option>--select Role--</option>\r\n                      {RoleList &&\r\n                        RoleList?.length &&\r\n                        RoleList?.map((ele, i) => {\r\n                          return (\r\n                            <option\r\n                              data-name={`${ele?.position} ${ele?.roleName}`}\r\n                              value={ele?._id}>\r\n                              {ele?.roleName}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                    </CustomInput>\r\n                  </FormGroup>\r\n                </Col>\r\n                {dropdownValue && dropdownValue ? (\r\n                  <>\r\n                    <Col lg=\"4\" md=\"4\" sm=\"12\">\r\n                      <FormGroup>\r\n                        <Label className=\"mb-1\">\r\n                          {dropdownValue?.dropdown?.label?._text &&\r\n                            dropdownValue?.dropdown?.label?._text}{\" \"}\r\n                          *\r\n                        </Label>\r\n                        <CustomInput\r\n                          required\r\n                          type=\"select\"\r\n                          name={dropdownValue?.dropdown?.name?._text}\r\n                          value={formData[dropdownValue?.dropdown?.name?._text]}\r\n                          onChange={handleInputChange}>\r\n                          <option value=\"\">--Select --</option>\r\n                          {dropdownValue?.dropdown?.option?.map(\r\n                            (option, index) => (\r\n                              <option\r\n                                key={index}\r\n                                value={option?._attributes?.value}>\r\n                                {option?._attributes?.value}\r\n                              </option>\r\n                            )\r\n                          )}\r\n                        </CustomInput>\r\n                      </FormGroup>\r\n                    </Col>\r\n                    {/* {dropdownValue?.map((ele, i) => {\r\n                      return (\r\n                        <>\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label className=\"mb-1\">\r\n                                {ele?.dropdown?.label?._text &&\r\n                                  ele?.dropdown?.label?._text}\r\n                              </Label>\r\n                              <CustomInput\r\n                                required\r\n                                type=\"select\"\r\n                                name={ele?.dropdown?.name?._text}\r\n                                value={formData[ele?.dropdown?.name?._text]}\r\n                                onChange={handleInputChange}>\r\n                                <option value=\"\">--Select --</option>\r\n                                {ele?.dropdown?.option?.map((option, index) => (\r\n                                  <option\r\n                                    key={index}\r\n                                    value={option?._attributes?.value}>\r\n                                    {option?._attributes?.value}\r\n                                  </option>\r\n                                ))}\r\n                              </CustomInput>\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </>\r\n                      );\r\n                    })} */}\r\n                  </>\r\n                ) : null}\r\n\r\n                {CreatAccountView &&\r\n                  CreatAccountView?.map((ele, i) => {\r\n                    if (\r\n                      formData?.Registration_Type &&\r\n                      formData?.Registration_Type == \"Unregistered\"\r\n                    ) {\r\n                      if (ele?.label?._text.includes(\"GST Number\")) {\r\n                        return null;\r\n                      }\r\n                    }\r\n                    if (\r\n                      formData?.roleName &&\r\n                      formData?.roleName == \"Transporter\"\r\n                    ) {\r\n                    }\r\n                    {\r\n                      /* console.log(Context?.UserInformatio?.dateFormat); */\r\n                    }\r\n                    // console.log(Countries);\r\n                    // console.log(States);\r\n                    const convertedTime = moment(\"2022-08-05T12:00:00\")\r\n                      .tz(\"America/New_York\")\r\n                      .format(\"D MMM, YYYY HH:mm\");\r\n\r\n                    if (!!ele?.phoneinput) {\r\n                      return (\r\n                        <>\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label className=\"mb-1\">\r\n                                {ele?.label?._text}\r\n                              </Label>\r\n                              <PhoneInput\r\n                                inputClass=\"myphoneinput\"\r\n                                country={\"us\"}\r\n                                onKeyDown={(e) => {\r\n                                  if (\r\n                                    ele?.type?._attributes?.type == \"number\"\r\n                                  ) {\r\n                                    [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                      e.preventDefault();\r\n                                  }\r\n                                }}\r\n                                countryCodeEditable={false}\r\n                                name={ele?.name?._text}\r\n                                value={formData[ele?.name?._text]}\r\n                                onChange={(phone) => {\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [ele?.name?._text]: phone,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </>\r\n                      );\r\n                    } else if (!!ele?.library) {\r\n                      if (ele?.label._text?.includes(\"ountry\")) {\r\n                        {\r\n                          /* console.log(ele); */\r\n                        }\r\n                        return (\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label className=\"mb-1\">\r\n                                {ele?.label?._text}\r\n                              </Label>\r\n                              <Select\r\n                                inputClass=\"countryclass\"\r\n                                className=\"countryclassnw\"\r\n                                options={Country.getAllCountries()}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={Countries}\r\n                                onChange={(country) => {\r\n                                  setCountry(country);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"Country\"]: country?.name,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else if (ele?.label._text?.includes(\"tate\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label className=\"mb-1\">\r\n                                {ele?.label?._text}\r\n                              </Label>\r\n                              <Select\r\n                                options={State?.getStatesOfCountry(\r\n                                  Countries?.isoCode\r\n                                )}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={States}\r\n                                onChange={(State) => {\r\n                                  setState(State);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"State\"]: State?.name,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else if (ele?.label._text?.includes(\"ity\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label className=\"mb-1\">\r\n                                {ele?.label?._text}\r\n                              </Label>\r\n                              <Multiselect\r\n                                required\r\n                                isObject=\"false\"\r\n                                options={City?.getCitiesOfState(\r\n                                  States?.countryCode,\r\n                                  States?.isoCode\r\n                                )} // Options to display in the dropdown\r\n                                selectedValues={Cities && Cities} // Preselected value to persist in dropdown\r\n                                onSelect={onSelect1} // Function will trigger on select event\r\n                                onRemove={onRemove1} // Function will trigger on remove event\r\n                                displayValue=\"name\" // Property name to display in the dropdown options\r\n                              />\r\n                              {/* <Select\r\n                                options={City?.getCitiesOfState(\r\n                                  States?.countryCode,\r\n                                  States?.isoCode\r\n                                )}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={Cities}\r\n                                onChange={(City) => {\r\n                                  setCities(City);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"City\"]: City?.name,\r\n                                  });\r\n                                }}  \r\n                              /> */}\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else {\r\n                        return (\r\n                          <>\r\n                            {ele?.type?._attributes?.type == \"date\" ? (\r\n                              <>\r\n                                <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                  <FormGroup key={i}>\r\n                                    <Label className=\"mb-1\">\r\n                                      {ele?.label?._text}\r\n                                    </Label>\r\n\r\n                                    <Input\r\n                                      onKeyDown={(e) => {\r\n                                        if (\r\n                                          ele?.type?._attributes?.type ==\r\n                                          \"number\"\r\n                                        ) {\r\n                                          [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                            e.key\r\n                                          ) && e.preventDefault();\r\n                                        }\r\n                                      }}\r\n                                      type={ele?.type?._attributes?.type}\r\n                                      placeholder={ele?.placeholder?._text}\r\n                                      name={ele?.name?._text}\r\n                                      dateFormat={\r\n                                        Context?.UserInformatio?.dateFormat\r\n                                      }\r\n                                      value={\r\n                                        moment(formData[ele?.name?._text])\r\n                                          .tz(Context?.UserInformatio?.timeZone)\r\n                                          .format(\r\n                                            Context?.UserInformatio?.dateFormat\r\n                                          )\r\n                                        // formData[ele?.name?._text]\r\n                                      }\r\n                                      // value={formData[ele?.name?._text]}\r\n                                      onChange={(e) =>\r\n                                        handleInputChange(\r\n                                          e,\r\n                                          ele?.type?._attributes?.type,\r\n                                          i\r\n                                        )\r\n                                      }\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </FormGroup>\r\n                                </Col>\r\n                              </>\r\n                            ) : (\r\n                              <>\r\n                                <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                  <FormGroup key={i}>\r\n                                    <Label className=\"mb-1\">\r\n                                      {ele?.label?._text}\r\n                                    </Label>\r\n\r\n                                    <Input\r\n                                      onKeyDown={(e) => {\r\n                                        if (\r\n                                          ele?.type?._attributes?.type ==\r\n                                          \"number\"\r\n                                        ) {\r\n                                          [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                            e.key\r\n                                          ) && e.preventDefault();\r\n                                        }\r\n                                      }}\r\n                                      type={ele?.type?._attributes?.type}\r\n                                      placeholder={ele?.placeholder?._text}\r\n                                      name={ele?.name?._text}\r\n                                      value={formData[ele?.name?._text]}\r\n                                      onChange={(e) =>\r\n                                        handleInputChange(\r\n                                          e,\r\n                                          ele?.type?._attributes?.type,\r\n                                          i\r\n                                        )\r\n                                      }\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </FormGroup>\r\n                                </Col>\r\n                              </>\r\n                            )}\r\n                          </>\r\n                        );\r\n                      }\r\n                    } else {\r\n                      return (\r\n                        <>\r\n                          {!!ele?.number ? (\r\n                            <>\r\n                              <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                <FormGroup key={i}>\r\n                                  <Label className=\"mb-1\">\r\n                                    {ele?.label?._text}\r\n                                  </Label>\r\n\r\n                                  <Input\r\n                                    onWheel={(e) => {\r\n                                      e.preventDefault(); // Prevent the mouse wheel scroll event\r\n                                    }}\r\n                                    onKeyDown={(e) => {\r\n                                      if (\r\n                                        ele?.type?._attributes?.type == \"number\"\r\n                                      ) {\r\n                                        [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                          e.preventDefault();\r\n                                      }\r\n                                    }}\r\n                                    type={ele?.type?._attributes?.type}\r\n                                    placeholder={ele?.placeholder?._text}\r\n                                    name={ele?.name?._text}\r\n                                    value={formData[ele?.name?._text]}\r\n                                    onChange={(e) =>\r\n                                      handleInputChange(\r\n                                        e,\r\n                                        ele?.type?._attributes?.type,\r\n                                        i\r\n                                      )\r\n                                    }\r\n                                  />\r\n                                  {index === i ? (\r\n                                    <>\r\n                                      {error && (\r\n                                        <span style={{ color: \"red\" }}>\r\n                                          {error}\r\n                                        </span>\r\n                                      )}\r\n                                    </>\r\n                                  ) : (\r\n                                    <></>\r\n                                  )}\r\n                                </FormGroup>\r\n                              </Col>\r\n                            </>\r\n                          ) : (\r\n                            <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                              <FormGroup key={i}>\r\n                                {ele?.type?._attributes?.type &&\r\n                                ele?.type?._attributes?.type == \"file\" ? (\r\n                                  <>\r\n                                    <Label className=\"mb-1\">\r\n                                      {ele?.label?._text}\r\n                                    </Label>\r\n\r\n                                    <Input\r\n                                      multiple\r\n                                      className=\"form-control\"\r\n                                      type={ele?.type?._attributes?.type}\r\n                                      placeholder={ele?.placeholder?._text}\r\n                                      name={ele?.name?._text}\r\n                                      //   value={formData[ele?.name?._text]}\r\n                                      onChange={(e) => {\r\n                                        // const value = e.target.value;\r\n                                        // // Use regular expression to allow only numbers\r\n                                        // const numericValue = value.replace(\r\n                                        //   /\\D/g,\r\n                                        //   \"\"\r\n                                        // );\r\n                                        handleFileChange(\r\n                                          e,\r\n                                          ele?.type?._attributes?.type,\r\n                                          i\r\n                                        );\r\n                                      }}\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </>\r\n                                ) : (\r\n                                  <>\r\n                                    <Label className=\"mb-1\">\r\n                                      {ele?.label?._text}\r\n                                    </Label>\r\n\r\n                                    <Input\r\n                                      className=\"form-control\"\r\n                                      onKeyDown={(e) => {\r\n                                        if (\r\n                                          ele?.type?._attributes?.type ==\r\n                                          \"number\"\r\n                                        ) {\r\n                                          [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                            e.key\r\n                                          ) && e.preventDefault();\r\n                                        }\r\n                                      }}\r\n                                      type={ele?.type?._attributes?.type}\r\n                                      placeholder={ele?.placeholder?._text}\r\n                                      name={ele?.name?._text}\r\n                                      value={formData[ele?.name?._text]}\r\n                                      onChange={(e) => {\r\n                                        // const value = e.target.value;\r\n                                        // // Use regular expression to allow only numbers\r\n                                        // const numericValue = value.replace(\r\n                                        //   /\\D/g,\r\n                                        //   \"\"\r\n                                        // );\r\n                                        handleInputChange(\r\n                                          e,\r\n                                          ele?.type?._attributes?.type,\r\n                                          i\r\n                                        );\r\n                                      }}\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </>\r\n                                )}\r\n\r\n                                {/* <Label className=\"mb-1\">\r\n                                  {ele?.label?._text}\r\n                                </Label>\r\n\r\n                                <Input\r\n                                  className=\"form-control\"\r\n                                  onKeyDown={(e) => {\r\n                                    if (\r\n                                      ele?.type?._attributes?.type == \"number\"\r\n                                    ) {\r\n                                      [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                        e.preventDefault();\r\n                                    }\r\n                                  }}\r\n                                  type={ele?.type?._attributes?.type}\r\n                                  placeholder={ele?.placeholder?._text}\r\n                                  name={ele?.name?._text}\r\n                                  value={formData[ele?.name?._text]}\r\n                                  onChange={(e) => {\r\n                                    // const value = e.target.value;\r\n                                    // // Use regular expression to allow only numbers\r\n                                    // const numericValue = value.replace(\r\n                                    //   /\\D/g,\r\n                                    //   \"\"\r\n                                    // );\r\n                                    handleInputChange(\r\n                                      e,\r\n                                      ele?.type?._attributes?.type,\r\n                                      i\r\n                                    );\r\n                                  }}\r\n                                />\r\n                                {index === i ? (\r\n                                  <>\r\n                                    {error && (\r\n                                      <span style={{ color: \"red\" }}>\r\n                                        {error}\r\n                                      </span>\r\n                                    )}\r\n                                  </>\r\n                                ) : (\r\n                                  <></>\r\n                                )} */}\r\n                              </FormGroup>\r\n                            </Col>\r\n                          )}\r\n                        </>\r\n                      );\r\n                    }\r\n                  })}\r\n              </Row>\r\n\r\n              <Row className=\"mt-2\">\r\n                <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2 mt-1\">\r\n                  <Label className=\"mb-0\">Status</Label>\r\n                  <div\r\n                    className=\"form-label-group\"\r\n                    onChange={(e) => {\r\n                      setFormData({\r\n                        ...formData,\r\n                        [\"status\"]: e.target.value,\r\n                      });\r\n                    }}>\r\n                    <input\r\n                      style={{ marginRight: \"3px\" }}\r\n                      checked={formData?.status == \"Active\"}\r\n                      type=\"radio\"\r\n                      name=\"status\"\r\n                      value=\"Active\"\r\n                    />\r\n                    <span style={{ marginRight: \"20px\" }}>Active</span>\r\n\r\n                    <input\r\n                      style={{ marginRight: \"3px\" }}\r\n                      type=\"radio\"\r\n                      checked={formData?.status == \"Deactive\"}\r\n                      name=\"status\"\r\n                      value=\"Deactive\"\r\n                    />\r\n                    <span style={{ marginRight: \"3px\" }}>Deactive</span>\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row>\r\n                <Button.Ripple\r\n                  color=\"primary\"\r\n                  type=\"submit\"\r\n                  className=\"mr-1 mt-2 mx-2\">\r\n                  Submit\r\n                </Button.Ripple>\r\n              </Row>\r\n            </Form>\r\n            <Form className=\"m-1\" onSubmit={submitHandler}>\r\n              <hr />\r\n              <Row>\r\n                <Col lg=\"12\" md=\"12\" sm=\"12\">\r\n                  <Label>OR</Label>\r\n                </Col>\r\n                <Col lg=\"4\" md=\"4\" sm=\"12\">\r\n                  <FormGroup>\r\n                    <Label>Bulk Import</Label>\r\n\r\n                    <Input\r\n                      className=\"form-control\"\r\n                      type=\"file\"\r\n                      placeholder=\"\"\r\n                      name=\"BulkImport\"\r\n                      onChange={(e) => {\r\n                        setBulkImport(e.target.files[0]);\r\n                      }}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Button.Ripple\r\n                  color=\"primary\"\r\n                  type=\"submit\"\r\n                  className=\"mr-1 mt-2 mx-2\">\r\n                  Import\r\n                </Button.Ripple>\r\n              </Row>\r\n            </Form>\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default CreateCustomer;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"row\", \"disabled\", \"check\", \"inline\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  row: PropTypes.bool,\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar FormGroup = function FormGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      row = props.row,\n      disabled = props.disabled,\n      check = props.check,\n      inline = props.inline,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, row ? 'row' : false, check ? 'form-check' : 'form-group', check && inline ? 'form-check-inline' : false, check && disabled ? 'disabled' : false), cssModule);\n\n  if (Tag === 'fieldset') {\n    attributes.disabled = disabled;\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormGroup.propTypes = propTypes;\nFormGroup.defaultProps = defaultProps;\nexport default FormGroup;"],"sourceRoot":""}