{"version":3,"sources":["views/apps/freshlist/accounts/CreateCustomer.js","../node_modules/reactstrap/es/FormGroup.js"],"names":["CreateCustomer","useState","CreatAccountView","setCreatAccountView","Countries","setCountry","States","setState","Cities","setCities","formData","setFormData","dropdownValue","setdropdownValue","index","setindex","error","setError","Context","useContext","UserContext","handleInputChange","e","type","i","target","name","value","checked","test","files","length","useEffect","console","log","CreateCustomerxmlView","then","res","jsonData","xmlJs","xml2json","data","compact","spaces","JSON","parse","input","MyDropDown","dropdown","catch","err","swal","className","render","history","style","cursor","color","onClick","push","onSubmit","preventDefault","userdata","localStorage","getItem","formdata","FormData","map","ele","_attributes","append","_text","val","status","_id","rolename","navigator","geolocation","getCurrentPosition","position","Date","timestamp","toLocaleString","coords","latitude","longitude","timeout","enableHighAccuracy","forEach","key","CreateCustomersave","response","lg","md","sm","label","required","onChange","option","moment","tz","format","phoneinput","inputClass","country","onKeyDown","includes","countryCodeEditable","phone","library","options","Country","getAllCountries","getOptionLabel","getOptionValue","State","getStatesOfCountry","isoCode","City","getCitiesOfState","countryCode","placeholder","dateFormat","UserInformatio","timeZone","number","onWheel","multiple","allimages","Array","from","handleFileChange","marginRight","Ripple","_excluded","propTypes","children","PropTypes","node","row","bool","check","inline","disabled","tag","tagPropType","string","cssModule","object","FormGroup","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps"],"mappings":"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","file":"static/js/299.432bca50.chunk.js","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\r\nimport xmlJs from \"xml-js\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Form,\r\n  Row,\r\n  Input,\r\n  Label,\r\n  Button,\r\n  FormGroup,\r\n  CustomInput,\r\n  Badge,\r\n} from \"reactstrap\";\r\nimport { history } from \"../../../../history\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Country, State, City } from \"country-state-city\";\r\nimport Select from \"react-select\";\r\nimport moment from \"moment-timezone\";\r\nimport { Route } from \"react-router-dom\";\r\n\r\nimport swal from \"sweetalert\";\r\nimport \"../../../../../src/layouts/assets/scss/pages/users.scss\";\r\n\r\nimport {\r\n  CreateAccountSave,\r\n  CreateAccountView,\r\n  CreateCustomersave,\r\n  CreateCustomerxmlView,\r\n} from \"../../../../ApiEndPoint/ApiCalling\";\r\nimport { BiEnvelope } from \"react-icons/bi\";\r\nimport { FcPhoneAndroid } from \"react-icons/fc\";\r\nimport { BsWhatsapp } from \"react-icons/bs\";\r\nimport \"../../../../assets/scss/pages/users.scss\";\r\nimport UserContext from \"../../../../context/Context\";\r\nimport { CloudLightning } from \"react-feather\";\r\nimport { FaPlus } from \"react-icons/fa\";\r\n\r\nconst CreateCustomer = () => {\r\n  const [CreatAccountView, setCreatAccountView] = useState([]);\r\n  const [Countries, setCountry] = useState({});\r\n  const [States, setState] = useState({});\r\n  const [Cities, setCities] = useState({});\r\n  const [formData, setFormData] = useState({});\r\n  const [dropdownValue, setdropdownValue] = useState({});\r\n  const [index, setindex] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [permissions, setpermissions] = useState({});\r\n\r\n  const Context = useContext(UserContext);\r\n\r\n  const handleFileChange = (e, type, i) => {\r\n    const { name, value, checked } = e.target;\r\n    let allimages = Array.from(e.target.files);\r\n    setindex(i);\r\n    setFormData({\r\n      ...formData,\r\n      [name]: allimages,\r\n    });\r\n  };\r\n  const handleChange = () => {\r\n    console.log(\"object\");\r\n  };\r\n  const handleInputChange = (e, type, i) => {\r\n    const { name, value, checked } = e.target;\r\n    setindex(i);\r\n    if (type == \"checkbox\") {\r\n      if (checked) {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      } else {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      }\r\n    } else {\r\n      if (type == \"number\") {\r\n        if (/^\\d{0,10}$/.test(value)) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          setError(\"\");\r\n        }\r\n        //  else {\r\n        //   setError(\r\n        //     \"Please enter a valid number with a maximum length of 10 digits\"\r\n        //   );\r\n        // }\r\n      } else if (type == \"file\") {\r\n        // debugger;\r\n        if (e.target.files) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: e.target.files[0],\r\n          });\r\n        }\r\n      } else {\r\n        if (value.length <= 10) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          // console.log(value);\r\n          setError(\"\");\r\n        } else {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          // setError(\"Input length exceeds the maximum of 10 characters\");\r\n        }\r\n      }\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    console.log(formData);\r\n  }, [formData]);\r\n  useEffect(() => {\r\n    CreateCustomerxmlView()\r\n      .then((res) => {\r\n        const jsonData = xmlJs.xml2json(res.data, { compact: true, spaces: 2 });\r\n        console.log(JSON.parse(jsonData)?.CreateCustomer);\r\n        setCreatAccountView(JSON.parse(jsonData)?.CreateCustomer?.input);\r\n\r\n        setdropdownValue(\r\n          JSON.parse(jsonData)?.CreateCustomer?.MyDropDown?.dropdown\r\n        );\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        swal(\"Something Went Wrong\");\r\n      });\r\n  }, []);\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    // console.log(CreatAccountView);\r\n    // console.log(dropdownValue);\r\n    debugger;\r\n    let userdata = JSON.parse(localStorage.getItem(\"userData\"));\r\n    let formdata = new FormData();\r\n    CreatAccountView?.map((ele, i) => {\r\n      if (ele?.type?._attributes?.type == \"text\") {\r\n        formdata.append(`${ele?.name._text}`, formData[ele?.name?._text]);\r\n      } else if (ele?.type?._attributes?.type == \"file\") {\r\n        if (ele?.name?._text == \"Shopphoto\") {\r\n          formData[ele?.name?._text]?.map((val, index) => {\r\n            formdata.append(\"file\", formData[ele?.name?._text][index]);\r\n          });\r\n        }\r\n        if (ele?.name?._text == \"photo\") {\r\n          formData[ele?.name?._text]?.map((val, index) => {\r\n            formdata.append(\"files\", formData[ele?.name?._text][index]);\r\n          });\r\n        }\r\n      } else {\r\n        formdata.append(`${ele?.name._text}`, formData[ele?.name?._text]);\r\n      }\r\n    });\r\n    formdata.append(\r\n      `${dropdownValue?.name?._text}`,\r\n      formData[dropdownValue?.name?._text]\r\n    );\r\n    formdata.append(\"status\", formData.status);\r\n    formdata.append(\"created_by\", userdata?._id);\r\n    formdata.append(\"rolename\", userdata?.rolename?._id);\r\n\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const date = new Date(position.timestamp);\r\n          const CurentTime = date.toLocaleString();\r\n          formdata.append(\"latitude\", position.coords.latitude);\r\n          formdata.append(\"longitude\", position.coords.longitude);\r\n        },\r\n        (error) => {\r\n          // this.setState({ Error: `Error: ${error}` });\r\n          swal(`Error: ${error}`);\r\n        },\r\n        { timeout: 10000, enableHighAccuracy: true }\r\n      );\r\n    } else {\r\n      swal(`Error: Geolocation not found`);\r\n    }\r\n\r\n    formdata.forEach((value, key) => {\r\n      // console.log(key, value);\r\n    });\r\n    if (error) {\r\n      // swal(\"Error occured while Entering Details\");\r\n    } else {\r\n      CreateCustomersave(formdata)\r\n        .then((res) => {\r\n          console.log(res);\r\n          setFormData({});\r\n          if (res.status) {\r\n            // window.location.goBack();\r\n            swal(\"Customer Created Successfully\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err.response);\r\n          swal(\"Please Fill correct details\");\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Card>\r\n          <Row className=\"m-2\">\r\n            <Col>\r\n              <h1 className=\"float-left\">Create Customer</h1>\r\n            </Col>\r\n            <Col>\r\n              <div className=\"float-right\">\r\n                <Route\r\n                  render={({ history }) => (\r\n                    <Button\r\n                      style={{ cursor: \"pointer\" }}\r\n                      className=\"float-right mr-1\"\r\n                      color=\"primary\"\r\n                      onClick={() =>\r\n                        history.push(\"/app/SoftNumen/CustomerSearch\")\r\n                      }>\r\n                      {\" \"}\r\n                      Back\r\n                      {/* <FaPlus size={15} /> Create User */}\r\n                    </Button>\r\n                  )}\r\n                />\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          {/* <hr /> */}\r\n\r\n          <CardBody>\r\n            <Form className=\"m-1\" onSubmit={submitHandler}>\r\n              <Row className=\"mb-2\">\r\n                {dropdownValue && (\r\n                  <Col lg=\"4\" md=\"4\" sm=\"12\">\r\n                    <FormGroup>\r\n                      <Label className=\"mb-1\">\r\n                        {dropdownValue && dropdownValue?.label?._text}\r\n                      </Label>\r\n                      <CustomInput\r\n                        required\r\n                        type=\"select\"\r\n                        name={dropdownValue?.name?._text}\r\n                        value={formData[dropdownValue?.name?._text]}\r\n                        onChange={handleInputChange}>\r\n                        <option value=\"\">--Select --</option>\r\n                        {dropdownValue?.option?.map((option, index) => (\r\n                          <option\r\n                            key={index}\r\n                            value={option?._attributes?.value}>\r\n                            {option?._attributes?.value}\r\n                          </option>\r\n                        ))}\r\n                      </CustomInput>\r\n                    </FormGroup>\r\n                  </Col>\r\n                )}\r\n\r\n                {CreatAccountView &&\r\n                  CreatAccountView?.map((ele, i) => {\r\n                    {\r\n                      /* console.log(Context?.UserInformatio?.dateFormat); */\r\n                    }\r\n                    // console.log(Countries);\r\n                    // console.log(States);\r\n                    const convertedTime = moment(\"2022-08-05T12:00:00\")\r\n                      .tz(\"America/New_York\")\r\n                      .format(\"D MMM, YYYY HH:mm\");\r\n\r\n                    if (!!ele?.phoneinput) {\r\n                      return (\r\n                        <>\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label className=\"mb-1\">\r\n                                {ele?.label?._text}\r\n                              </Label>\r\n                              <PhoneInput\r\n                                inputClass=\"myphoneinput\"\r\n                                country={\"us\"}\r\n                                onKeyDown={(e) => {\r\n                                  if (\r\n                                    ele?.type?._attributes?.type == \"number\"\r\n                                  ) {\r\n                                    [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                      e.preventDefault();\r\n                                  }\r\n                                }}\r\n                                countryCodeEditable={false}\r\n                                name={ele?.name?._text}\r\n                                value={formData[ele?.name?._text]}\r\n                                onChange={(phone) => {\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [ele?.name?._text]: phone,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </>\r\n                      );\r\n                    } else if (!!ele?.library) {\r\n                      if (ele?.label._text?.includes(\"ountry\")) {\r\n                        {\r\n                          /* console.log(ele); */\r\n                        }\r\n                        return (\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label className=\"mb-1\">\r\n                                {ele?.label?._text}\r\n                              </Label>\r\n                              <Select\r\n                                inputClass=\"countryclass\"\r\n                                className=\"countryclassnw\"\r\n                                options={Country.getAllCountries()}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={Countries}\r\n                                onChange={(country) => {\r\n                                  setCountry(country);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"Country\"]: country?.name,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else if (ele?.label._text?.includes(\"tate\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label className=\"mb-1\">\r\n                                {ele?.label?._text}\r\n                              </Label>\r\n                              <Select\r\n                                options={State?.getStatesOfCountry(\r\n                                  Countries?.isoCode\r\n                                )}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={States}\r\n                                onChange={(State) => {\r\n                                  setState(State);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"State\"]: State?.name,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else if (ele?.label._text?.includes(\"ity\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label className=\"mb-1\">\r\n                                {ele?.label?._text}\r\n                              </Label>\r\n                              <Select\r\n                                options={City?.getCitiesOfState(\r\n                                  States?.countryCode,\r\n                                  States?.isoCode\r\n                                )}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={Cities}\r\n                                onChange={(City) => {\r\n                                  setCities(City);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"City\"]: City?.name,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else {\r\n                        return (\r\n                          <>\r\n                            {ele?.type?._attributes?.type == \"date\" ? (\r\n                              <>\r\n                                <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                  <FormGroup key={i}>\r\n                                    <Label className=\"mb-1\">\r\n                                      {ele?.label?._text}\r\n                                    </Label>\r\n\r\n                                    <Input\r\n                                      onKeyDown={(e) => {\r\n                                        if (\r\n                                          ele?.type?._attributes?.type ==\r\n                                          \"number\"\r\n                                        ) {\r\n                                          [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                            e.key\r\n                                          ) && e.preventDefault();\r\n                                        }\r\n                                      }}\r\n                                      type={ele?.type?._attributes?.type}\r\n                                      placeholder={ele?.placeholder?._text}\r\n                                      name={ele?.name?._text}\r\n                                      dateFormat={\r\n                                        Context?.UserInformatio?.dateFormat\r\n                                      }\r\n                                      value={\r\n                                        moment(formData[ele?.name?._text])\r\n                                          .tz(Context?.UserInformatio?.timeZone)\r\n                                          .format(\r\n                                            Context?.UserInformatio?.dateFormat\r\n                                          )\r\n                                        // formData[ele?.name?._text]\r\n                                      }\r\n                                      // value={formData[ele?.name?._text]}\r\n                                      onChange={(e) =>\r\n                                        handleInputChange(\r\n                                          e,\r\n                                          ele?.type?._attributes?.type,\r\n                                          i\r\n                                        )\r\n                                      }\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </FormGroup>\r\n                                </Col>\r\n                              </>\r\n                            ) : (\r\n                              <>\r\n                                <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                  <FormGroup key={i}>\r\n                                    <Label className=\"mb-1\">\r\n                                      {ele?.label?._text}\r\n                                    </Label>\r\n\r\n                                    <Input\r\n                                      onKeyDown={(e) => {\r\n                                        if (\r\n                                          ele?.type?._attributes?.type ==\r\n                                          \"number\"\r\n                                        ) {\r\n                                          [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                            e.key\r\n                                          ) && e.preventDefault();\r\n                                        }\r\n                                      }}\r\n                                      type={ele?.type?._attributes?.type}\r\n                                      placeholder={ele?.placeholder?._text}\r\n                                      name={ele?.name?._text}\r\n                                      value={formData[ele?.name?._text]}\r\n                                      onChange={(e) =>\r\n                                        handleInputChange(\r\n                                          e,\r\n                                          ele?.type?._attributes?.type,\r\n                                          i\r\n                                        )\r\n                                      }\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </FormGroup>\r\n                                </Col>\r\n                              </>\r\n                            )}\r\n                          </>\r\n                        );\r\n                      }\r\n                    } else {\r\n                      return (\r\n                        <>\r\n                          {!!ele?.number ? (\r\n                            <>\r\n                              <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                <FormGroup key={i}>\r\n                                  <Label className=\"mb-1\">\r\n                                    {ele?.label?._text}\r\n                                  </Label>\r\n\r\n                                  <Input\r\n                                    onWheel={(e) => {\r\n                                      e.preventDefault(); // Prevent the mouse wheel scroll event\r\n                                    }}\r\n                                    onKeyDown={(e) => {\r\n                                      if (\r\n                                        ele?.type?._attributes?.type == \"number\"\r\n                                      ) {\r\n                                        [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                          e.preventDefault();\r\n                                      }\r\n                                    }}\r\n                                    type={ele?.type?._attributes?.type}\r\n                                    placeholder={ele?.placeholder?._text}\r\n                                    name={ele?.name?._text}\r\n                                    value={formData[ele?.name?._text]}\r\n                                    onChange={(e) =>\r\n                                      handleInputChange(\r\n                                        e,\r\n                                        ele?.type?._attributes?.type,\r\n                                        i\r\n                                      )\r\n                                    }\r\n                                  />\r\n                                  {index === i ? (\r\n                                    <>\r\n                                      {error && (\r\n                                        <span style={{ color: \"red\" }}>\r\n                                          {error}\r\n                                        </span>\r\n                                      )}\r\n                                    </>\r\n                                  ) : (\r\n                                    <></>\r\n                                  )}\r\n                                </FormGroup>\r\n                              </Col>\r\n                            </>\r\n                          ) : (\r\n                            <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                              <FormGroup key={i}>\r\n                                {ele?.type?._attributes?.type &&\r\n                                ele?.type?._attributes?.type == \"file\" ? (\r\n                                  <>\r\n                                    <Label className=\"mb-1\">\r\n                                      {ele?.label?._text}\r\n                                    </Label>\r\n\r\n                                    <Input\r\n                                      multiple\r\n                                      className=\"form-control\"\r\n                                      type={ele?.type?._attributes?.type}\r\n                                      placeholder={ele?.placeholder?._text}\r\n                                      name={ele?.name?._text}\r\n                                      //   value={formData[ele?.name?._text]}\r\n                                      onChange={(e) => {\r\n                                        // const value = e.target.value;\r\n                                        // // Use regular expression to allow only numbers\r\n                                        // const numericValue = value.replace(\r\n                                        //   /\\D/g,\r\n                                        //   \"\"\r\n                                        // );\r\n                                        handleFileChange(\r\n                                          e,\r\n                                          ele?.type?._attributes?.type,\r\n                                          i\r\n                                        );\r\n                                      }}\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </>\r\n                                ) : (\r\n                                  <>\r\n                                    <Label className=\"mb-1\">\r\n                                      {ele?.label?._text}\r\n                                    </Label>\r\n\r\n                                    <Input\r\n                                      className=\"form-control\"\r\n                                      onKeyDown={(e) => {\r\n                                        if (\r\n                                          ele?.type?._attributes?.type ==\r\n                                          \"number\"\r\n                                        ) {\r\n                                          [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                            e.key\r\n                                          ) && e.preventDefault();\r\n                                        }\r\n                                      }}\r\n                                      type={ele?.type?._attributes?.type}\r\n                                      placeholder={ele?.placeholder?._text}\r\n                                      name={ele?.name?._text}\r\n                                      value={formData[ele?.name?._text]}\r\n                                      onChange={(e) => {\r\n                                        // const value = e.target.value;\r\n                                        // // Use regular expression to allow only numbers\r\n                                        // const numericValue = value.replace(\r\n                                        //   /\\D/g,\r\n                                        //   \"\"\r\n                                        // );\r\n                                        handleInputChange(\r\n                                          e,\r\n                                          ele?.type?._attributes?.type,\r\n                                          i\r\n                                        );\r\n                                      }}\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </>\r\n                                )}\r\n\r\n                                {/* <Label className=\"mb-1\">\r\n                                  {ele?.label?._text}\r\n                                </Label>\r\n\r\n                                <Input\r\n                                  className=\"form-control\"\r\n                                  onKeyDown={(e) => {\r\n                                    if (\r\n                                      ele?.type?._attributes?.type == \"number\"\r\n                                    ) {\r\n                                      [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                        e.preventDefault();\r\n                                    }\r\n                                  }}\r\n                                  type={ele?.type?._attributes?.type}\r\n                                  placeholder={ele?.placeholder?._text}\r\n                                  name={ele?.name?._text}\r\n                                  value={formData[ele?.name?._text]}\r\n                                  onChange={(e) => {\r\n                                    // const value = e.target.value;\r\n                                    // // Use regular expression to allow only numbers\r\n                                    // const numericValue = value.replace(\r\n                                    //   /\\D/g,\r\n                                    //   \"\"\r\n                                    // );\r\n                                    handleInputChange(\r\n                                      e,\r\n                                      ele?.type?._attributes?.type,\r\n                                      i\r\n                                    );\r\n                                  }}\r\n                                />\r\n                                {index === i ? (\r\n                                  <>\r\n                                    {error && (\r\n                                      <span style={{ color: \"red\" }}>\r\n                                        {error}\r\n                                      </span>\r\n                                    )}\r\n                                  </>\r\n                                ) : (\r\n                                  <></>\r\n                                )} */}\r\n                              </FormGroup>\r\n                            </Col>\r\n                          )}\r\n                        </>\r\n                      );\r\n                    }\r\n                  })}\r\n              </Row>\r\n\r\n              <hr />\r\n              <Row className=\"mt-2\">\r\n                <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2 mt-1\">\r\n                  <Label className=\"mb-0\">Status</Label>\r\n                  <div\r\n                    className=\"form-label-group\"\r\n                    onChange={(e) => {\r\n                      setFormData({\r\n                        ...formData,\r\n                        [\"status\"]: e.target.value,\r\n                      });\r\n                    }}>\r\n                    <input\r\n                      style={{ marginRight: \"3px\" }}\r\n                      type=\"radio\"\r\n                      name=\"status\"\r\n                      value=\"Active\"\r\n                    />\r\n                    <span style={{ marginRight: \"20px\" }}>Active</span>\r\n\r\n                    <input\r\n                      style={{ marginRight: \"3px\" }}\r\n                      type=\"radio\"\r\n                      name=\"status\"\r\n                      value=\"Deactive\"\r\n                    />\r\n                    <span style={{ marginRight: \"3px\" }}>Deactive</span>\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n              {/* <Row className=\"mt-2 \">\r\n                <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2\">\r\n                  <Label className=\"\">\r\n                    <h4>Status</h4>\r\n                  </Label>\r\n                  <div className=\"form-label-group mx-1\">\r\n                    {CreatAccountView &&\r\n                      CreatAccountView?.CreateAccount?.Radiobutton?.input?.map(\r\n                        (ele, i) => {\r\n                          return (\r\n                            <FormGroup key={i}>\r\n                              <Input\r\n                                key={i}\r\n                                style={{ marginRight: \"3px\" }}\r\n                                required\r\n                                type={ele?.type?._attributes?.type}\r\n                                name={ele?.name?._text}\r\n                                value={`${\r\n                                  ele?.label?._text == \"Active\"\r\n                                    ? \"Active\"\r\n                                    : \"Deactive\"\r\n                                }`}\r\n                                onChange={handleInputChange}\r\n                              />{\" \"}\r\n                              <span\r\n                                className=\"mx-1 mt-1\"\r\n                                style={{ marginRight: \"20px\" }}\r\n                              >\r\n                                {ele?.label?._text}\r\n                              </span>\r\n                            </FormGroup>\r\n                          );\r\n                        }\r\n                      )}\r\n                  </div>\r\n                </Col>\r\n              </Row> */}\r\n\r\n              <Row>\r\n                <Button.Ripple\r\n                  color=\"primary\"\r\n                  type=\"submit\"\r\n                  className=\"mr-1 mt-2 mx-2\">\r\n                  Submit\r\n                </Button.Ripple>\r\n              </Row>\r\n            </Form>\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default CreateCustomer;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"row\", \"disabled\", \"check\", \"inline\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  row: PropTypes.bool,\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar FormGroup = function FormGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      row = props.row,\n      disabled = props.disabled,\n      check = props.check,\n      inline = props.inline,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, row ? 'row' : false, check ? 'form-check' : 'form-group', check && inline ? 'form-check-inline' : false, check && disabled ? 'disabled' : false), cssModule);\n\n  if (Tag === 'fieldset') {\n    attributes.disabled = disabled;\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormGroup.propTypes = propTypes;\nFormGroup.defaultProps = defaultProps;\nexport default FormGroup;"],"sourceRoot":""}