{"version":3,"sources":["views/apps/freshlist/accounts/CreateAccount.js","../node_modules/reactstrap/es/FormGroup.js"],"names":["CreateAccount","useState","CreatAccountView","setCreatAccountView","Countries","setCountry","States","setState","Cities","setCities","formData","setFormData","dropdownValue","setdropdownValue","index","setindex","error","setError","Context","useContext","UserContext","handleInputChange","e","type","i","target","name","value","checked","test","length","useEffect","console","log","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","swal","enableHighAccuracy","userdata","JSON","parse","localStorage","getItem","Get_RoleList","_id","database","then","res","ShowList","Role","filter","item","rolename","catch","err","CreateAccountView","jsonData","xmlJs","xml2json","data","compact","spaces","CreateUser","input","className","render","history","style","cursor","color","onClick","push","onSubmit","preventDefault","email","firstName","CreateAccountSave","status","lg","md","required","onChange","map","ele","roleName","moment","tz","format","phoneinput","key","sm","label","_text","inputClass","country","onKeyDown","_attributes","includes","countryCodeEditable","phone","library","options","Country","getAllCountries","getOptionLabel","getOptionValue","State","getStatesOfCountry","isoCode","City","getCitiesOfState","countryCode","placeholder","dateFormat","UserInformatio","timeZone","number","onWheel","marginRight","Ripple","_excluded","propTypes","children","PropTypes","node","row","bool","check","inline","disabled","tag","tagPropType","string","cssModule","object","FormGroup","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps"],"mappings":"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","file":"static/js/307.6e0445f9.chunk.js","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\r\nimport xmlJs from \"xml-js\";\r\nimport Multiselect from \"multiselect-react-dropdown\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Form,\r\n  Row,\r\n  Input,\r\n  Label,\r\n  Button,\r\n  FormGroup,\r\n  CustomInput,\r\n  Badge,\r\n} from \"reactstrap\";\r\nimport { history } from \"../../../../history\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Country, State, City } from \"country-state-city\";\r\nimport Select from \"react-select\";\r\nimport moment from \"moment-timezone\";\r\nimport { Route } from \"react-router-dom\";\r\n\r\nimport swal from \"sweetalert\";\r\nimport \"../../../../../src/layouts/assets/scss/pages/users.scss\";\r\n\r\nimport {\r\n  CreateAccountSave,\r\n  CreateAccountView,\r\n  Get_RoleList,\r\n} from \"../../../../ApiEndPoint/ApiCalling\";\r\nimport { BiEnvelope } from \"react-icons/bi\";\r\nimport { FcPhoneAndroid } from \"react-icons/fc\";\r\nimport { BsWhatsapp } from \"react-icons/bs\";\r\nimport \"../../../../assets/scss/pages/users.scss\";\r\nimport UserContext from \"../../../../context/Context\";\r\nimport { CloudLightning } from \"react-feather\";\r\nimport { FaPlus } from \"react-icons/fa\";\r\n\r\nconst CreateAccount = () => {\r\n  const [CreatAccountView, setCreatAccountView] = useState([]);\r\n  const [Countries, setCountry] = useState({});\r\n  const [States, setState] = useState({});\r\n  const [Cities, setCities] = useState({});\r\n  const [formData, setFormData] = useState({});\r\n  const [dropdownValue, setdropdownValue] = useState([]);\r\n  const [index, setindex] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [permissions, setpermissions] = useState({});\r\n\r\n  const Context = useContext(UserContext);\r\n\r\n  const handleInputChange = (e, type, i) => {\r\n    const { name, value, checked } = e.target;\r\n    setindex(i);\r\n    if (type == \"checkbox\") {\r\n      if (checked) {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      } else {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      }\r\n    } else {\r\n      if (type == \"number\") {\r\n        if (/^\\d{0,10}$/.test(value)) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          setError(\"\");\r\n        } else {\r\n          setError(\r\n            \"Please enter a valid number with a maximum length of 10 digits\"\r\n          );\r\n        }\r\n      } else {\r\n        if (value.length <= 10) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          // console.log(value);\r\n          setError(\"\");\r\n        } else {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          // setError(\"Input length exceeds the maximum of 10 characters\");\r\n        }\r\n      }\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    console.log(formData);\r\n  }, [formData]);\r\n  useEffect(() => {\r\n    const getLocation = () => {\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(\r\n          (position) => {\r\n            const { latitude, longitude } = position.coords;\r\n\r\n            console.log(position.coords);\r\n          },\r\n          (error) => {\r\n            swal(\"error\", error);\r\n          },\r\n          { enableHighAccuracy: true }\r\n        );\r\n      } else {\r\n        swal(\"Your Browser does not support Location\");\r\n      }\r\n    };\r\n\r\n    getLocation();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let userdata = JSON.parse(localStorage.getItem(\"userData\"));\r\n    Get_RoleList(userdata?._id, userdata?.database)\r\n      .then((res) => {\r\n        let ShowList = res?.Role?.filter(\r\n          (item, i) => item?.position > userdata?.rolename?.position\r\n        );\r\n\r\n        setdropdownValue(ShowList);\r\n        console.log(ShowList);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        swal(\"Roles List Not found\");\r\n      });\r\n    CreateAccountView()\r\n      .then((res) => {\r\n        const jsonData = xmlJs.xml2json(res.data, { compact: true, spaces: 2 });\r\n        setCreatAccountView(JSON.parse(jsonData)?.CreateUser?.input);\r\n        setdropdownValue(JSON.parse(jsonData));\r\n        \r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n      \r\n      console.log(userdata?._id)\r\n      formData[\"created_by\"]=userdata?._id\r\n  }, []);\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    console.log(formData);\r\n    if (formData?.rolename && formData?.email && formData?.firstName) {\r\n      if (error) {\r\n        swal(\"Error occured while Entering Details\");\r\n      } else {\r\n        CreateAccountSave(formData)\r\n          .then((res) => {\r\n            setFormData({});\r\n            if (res.status) {\r\n              // window.location.reload();\r\n              swal(\"User Created Successfully\");\r\n            }\r\n          })\r\n          .catch((err) => {\r\n            console.log(err);\r\n          });\r\n      }\r\n    } else {\r\n      swal(\"Enter User Name Email and Select Role\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Card>\r\n          <Row className=\"m-2\">\r\n            <Col>\r\n              <h1 className=\"float-left\">Create User</h1>\r\n            </Col>\r\n            <Col>\r\n              <div className=\"float-right\">\r\n                <Route\r\n                  render={({ history }) => (\r\n                    <Button\r\n                      style={{ cursor: \"pointer\" }}\r\n                      className=\"float-right mr-1\"\r\n                      color=\"primary\"\r\n                      onClick={() =>\r\n                        history.push(\"/app/SoftNumen/accounSearch\")\r\n                      }>\r\n                      {\" \"}\r\n                      Back\r\n                      {/* <FaPlus size={15} /> Create User */}\r\n                    </Button>\r\n                  )}\r\n                />\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          {/* <hr /> */}\r\n\r\n          <div className=\"px-1 \">\r\n            <Form className=\"m-1\" onSubmit={submitHandler}>\r\n              <Row className=\"mb-2\">\r\n                <Col lg=\"4\" md=\"4\">\r\n                  <FormGroup>\r\n                    <Label>Role List</Label>\r\n                    <CustomInput\r\n                      required\r\n                      type=\"select\"\r\n                      name=\"rolename\"\r\n                      value={formData[\"rolename\"]}\r\n                      onChange={(e) => {\r\n                        setFormData({\r\n                          ...formData,\r\n                          [\"rolename\"]: e.target.value,\r\n                        });\r\n                      }}>\r\n                      <option>--select Role--</option>\r\n                      {dropdownValue &&\r\n                        dropdownValue?.length &&\r\n                        dropdownValue?.map((ele, i) => {\r\n                          return (\r\n                            <option value={ele?._id}>{ele?.roleName}</option>\r\n                          );\r\n                        })}\r\n                    </CustomInput>\r\n                  </FormGroup>\r\n                </Col>\r\n\r\n                {CreatAccountView &&\r\n                  CreatAccountView?.map((ele, i) => {\r\n                    {\r\n                      /* console.log(Context?.UserInformatio?.dateFormat); */\r\n                    }\r\n                    // console.log(Countries);\r\n                    // console.log(States);\r\n                    const convertedTime = moment(\"2022-08-05T12:00:00\")\r\n                      .tz(\"America/New_York\")\r\n                      .format(\"D MMM, YYYY HH:mm\");\r\n\r\n                    if (!!ele?.phoneinput) {\r\n                      return (\r\n                        <>\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <PhoneInput\r\n                                inputClass=\"myphoneinput\"\r\n                                country={\"in\"}\r\n                                onKeyDown={(e) => {\r\n                                  if (\r\n                                    ele?.type?._attributes?.type == \"number\"\r\n                                  ) {\r\n                                    [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                      e.preventDefault();\r\n                                  }\r\n                                }}\r\n                                countryCodeEditable={false}\r\n                                name={ele?.name?._text}\r\n                                value={formData[ele?.name?._text]}\r\n                                onChange={(phone) => {\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [ele?.name?._text]: phone,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </>\r\n                      );\r\n                    } else if (!!ele?.library) {\r\n                      if (ele?.label._text?.includes(\"ountry\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <Select\r\n                                inputClass=\"countryclass\"\r\n                                className=\"countryclassnw\"\r\n                                options={Country.getAllCountries()}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={Countries}\r\n                                onChange={(country) => {\r\n                                  setCountry(country);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"Country\"]: country?.name,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else if (ele?.label._text?.includes(\"tate\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <Select\r\n                                options={State?.getStatesOfCountry(\r\n                                  Countries?.isoCode\r\n                                )}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={States}\r\n                                onChange={(State) => {\r\n                                  setState(State);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"State\"]: State?.name,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else if (ele?.label._text?.includes(\"ity\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <Select\r\n                                options={City?.getCitiesOfState(\r\n                                  States?.countryCode,\r\n                                  States?.isoCode\r\n                                )}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={Cities}\r\n                                onChange={(City) => {\r\n                                  setCities(City);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"City\"]: City?.name,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else {\r\n                        return (\r\n                          <>\r\n                            {ele?.type?._attributes?.type == \"date\" ? (\r\n                              <>\r\n                                <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                  <FormGroup key={i}>\r\n                                    <Label>{ele?.label?._text}</Label>\r\n\r\n                                    <Input\r\n                                      onKeyDown={(e) => {\r\n                                        if (\r\n                                          ele?.type?._attributes?.type ==\r\n                                          \"number\"\r\n                                        ) {\r\n                                          [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                            e.key\r\n                                          ) && e.preventDefault();\r\n                                        }\r\n                                      }}\r\n                                      type={ele?.type?._attributes?.type}\r\n                                      placeholder={ele?.placeholder?._text}\r\n                                      name={ele?.name?._text}\r\n                                      dateFormat={\r\n                                        Context?.UserInformatio?.dateFormat\r\n                                      }\r\n                                      value={\r\n                                        moment(formData[ele?.name?._text])\r\n                                          .tz(Context?.UserInformatio?.timeZone)\r\n                                          .format(\r\n                                            Context?.UserInformatio?.dateFormat\r\n                                          )\r\n                                        // formData[ele?.name?._text]\r\n                                      }\r\n                                      // value={formData[ele?.name?._text]}\r\n                                      onChange={(e) =>\r\n                                        handleInputChange(\r\n                                          e,\r\n                                          ele?.type?._attributes?.type,\r\n                                          i\r\n                                        )\r\n                                      }\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </FormGroup>\r\n                                </Col>\r\n                              </>\r\n                            ) : (\r\n                              <>\r\n                                <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                  <FormGroup key={i}>\r\n                                    <Label>{ele?.label?._text}</Label>\r\n\r\n                                    <Input\r\n                                      onKeyDown={(e) => {\r\n                                        if (\r\n                                          ele?.type?._attributes?.type ==\r\n                                          \"number\"\r\n                                        ) {\r\n                                          [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                            e.key\r\n                                          ) && e.preventDefault();\r\n                                        }\r\n                                      }}\r\n                                      type={ele?.type?._attributes?.type}\r\n                                      placeholder={ele?.placeholder?._text}\r\n                                      name={ele?.name?._text}\r\n                                      value={formData[ele?.name?._text]}\r\n                                      onChange={(e) =>\r\n                                        handleInputChange(\r\n                                          e,\r\n                                          ele?.type?._attributes?.type,\r\n                                          i\r\n                                        )\r\n                                      }\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </FormGroup>\r\n                                </Col>\r\n                              </>\r\n                            )}\r\n                          </>\r\n                        );\r\n                      }\r\n                    } else {\r\n                      return (\r\n                        <>\r\n                          {!!ele?.number ? (\r\n                            <>\r\n                              <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                <FormGroup key={i}>\r\n                                  <Label>{ele?.label?._text}</Label>\r\n\r\n                                  <Input\r\n                                    onWheel={(e) => {\r\n                                      e.preventDefault(); // Prevent the mouse wheel scroll event\r\n                                    }}\r\n                                    onKeyDown={(e) => {\r\n                                      if (\r\n                                        ele?.type?._attributes?.type == \"number\"\r\n                                      ) {\r\n                                        [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                          e.preventDefault();\r\n                                      }\r\n                                    }}\r\n                                    type={ele?.type?._attributes?.type}\r\n                                    placeholder={ele?.placeholder?._text}\r\n                                    name={ele?.name?._text}\r\n                                    value={formData[ele?.name?._text]}\r\n                                    onChange={(e) =>\r\n                                      handleInputChange(\r\n                                        e,\r\n                                        ele?.type?._attributes?.type,\r\n                                        i\r\n                                      )\r\n                                    }\r\n                                  />\r\n                                  {index === i ? (\r\n                                    <>\r\n                                      {error && (\r\n                                        <span style={{ color: \"red\" }}>\r\n                                          {error}\r\n                                        </span>\r\n                                      )}\r\n                                    </>\r\n                                  ) : (\r\n                                    <></>\r\n                                  )}\r\n                                </FormGroup>\r\n                              </Col>\r\n                            </>\r\n                          ) : (\r\n                            <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                              <FormGroup key={i}>\r\n                                <Label>{ele?.label?._text}</Label>\r\n\r\n                                <Input\r\n                                  onKeyDown={(e) => {\r\n                                    if (\r\n                                      ele?.type?._attributes?.type == \"number\"\r\n                                    ) {\r\n                                      [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                        e.preventDefault();\r\n                                    }\r\n                                  }}\r\n                                  type={ele?.type?._attributes?.type}\r\n                                  placeholder={ele?.placeholder?._text}\r\n                                  name={ele?.name?._text}\r\n                                  value={formData[ele?.name?._text]}\r\n                                  onChange={(e) => {\r\n                                    // const value = e.target.value;\r\n                                    // // Use regular expression to allow only numbers\r\n                                    // const numericValue = value.replace(\r\n                                    //   /\\D/g,\r\n                                    //   \"\"\r\n                                    // );\r\n                                    handleInputChange(\r\n                                      e,\r\n                                      ele?.type?._attributes?.type,\r\n                                      i\r\n                                    );\r\n                                  }}\r\n                                />\r\n                                {index === i ? (\r\n                                  <>\r\n                                    {error && (\r\n                                      <span style={{ color: \"red\" }}>\r\n                                        {error}\r\n                                      </span>\r\n                                    )}\r\n                                  </>\r\n                                ) : (\r\n                                  <></>\r\n                                )}\r\n                              </FormGroup>\r\n                            </Col>\r\n                          )}\r\n                        </>\r\n                      );\r\n                    }\r\n                  })}\r\n              </Row>\r\n\r\n              <hr />\r\n              {/* <Row className=\"mt-2 \">\r\n                <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2\">\r\n                  <Label className=\"\">\r\n                    <h4>Status</h4>\r\n                  </Label>\r\n                  <div className=\"form-label-group mx-1\">\r\n                    {CreatAccountView &&\r\n                      CreatAccountView?.CreateAccount?.Radiobutton?.input?.map(\r\n                        (ele, i) => {\r\n                          return (\r\n                            <FormGroup key={i}>\r\n                              <Input\r\n                                key={i}\r\n                                style={{ marginRight: \"3px\" }}\r\n                                required\r\n                                type={ele?.type?._attributes?.type}\r\n                                name={ele?.name?._text}\r\n                                value={`${\r\n                                  ele?.label?._text == \"Active\"\r\n                                    ? \"Active\"\r\n                                    : \"Deactive\"\r\n                                }`}\r\n                                onChange={handleInputChange}\r\n                              />{\" \"}\r\n                              <span\r\n                                className=\"mx-1 mt-1\"\r\n                                style={{ marginRight: \"20px\" }}\r\n                              >\r\n                                {ele?.label?._text}\r\n                              </span>\r\n                            </FormGroup>\r\n                          );\r\n                        }\r\n                      )}\r\n                  </div>\r\n                </Col>\r\n              </Row> */}\r\n              <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2 mt-1\">\r\n                <Label className=\"mb-0\">Status</Label>\r\n                <div\r\n                  className=\"form-label-group\"\r\n                  onChange={(e) => {\r\n                    setFormData({\r\n                      ...formData,\r\n                      [\"status\"]: e.target.value,\r\n                    });\r\n                  }}>\r\n                  <input\r\n                    required\r\n                    style={{ marginRight: \"3px\"  }}\r\n                    type=\"radio\"\r\n                    name=\"status\"\r\n                    value=\"Active\" \r\n                  />\r\n                  <span style={{ marginRight: \"20px\"  }}>Active</span>\r\n\r\n                  <input\r\n                    required\r\n                    style={{ marginRight: \"3px\" }}\r\n                    type=\"radio\"\r\n                    name=\"status\"\r\n                    value=\"Deactive\"\r\n                  />\r\n                  <span style={{ marginRight: \"3px\" }}>Deactive</span>\r\n                </div>\r\n              </Col>\r\n              <Row>\r\n                <Button.Ripple\r\n                  color=\"primary\"\r\n                  type=\"submit\"\r\n                  className=\"mr-1 mt-2 mx-2\">\r\n                  Submit\r\n                </Button.Ripple>\r\n              </Row>\r\n            </Form>\r\n          </div>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default CreateAccount;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"row\", \"disabled\", \"check\", \"inline\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  row: PropTypes.bool,\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar FormGroup = function FormGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      row = props.row,\n      disabled = props.disabled,\n      check = props.check,\n      inline = props.inline,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, row ? 'row' : false, check ? 'form-check' : 'form-group', check && inline ? 'form-check-inline' : false, check && disabled ? 'disabled' : false), cssModule);\n\n  if (Tag === 'fieldset') {\n    attributes.disabled = disabled;\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormGroup.propTypes = propTypes;\nFormGroup.defaultProps = defaultProps;\nexport default FormGroup;"],"sourceRoot":""}