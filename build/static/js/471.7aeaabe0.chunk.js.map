{"version":3,"sources":["views/apps/freshlist/order/purchase/PurchaseReturn.js"],"names":["SalesReturnView","args","useState","setIndex","error","setProductList","grandTotalAmt","setGrandTotalAmt","setEditdata","setUserInfo","setSalesPersonList","location","useParams","useLocation","productId","Product_Title","Qty_Sales","Qty_Return","Product_Price","OrderedListData","setOrderedListData","handleProductChangeProduct","e","index","target","name","value","list","useEffect","getFromLocalData","JSON","parse","localStorage","getItem","orderItems","state","console","log","grandTotal","reduce","a","b","price","setItem","Create_Sales_personList","then","res","SalesPerson","catch","err","ProductListView","Product","userInfo","className","render","history","style","cursor","color","size","onClick","goBack","onSubmit","preventDefault","userData","myarr","map","ele","i","product","_id","Qty_Purchased","qty","Number","returnQty","payload","userId","returnItems","mobileNumber","email","Return_amount","orderId","swal","PurchaseReturn","push","item","key","lg","md","sm","type","readOnly","placeholder","onChange","Ripple"],"mappings":"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","file":"static/js/471.7aeaabe0.chunk.js","sourcesContent":["// import React, { useRef } from \"react\";\r\n// import { Route } from \"react-router-dom\";\r\n// import xmlJs from \"xml-js\";\r\n// import {\r\n//   Card,\r\n//   CardBody,\r\n//   Input,\r\n//   Row,\r\n//   Modal,\r\n//   Col,\r\n//   UncontrolledDropdown,\r\n//   DropdownMenu,\r\n//   DropdownItem,\r\n//   DropdownToggle,\r\n//   Button,\r\n//   ModalHeader,\r\n//   ModalBody,\r\n//   Badge,\r\n//   CustomInput,\r\n// } from \"reactstrap\";\r\n\r\n// import { ContextLayout } from \"../../../../../utility/context/Layout\";\r\n// import { AgGridReact } from \"ag-grid-react\";\r\n// import \"ag-grid-community/dist/styles/ag-grid.css\";\r\n// // import EditAccount from \"../accounts/EditAccount\";\r\n// import jsPDF from \"jspdf\";\r\n// import \"jspdf-autotable\";\r\n// import Logo from \"../../../../../assets/img/profile/pages/logomain.png\";\r\n// import Papa from \"papaparse\";\r\n// import { Eye, Trash2, ChevronDown, Edit, CornerDownLeft } from \"react-feather\";\r\n// import { IoMdRemoveCircleOutline } from \"react-icons/io\";\r\n// import \"../../../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\r\n// import \"../../../../../assets/scss/pages/users.scss\";\r\n// import { ImDownload } from \"react-icons/im\";\r\n// import {\r\n//   FaArrowAltCircleLeft,\r\n//   FaArrowAltCircleRight,\r\n//   FaFilter,\r\n//   FaPlus,\r\n// } from \"react-icons/fa\";\r\n// import swal from \"sweetalert\";\r\n// import {\r\n//   Purchase_ReturnList,\r\n//   Delete_targetINlist,\r\n// } from \"../../../../../ApiEndPoint/ApiCalling\";\r\n// import {\r\n//   BsCloudDownloadFill,\r\n//   BsFillArrowDownSquareFill,\r\n//   BsFillArrowUpSquareFill,\r\n// } from \"react-icons/bs\";\r\n// import * as XLSX from \"xlsx\";\r\n// import UserContext from \"../../../../../context/Context\";\r\n// import SalesReturnView from \".././SalesReturnView\";\r\n// import { CheckPermission } from \"../../house/CheckPermission\";\r\n\r\n// const SelectedColums = [];\r\n\r\n// class PurchaseReturn extends React.Component {\r\n//   static contextType = UserContext;\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.gridRef = React.createRef();\r\n//     this.gridApi = null;\r\n//     this.state = {\r\n//       isOpen: false,\r\n//       Arrindex: \"\",\r\n//       rowData: [],\r\n//       userName: \"\",\r\n//       modal: false,\r\n//       InsiderPermissions: {},\r\n//       modalone: false,\r\n//       ViewData: {},\r\n//       setMySelectedarr: [],\r\n//       SelectedCols: [],\r\n//       paginationPageSize: 5,\r\n//       currenPageSize: \"\",\r\n//       getPageSize: \"\",\r\n//       AllcolumnDefs: [],\r\n//       SelectedcolumnDefs: [],\r\n//       defaultColDef: {\r\n//         sortable: true,\r\n//         enablePivot: true,\r\n//         enableValue: true,\r\n//         resizable: true,\r\n//         suppressMenu: true,\r\n//       },\r\n//       columnDefs: [\r\n//         {\r\n//           headerName: \"UID\",\r\n//           valueGetter: \"node.rowIndex + 1\",\r\n//           field: \"node.rowIndex + 1\",\r\n//           // checkboxSelection: true,\r\n//           width: 80,\r\n//           filter: true,\r\n//         },\r\n\r\n//         {\r\n//           headerName: \"Actions\",\r\n//           field: \"transactions\",\r\n//           width: 180,\r\n//           cellRendererFramework: params => {\r\n//             return (\r\n//               <div className=\"actions cursor-pointer\">\r\n//                 {this.state.InsiderPermissions &&\r\n//                   this.state.InsiderPermissions?.View && (\r\n//                     <Eye\r\n//                       className=\"mr-50\"\r\n//                       size=\"25px\"\r\n//                       color=\"green\"\r\n//                       onClick={() => {\r\n//                         this.togglemodal();\r\n//                         this.handleChangeView(params.data, \"readonly\");\r\n//                       }}\r\n//                     />\r\n//                   )}\r\n//               </div>\r\n//             );\r\n//           },\r\n//         },\r\n//         // {\r\n//         //   headerName: \"Full Name\",\r\n//         //   field: \"orderItems\",\r\n//         //   filter: true,\r\n//         //   width: 180,\r\n//         //   valueGetter: params => {\r\n//         //     if (params.data.orderItems && params.data.orderItems.length > 0) {\r\n//         //       return params.data.fullName;\r\n//         //     }\r\n//         //     return null;\r\n//         //   },\r\n//         // },\r\n\r\n//         {\r\n//           headerName: \"Product Name\",\r\n//           field: \"returnItems\",\r\n//           filter: true,\r\n//           width: 220,\r\n//           valueGetter: params => {\r\n//             if (params.data.returnItems && params.data.returnItems.length > 0) {\r\n//               return params?.data?.returnItems?.map(val => {\r\n//                 return val?.productId.Product_Title;\r\n//               });\r\n//             }\r\n//             return null;\r\n//           },\r\n//         },\r\n//         {\r\n//           headerName: \"Size\",\r\n//           field: \"returnItems\",\r\n//           filter: true,\r\n//           width: 220,\r\n//           valueGetter: params => {\r\n//             if (params.data.returnItems && params.data.returnItems.length > 0) {\r\n//               return params?.data?.returnItems?.map(val => {\r\n//                 return val?.productId.Size;\r\n//               });\r\n//             }\r\n//             return null;\r\n//           },\r\n//         },\r\n//         {\r\n//           headerName: \"HSN_Code\",\r\n//           field: \"returnItems\",\r\n//           filter: true,\r\n//           width: 220,\r\n//           valueGetter: params => {\r\n//             if (params.data.returnItems && params.data.returnItems.length > 0) {\r\n//               return params?.data?.returnItems?.map(val => {\r\n//                 return val?.productId.HSN_Code;\r\n//               });\r\n//             }\r\n//             return null;\r\n//           },\r\n//         },\r\n//         {\r\n//           headerName: \"Email\",\r\n//           field: \"email\",\r\n//           filter: true,\r\n//           width: 200,\r\n//           cellRendererFramework: params => {\r\n//             return (\r\n//               <div>\r\n//                 <span>{params.data?.email}</span>\r\n//               </div>\r\n//             );\r\n//           },\r\n//         },\r\n\r\n//         {\r\n//           headerName: \"MobileNo\",\r\n//           field: \"mobileNumber\",\r\n//           filter: true,\r\n//           width: 150,\r\n//           cellRendererFramework: params => {\r\n//             return (\r\n//               <div>\r\n//                 <span>{params.data?.mobileNumber}</span>\r\n//               </div>\r\n//             );\r\n//           },\r\n//         },\r\n\r\n//         // {\r\n//         //   headerName: \"Status\",\r\n//         //   field: \"status\",\r\n//         //   filter: true,\r\n//         //   width: 150,\r\n//         //   cellRendererFramework: params => {\r\n//         //     return params.value === \"completed\" ? (\r\n//         //       <div className=\"badge badge-pill badge-success\">\r\n//         //         {params.data.status}\r\n//         //       </div>\r\n//         //     ) : params.value === \"pending\" ? (\r\n//         //       <div className=\"badge badge-pill badge-warning\">\r\n//         //         {params.data.status}\r\n//         //       </div>\r\n//         //     ) : (\r\n//         //       <div className=\"badge badge-pill badge-success\">\r\n//         //         {params.data.status}\r\n//         //       </div>\r\n//         //     );\r\n//         //   },\r\n//         // },\r\n//       ],\r\n//     };\r\n//   }\r\n//   toggleModal = () => {\r\n//     this.setState(prevState => ({\r\n//       modalone: !prevState.modalone,\r\n//     }));\r\n//   };\r\n//   LookupviewStart = () => {\r\n//     this.setState(prevState => ({\r\n//       modal: !prevState.modal,\r\n//     }));\r\n//   };\r\n\r\n//   handleChangeView = (data, types) => {\r\n//     let type = types;\r\n//     if (type == \"readonly\") {\r\n//       console.log(\"ResponseData\", data.orderItems);\r\n//       this.setState({ ViewOneUserView: true });\r\n//       this.setState({ ViewOneData: data });\r\n//     } else {\r\n//       this.setState({ EditOneUserView: true });\r\n//       this.setState({ EditOneData: data });\r\n//     }\r\n//   };\r\n\r\n//   async componentDidMount() {\r\n//     const UserInformation = this.context?.UserInformatio;\r\n//     const InsidePermissions = CheckPermission(\"Sales Return\");\r\n//     this.setState({ InsiderPermissions: InsidePermissions });\r\n//     await Purchase_ReturnList()\r\n//       .then(res => {\r\n//         console.log(res);\r\n//         this.setState({ rowData: res?.PurchaseReturn });\r\n//         // this.setState({ userName: UserInformation.firstName });\r\n//         this.setState({ AllcolumnDefs: this.state.columnDefs });\r\n//         this.setState({ SelectedCols: this.state.columnDefs });\r\n\r\n//         let userHeading = JSON.parse(localStorage.getItem(\"TargetList\"));\r\n//         if (userHeading?.length) {\r\n//           this.setState({ columnDefs: userHeading });\r\n//           this.gridApi.setColumnDefs(userHeading);\r\n//           this.setState({ SelectedcolumnDefs: userHeading });\r\n//         } else {\r\n//           this.setState({ columnDefs: this.state.columnDefs });\r\n//           this.setState({ SelectedcolumnDefs: this.state.columnDefs });\r\n//         }\r\n//       })\r\n//       .catch(err => {\r\n//         console.log(err);\r\n//       });\r\n//   }\r\n\r\n//   runthisfunction(id) {\r\n//     debugger;\r\n//     swal(\"Warning\", \"Sure You Want to Delete it\", {\r\n//       buttons: {\r\n//         cancel: \"cancel\",\r\n//         catch: { text: \"Delete \", value: \"delete\" },\r\n//       },\r\n//     }).then(value => {\r\n//       switch (value) {\r\n//         case \"delete\":\r\n//           Delete_targetINlist(id)\r\n//             .then(res => {\r\n//               let selectedData = this.gridApi.getSelectedRows();\r\n//               this.gridApi.updateRowData({ remove: selectedData });\r\n//             })\r\n//             .catch(err => {\r\n//               console.log(err);\r\n//             });\r\n//           break;\r\n//         default:\r\n//       }\r\n//     });\r\n//   }\r\n\r\n//   onGridReady = params => {\r\n//     this.gridApi = params.api;\r\n//     this.gridColumnApi = params.columnApi;\r\n//     this.gridRef.current = params.api;\r\n\r\n//     this.setState({\r\n//       currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\r\n//       getPageSize: this.gridApi.paginationGetPageSize(),\r\n//       totalPages: this.gridApi.paginationGetTotalPages(),\r\n//     });\r\n//   };\r\n\r\n//   updateSearchQuery = val => {\r\n//     this.gridApi.setQuickFilter(val);\r\n//   };\r\n\r\n//   filterSize = val => {\r\n//     if (this.gridApi) {\r\n//       this.gridApi.paginationSetPageSize(Number(val));\r\n//       this.setState({\r\n//         currenPageSize: val,\r\n//         getPageSize: val,\r\n//       });\r\n//     }\r\n//   };\r\n//   handleChangeHeader = (e, value, index) => {\r\n//     let check = e.target.checked;\r\n//     if (check) {\r\n//       SelectedColums?.push(value);\r\n//     } else {\r\n//       const delindex = SelectedColums?.findIndex(\r\n//         ele => ele?.headerName === value?.headerName\r\n//       );\r\n\r\n//       SelectedColums?.splice(delindex, 1);\r\n//     }\r\n//   };\r\n//   parseCsv(csvData) {\r\n//     return new Promise((resolve, reject) => {\r\n//       Papa.parse(csvData, {\r\n//         header: true,\r\n//         skipEmptyLines: true,\r\n//         complete: result => {\r\n//           if (result.data && result.data.length > 0) {\r\n//             resolve(result.data);\r\n//           } else {\r\n//             reject(new Error(\"No data found in the CSV\"));\r\n//           }\r\n//         },\r\n//         error: error => {\r\n//           reject(error);\r\n//         },\r\n//       });\r\n//     });\r\n//   }\r\n//   generatePDF(parsedData) {\r\n//     let pdfsize = [Object.keys(parsedData[0])][0].length;\r\n//     let size = pdfsize > 15 ? \"a1\" : pdfsize < 14 > 10 ? \"a3\" : \"a4\";\r\n\r\n//     const doc = new jsPDF(\"landscape\", \"mm\", size, false);\r\n//     doc.setTextColor(5, 87, 97);\r\n//     const tableData = parsedData.map(row => Object.values(row));\r\n//     doc.addImage(Logo, \"JPEG\", 10, 10, 50, 30);\r\n//     let date = new Date();\r\n//     doc.setCreationDate(date);\r\n//     doc.text(\"UserAccount\", 14, 51);\r\n//     doc.autoTable({\r\n//       head: [Object.keys(parsedData[0])],\r\n//       body: tableData,\r\n//       startY: 60,\r\n//     });\r\n\r\n//     doc.save(\"UserList.pdf\");\r\n//   }\r\n\r\n//   exportToPDF = async () => {\r\n//     const csvData = this.gridApi.getDataAsCsv({\r\n//       processCellCallback: this.processCell,\r\n//     });\r\n//     try {\r\n//       const parsedData = await this.parseCsv(csvData);\r\n//       this.generatePDF(parsedData);\r\n//     } catch (error) {\r\n//       console.error(\"Error parsing CSV:\", error);\r\n//     }\r\n//   };\r\n//   processCell = params => {\r\n//     return params.value;\r\n//   };\r\n\r\n//   convertCsvToExcel(csvData) {\r\n//     return new Promise(resolve => {\r\n//       Papa.parse(csvData, {\r\n//         header: true,\r\n//         dynamicTyping: true,\r\n//         skipEmptyLines: true,\r\n//         complete: function (result) {\r\n//           const worksheet = XLSX.utils.json_to_sheet(result.data);\r\n//           const workbook = XLSX.utils.book_new();\r\n//           XLSX.utils.book_append_sheet(workbook, worksheet, \"Sheet1\");\r\n//           const excelBuffer = XLSX.write(workbook, {\r\n//             bookType: \"xlsx\",\r\n//             type: \"array\",\r\n//           });\r\n//           const blob = new Blob([excelBuffer], {\r\n//             type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n//           });\r\n//           resolve(blob);\r\n//         },\r\n//       });\r\n//     });\r\n//   }\r\n//   downloadExcelFile(blob) {\r\n//     const url = window.URL.createObjectURL(blob);\r\n//     const a = document.createElement(\"a\");\r\n//     a.href = url;\r\n//     a.download = \"Userlist.xlsx\";\r\n//     document.body.appendChild(a);\r\n//     a.click();\r\n//     window.URL.revokeObjectURL(url);\r\n//   }\r\n\r\n//   exportToExcel = async e => {\r\n//     const CsvData = this.gridApi.getDataAsCsv({\r\n//       processCellCallback: this.processCell,\r\n//     });\r\n//     const blob = await this.convertCsvToExcel(CsvData);\r\n//     this.downloadExcelFile(blob);\r\n//   };\r\n\r\n//   convertCSVtoExcel = () => {\r\n//     const CsvData = this.gridApi.getDataAsCsv({\r\n//       processCellCallback: this.processCell,\r\n//     });\r\n//     Papa.parse(CsvData, {\r\n//       complete: result => {\r\n//         const ws = XLSX.utils.json_to_sheet(result.data);\r\n//         const wb = XLSX.utils.book_new();\r\n//         XLSX.utils.book_append_sheet(wb, ws, \"Sheet1\");\r\n//         const excelType = \"xls\";\r\n//         XLSX.writeFile(wb, `UserList.${excelType}`);\r\n//       },\r\n//     });\r\n//   };\r\n\r\n//   shiftElementUp = () => {\r\n//     let currentIndex = this.state.Arrindex;\r\n//     if (currentIndex > 0) {\r\n//       const myArrayCopy = [...this.state.SelectedcolumnDefs];\r\n//       const elementToMove = myArrayCopy.splice(currentIndex, 1)[0];\r\n//       this.setState({ Arrindex: currentIndex - 1 });\r\n//       myArrayCopy.splice(currentIndex - 1, 0, elementToMove);\r\n//       this.setState({ SelectedcolumnDefs: myArrayCopy });\r\n//     }\r\n//   };\r\n\r\n//   shiftElementDown = () => {\r\n//     let currentIndex = this.state.Arrindex;\r\n//     if (currentIndex < this.state.SelectedcolumnDefs.length - 1) {\r\n//       const myArrayCopy = [...this.state.SelectedcolumnDefs];\r\n//       const elementToMove = myArrayCopy.splice(currentIndex, 1)[0];\r\n//       this.setState({ Arrindex: currentIndex + 1 });\r\n//       myArrayCopy.splice(currentIndex + 1, 0, elementToMove);\r\n//       this.setState({ SelectedcolumnDefs: myArrayCopy });\r\n//     }\r\n//   };\r\n//   convertCsvToXml = () => {\r\n//     const CsvData = this.gridApi.getDataAsCsv({\r\n//       processCellCallback: this.processCell,\r\n//     });\r\n//     Papa.parse(CsvData, {\r\n//       complete: result => {\r\n//         const rows = result.data;\r\n\r\n//         // Create XML\r\n//         let xmlString = \"<root>\\n\";\r\n\r\n//         rows.forEach(row => {\r\n//           xmlString += \"  <row>\\n\";\r\n//           row.forEach((cell, index) => {\r\n//             xmlString += `    <field${index + 1}>${cell}</field${index + 1}>\\n`;\r\n//           });\r\n//           xmlString += \"  </row>\\n\";\r\n//         });\r\n\r\n//         xmlString += \"</root>\";\r\n//         const blob = new Blob([xmlString], { type: \"text/xml\" });\r\n//         const link = document.createElement(\"a\");\r\n//         link.href = URL.createObjectURL(blob);\r\n//         link.download = \"output.xml\";\r\n//         link.click();\r\n//       },\r\n//     });\r\n//   };\r\n\r\n//   HandleSetVisibleField = e => {\r\n//     e.preventDefault();\r\n//     debugger;\r\n//     this.gridApi.setColumnDefs(this.state.SelectedcolumnDefs);\r\n//     this.setState({ columnDefs: this.state.SelectedcolumnDefs });\r\n//     this.setState({ SelectedcolumnDefs: this.state.SelectedcolumnDefs });\r\n//     this.setState({ rowData: this.state.rowData });\r\n//     localStorage.setItem(\r\n//       \"TargetList\",\r\n//       JSON.stringify(this.state.SelectedcolumnDefs)\r\n//     );\r\n//     this.LookupviewStart();\r\n//   };\r\n//   toggleDropdown = () => {\r\n//     this.setState(prevState => ({ isOpen: !prevState.isOpen }));\r\n//   };\r\n//   HeadingRightShift = () => {\r\n//     const updatedSelectedColumnDefs = [\r\n//       ...new Set([\r\n//         ...this.state.SelectedcolumnDefs.map(item => JSON.stringify(item)),\r\n//         ...SelectedColums.map(item => JSON.stringify(item)),\r\n//       ]),\r\n//     ].map(item => JSON.parse(item));\r\n//     this.setState({\r\n//       SelectedcolumnDefs: [...new Set(updatedSelectedColumnDefs)], // Update the state with the combined array\r\n//     });\r\n//   };\r\n//   handleLeftShift = () => {\r\n//     let SelectedCols = this.state.SelectedcolumnDefs?.slice();\r\n//     let delindex = this.state.Arrindex; /* Your delete index here */\r\n\r\n//     if (SelectedCols && delindex >= 0) {\r\n//       const splicedElement = SelectedCols?.splice(delindex, 1); // Remove the element\r\n\r\n//       this.setState({\r\n//         SelectedcolumnDefs: SelectedCols, // Update the state with the modified array\r\n//       });\r\n//     }\r\n//   };\r\n//   render() {\r\n//     const {\r\n//       rowData,\r\n//       columnDefs,\r\n//       defaultColDef,\r\n//       SelectedcolumnDefs,\r\n//       isOpen,\r\n//       SelectedCols,\r\n//       InsiderPermissions,\r\n//       AllcolumnDefs,\r\n//     } = this.state;\r\n//     return (\r\n//       <>\r\n//         <Col className=\"app-user-list\">\r\n//           {this.state.EditOneUserView && this.state.EditOneUserView ? (\r\n//             <Row className=\"card\">\r\n//               <Col>\r\n//                 <div className=\"d-flex justify-content-end p-1\">\r\n//                   <Button\r\n//                     onClick={e => {\r\n//                       e.preventDefault();\r\n//                       this.setState({ EditOneUserView: false });\r\n//                     }}\r\n//                     color=\"danger\"\r\n//                   >\r\n//                     Back\r\n//                   </Button>\r\n//                 </div>\r\n//               </Col>\r\n\r\n//               {/* <EditAccount EditOneData={this.state.EditOneData} /> */}\r\n//             </Row>\r\n//           ) : (\r\n//             <>\r\n//               {this.state.ViewOneUserView && this.state.ViewOneUserView ? (\r\n//                 <>\r\n//                   <Row className=\"card\">\r\n//                     <Col>\r\n//                       <div className=\"d-flex justify-content-end p-1\">\r\n//                         <Button\r\n//                           onClick={e => {\r\n//                             e.preventDefault();\r\n//                             this.setState({ ViewOneUserView: false });\r\n//                           }}\r\n//                           color=\"danger\"\r\n//                         >\r\n//                           Back\r\n//                         </Button>\r\n//                       </div>\r\n//                     </Col>\r\n//                     <SalesReturnView ViewOneData={this.state.ViewOneData} />\r\n//                   </Row>\r\n//                 </>\r\n//               ) : (\r\n//                 <>\r\n//                   <Col sm=\"12\">\r\n//                     <Card>\r\n//                       <Row className=\"mt-2 ml-2 mr-2\">\r\n//                         <Col>\r\n//                           <h1\r\n//                             className=\"float-left\"\r\n//                             style={{ fontWeight: \"600\" }}\r\n//                           >\r\n//                             Purchase Return List\r\n//                           </h1>\r\n//                         </Col>\r\n\r\n//                         {InsiderPermissions && InsiderPermissions?.View && (\r\n//                           <Col>\r\n//                             <span className=\"mx-1\">\r\n//                               <FaFilter\r\n//                                 style={{ cursor: \"pointer\" }}\r\n//                                 title=\"filter coloumn\"\r\n//                                 size=\"35px\"\r\n//                                 onClick={this.LookupviewStart}\r\n//                                 color=\"#39cccc\"\r\n//                                 className=\"float-right\"\r\n//                               />\r\n//                             </span>\r\n//                             <span className=\"mx-1\">\r\n//                               <div className=\"dropdown-container float-right\">\r\n//                                 <ImDownload\r\n//                                   style={{ cursor: \"pointer\" }}\r\n//                                   title=\"download file\"\r\n//                                   size=\"35px\"\r\n//                                   className=\"dropdown-button \"\r\n//                                   color=\"#39cccc\"\r\n//                                   onClick={this.toggleDropdown}\r\n//                                 />\r\n//                                 {isOpen && (\r\n//                                   <div\r\n//                                     style={{\r\n//                                       position: \"absolute\",\r\n//                                       zIndex: \"1\",\r\n//                                       border: \"1px solid #39cccc\",\r\n//                                       backgroundColor: \"white\",\r\n//                                     }}\r\n//                                     className=\"dropdown-content dropdownmy\"\r\n//                                   >\r\n//                                     <h5\r\n//                                       onClick={() => this.exportToPDF()}\r\n//                                       style={{ cursor: \"pointer\" }}\r\n//                                       className=\" mx-1 myactive mt-1\"\r\n//                                     >\r\n//                                       .PDF\r\n//                                     </h5>\r\n//                                     <h5\r\n//                                       onClick={() =>\r\n//                                         this.gridApi.exportDataAsCsv()\r\n//                                       }\r\n//                                       style={{ cursor: \"pointer\" }}\r\n//                                       className=\" mx-1 myactive\"\r\n//                                     >\r\n//                                       .CSV\r\n//                                     </h5>\r\n//                                     <h5\r\n//                                       onClick={this.convertCSVtoExcel}\r\n//                                       style={{ cursor: \"pointer\" }}\r\n//                                       className=\" mx-1 myactive\"\r\n//                                     >\r\n//                                       .XLS\r\n//                                     </h5>\r\n//                                     <h5\r\n//                                       onClick={this.exportToExcel}\r\n//                                       style={{ cursor: \"pointer\" }}\r\n//                                       className=\" mx-1 myactive\"\r\n//                                     >\r\n//                                       .XLSX\r\n//                                     </h5>\r\n//                                     <h5\r\n//                                       onClick={() => this.convertCsvToXml()}\r\n//                                       style={{ cursor: \"pointer\" }}\r\n//                                       className=\" mx-1 myactive\"\r\n//                                     >\r\n//                                       .XML\r\n//                                     </h5>\r\n//                                   </div>\r\n//                                 )}\r\n//                               </div>\r\n//                             </span>\r\n//                             {/* <span>\r\n//                             <Route\r\n//                               render={({ history }) => (\r\n//                                 <Badge\r\n//                                   style={{ cursor: \"pointer\" }}\r\n//                                   className=\"float-right mr-1\"\r\n//                                   color=\"primary\"\r\n//                                   onClick={() =>\r\n//                                     history.push(\r\n//                                       \"/app/softnumen/order/createorder\"\r\n//                                     )\r\n//                                   }\r\n//                                 >\r\n//                                   <FaPlus size={15} /> Create Order\r\n//                                 </Badge>\r\n//                               )}\r\n//                             />\r\n//                           </span> */}\r\n//                           </Col>\r\n//                         )}\r\n//                       </Row>\r\n//                       <CardBody style={{ marginTop: \"-1.5rem\" }}>\r\n//                         {this.state.rowData === null ? null : (\r\n//                           <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\r\n//                             <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\r\n//                               <div className=\"mb-1\">\r\n//                                 <UncontrolledDropdown className=\"p-1 ag-dropdown\">\r\n//                                   <DropdownToggle tag=\"div\">\r\n//                                     {this.gridApi\r\n//                                       ? this.state.currenPageSize\r\n//                                       : \"\" * this.state.getPageSize -\r\n//                                         (this.state.getPageSize - 1)}{\" \"}\r\n//                                     -{\" \"}\r\n//                                     {this.state.rowData.length -\r\n//                                       this.state.currenPageSize *\r\n//                                         this.state.getPageSize >\r\n//                                     0\r\n//                                       ? this.state.currenPageSize *\r\n//                                         this.state.getPageSize\r\n//                                       : this.state.rowData.length}{\" \"}\r\n//                                     of {this.state.rowData.length}\r\n//                                     <ChevronDown className=\"ml-50\" size={15} />\r\n//                                   </DropdownToggle>\r\n//                                   <DropdownMenu right>\r\n//                                     <DropdownItem\r\n//                                       tag=\"div\"\r\n//                                       onClick={() => this.filterSize(5)}\r\n//                                     >\r\n//                                       5\r\n//                                     </DropdownItem>\r\n//                                     <DropdownItem\r\n//                                       tag=\"div\"\r\n//                                       onClick={() => this.filterSize(20)}\r\n//                                     >\r\n//                                       20\r\n//                                     </DropdownItem>\r\n//                                     <DropdownItem\r\n//                                       tag=\"div\"\r\n//                                       onClick={() => this.filterSize(50)}\r\n//                                     >\r\n//                                       50\r\n//                                     </DropdownItem>\r\n//                                     <DropdownItem\r\n//                                       tag=\"div\"\r\n//                                       onClick={() => this.filterSize(100)}\r\n//                                     >\r\n//                                       100\r\n//                                     </DropdownItem>\r\n//                                     <DropdownItem\r\n//                                       tag=\"div\"\r\n//                                       onClick={() => this.filterSize(134)}\r\n//                                     >\r\n//                                       134\r\n//                                     </DropdownItem>\r\n//                                   </DropdownMenu>\r\n//                                 </UncontrolledDropdown>\r\n//                               </div>\r\n//                               <div className=\"d-flex flex-wrap justify-content-end mb-1\">\r\n//                                 <div className=\"table-input mr-1\">\r\n//                                   <Input\r\n//                                     placeholder=\"search Item here...\"\r\n//                                     onChange={e =>\r\n//                                       this.updateSearchQuery(e.target.value)\r\n//                                     }\r\n//                                     value={this.state.value}\r\n//                                   />\r\n//                                 </div>\r\n//                               </div>\r\n//                             </div>\r\n//                             <ContextLayout.Consumer className=\"ag-theme-alpine\">\r\n//                               {context => (\r\n//                                 <AgGridReact\r\n//                                   id=\"myAgGrid\"\r\n//                                   gridOptions={this.gridOptions}\r\n//                                   rowSelection=\"multiple\"\r\n//                                   defaultColDef={defaultColDef}\r\n//                                   columnDefs={columnDefs}\r\n//                                   rowData={rowData}\r\n//                                   onGridReady={this.onGridReady}\r\n//                                   colResizeDefault={\"shift\"}\r\n//                                   animateRows={true}\r\n//                                   floatingFilter={false}\r\n//                                   pagination={true}\r\n//                                   paginationPageSize={\r\n//                                     this.state.paginationPageSize\r\n//                                   }\r\n//                                   pivotPanelShow=\"always\"\r\n//                                   enableRtl={context.state.direction === \"rtl\"}\r\n//                                   ref={this.gridRef} // Attach the ref to the grid\r\n//                                   domLayout=\"autoHeight\" // Adjust layout as needed\r\n//                                 />\r\n//                               )}\r\n//                             </ContextLayout.Consumer>\r\n//                           </div>\r\n//                         )}\r\n//                       </CardBody>\r\n//                     </Card>\r\n//                   </Col>\r\n//                 </>\r\n//               )}\r\n//             </>\r\n//           )}\r\n//         </Col>\r\n\r\n//         <Modal\r\n//           isOpen={this.state.modal}\r\n//           toggle={this.LookupviewStart}\r\n//           className={this.props.className}\r\n//           style={{ maxWidth: \"1050px\" }}\r\n//         >\r\n//           <ModalHeader toggle={this.LookupviewStart}>Change Fileds</ModalHeader>\r\n//           <ModalBody className=\"modalbodyhead\">\r\n//             <Row>\r\n//               <Col lg=\"4\" md=\"4\" sm=\"12\" xl=\"4\" xs=\"12\">\r\n//                 <h4>Available Columns</h4>\r\n//                 <div className=\"mainshffling\">\r\n//                   <div class=\"ex1\">\r\n//                     {AllcolumnDefs &&\r\n//                       AllcolumnDefs?.map((ele, i) => {\r\n//                         return (\r\n//                           <>\r\n//                             <div\r\n//                               onClick={e => this.handleChangeHeader(e, ele, i)}\r\n//                               key={i}\r\n//                               className=\"mycustomtag mt-1\"\r\n//                             >\r\n//                               <span className=\"mt-1\">\r\n//                                 <h5\r\n//                                   style={{ cursor: \"pointer\" }}\r\n//                                   className=\"allfields\"\r\n//                                 >\r\n//                                   <input\r\n//                                     type=\"checkbox\"\r\n//                                     // checked={check && check}\r\n//                                     className=\"mx-1\"\r\n//                                   />\r\n\r\n//                                   {ele?.headerName}\r\n//                                 </h5>\r\n//                               </span>\r\n//                             </div>\r\n//                           </>\r\n//                         );\r\n//                       })}\r\n//                   </div>\r\n//                 </div>\r\n//               </Col>\r\n//               <Col lg=\"2\" md=\"2\" sm=\"12\" xl=\"2\" xs=\"12\" className=\"colarrowbtn\">\r\n//                 <div className=\"mainarrowbtn\">\r\n//                   <div style={{ cursor: \"pointer\" }}>\r\n//                     <FaArrowAltCircleRight\r\n//                       onClick={this.HeadingRightShift}\r\n//                       className=\"arrowassign\"\r\n//                       size=\"30px\"\r\n//                     />\r\n//                   </div>\r\n//                   <div style={{ cursor: \"pointer\" }} className=\"my-2\">\r\n//                     <FaArrowAltCircleLeft\r\n//                       onClick={this.handleLeftShift}\r\n//                       className=\"arrowassign\"\r\n//                       size=\"30px\"\r\n//                     />\r\n//                   </div>\r\n//                 </div>\r\n//               </Col>\r\n//               <Col lg=\"6\" md=\"6\" sm=\"12\" xl=\"6\" xs=\"12\">\r\n//                 <Row>\r\n//                   <Col lg=\"8\" md=\"8\" sm=\"12\" xs=\"12\">\r\n//                     <h4>Visible Columns</h4>\r\n//                     <div className=\"mainshffling\">\r\n//                       <div class=\"ex1\">\r\n//                         {SelectedcolumnDefs &&\r\n//                           SelectedcolumnDefs?.map((ele, i) => {\r\n//                             return (\r\n//                               <>\r\n//                                 <div key={i} className=\"mycustomtag mt-1\">\r\n//                                   <span className=\"mt-1\">\r\n//                                     <h5\r\n//                                       onClick={() =>\r\n//                                         this.setState({ Arrindex: i })\r\n//                                       }\r\n//                                       style={{\r\n//                                         cursor: \"pointer\",\r\n//                                         backgroundColor: `${\r\n//                                           this.state.Arrindex === i\r\n//                                             ? \"#1877f2\"\r\n//                                             : \"\"\r\n//                                         }`,\r\n//                                       }}\r\n//                                       className=\"allfields\"\r\n//                                     >\r\n//                                       <IoMdRemoveCircleOutline\r\n//                                         onClick={() => {\r\n//                                           const SelectedCols =\r\n//                                             this.state.SelectedcolumnDefs?.slice();\r\n//                                           const delindex =\r\n//                                             SelectedCols?.findIndex(\r\n//                                               element =>\r\n//                                                 element?.headerName ==\r\n//                                                 ele?.headerName\r\n//                                             );\r\n\r\n//                                           if (SelectedCols && delindex >= 0) {\r\n//                                             const splicedElement =\r\n//                                               SelectedCols?.splice(delindex, 1); // Remove the element\r\n//                                             // splicedElement contains the removed element, if needed\r\n\r\n//                                             this.setState({\r\n//                                               SelectedcolumnDefs: SelectedCols, // Update the state with the modified array\r\n//                                             });\r\n//                                           }\r\n//                                         }}\r\n//                                         style={{ cursor: \"pointer\" }}\r\n//                                         size=\"25px\"\r\n//                                         color=\"red\"\r\n//                                         className=\"mr-1\"\r\n//                                       />\r\n\r\n//                                       {ele?.headerName}\r\n//                                     </h5>\r\n//                                   </span>\r\n//                                 </div>\r\n//                               </>\r\n//                             );\r\n//                           })}\r\n//                       </div>\r\n//                     </div>\r\n//                   </Col>\r\n//                   <Col lg=\"4\" md=\"4\" sm=\"12\" xs=\"12\">\r\n//                     <div className=\"updownbtn justify-content-center\">\r\n//                       <div>\r\n//                         <BsFillArrowUpSquareFill\r\n//                           className=\"arrowassign mb-1\"\r\n//                           size=\"30px\"\r\n//                           onClick={this.shiftElementUp}\r\n//                         />\r\n//                       </div>\r\n//                       <div>\r\n//                         <BsFillArrowDownSquareFill\r\n//                           onClick={this.shiftElementDown}\r\n//                           className=\"arrowassign\"\r\n//                           size=\"30px\"\r\n//                         />\r\n//                       </div>\r\n//                     </div>\r\n//                   </Col>\r\n//                 </Row>\r\n//               </Col>\r\n//             </Row>\r\n//             <Row>\r\n//               <Col>\r\n//                 <div className=\"d-flex justify-content-center\">\r\n//                   {/* <Button onClick={this.HandleSetVisibleField} color=\"primary\">\r\n//                     Submit\r\n//                   </Button> */}\r\n\r\n//                   <Badge\r\n//                     style={{ cursor: \"pointer\" }}\r\n//                     className=\"\"\r\n//                     color=\"primary\"\r\n//                     onClick={this.HandleSetVisibleField}\r\n//                   >\r\n//                     Submit\r\n//                   </Badge>\r\n//                 </div>\r\n//               </Col>\r\n//             </Row>\r\n//           </ModalBody>\r\n//         </Modal>\r\n//         <Modal\r\n//           isOpen={this.state.modalone}\r\n//           toggle={this.toggleModal}\r\n//           className=\"modal-dialog modal-xl\"\r\n//           size=\"lg\"\r\n//           backdrop={true}\r\n//           fullscreen={true}\r\n//         >\r\n//           <ModalHeader toggle={this.toggleModal}>View Details</ModalHeader>\r\n//           <ModalBody className=\"myproducttable\"></ModalBody>\r\n//         </Modal>\r\n//       </>\r\n//     );\r\n//   }\r\n// }\r\n// export default PurchaseReturn;\r\n\r\nimport React, { useEffect, useState, useContext } from \"react\";\r\nimport xmlJs from \"xml-js\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Form,\r\n  Row,\r\n  Input,\r\n  Label,\r\n  Button,\r\n} from \"reactstrap\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { useParams, useLocation } from \"react-router-dom\";\r\n\r\nimport \"../../../../../assets/scss/pages/users.scss\";\r\nimport {\r\n  PurchaseReturn,\r\n  ProductListView,\r\n  Create_Sales_personList,\r\n} from \"../../../../../ApiEndPoint/ApiCalling\";\r\nimport \"../../../../../assets/scss/pages/users.scss\";\r\nimport { Route } from \"react-router-dom\";\r\n\r\nconst SalesReturnView = args => {\r\n  const [Index, setIndex] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [ProductList, setProductList] = useState([]);\r\n  const [grandTotalAmt, setGrandTotalAmt] = useState(0);\r\n  const [Editdata, setEditdata] = useState({});\r\n  const [UserInfo, setUserInfo] = useState({});\r\n  const [SalesPersonList, setSalesPersonList] = useState([]);\r\n  const Params = useParams();\r\n  const location = useLocation();\r\n\r\n  const [OrderedListData, setOrderedListData] = useState([\r\n    {\r\n      productId: \"\",\r\n      Product_Title: \"\",\r\n      Qty_Sales: \"\",\r\n      Qty_Return: 0,\r\n      Product_Price: \"\",\r\n    },\r\n  ]);\r\n\r\n  const handleProductChangeProduct = (e, index) => {\r\n    setIndex(index);\r\n    const { name, value } = e.target;\r\n    const list = [...OrderedListData];\r\n    list[index][name] = value;\r\n    setOrderedListData(list);\r\n  };\r\n  useEffect(() => {\r\n    let getFromLocalData = JSON.parse(\r\n      localStorage.getItem(\"OrderList\")\r\n    ).orderItems;\r\n    if (location?.state) {\r\n      console.log(location?.state);\r\n      setOrderedListData(location?.state.orderItems);\r\n      let grandTotal = location?.state.orderItems.reduce(\r\n        (a, b) => a + b.price,\r\n        0\r\n      );\r\n\r\n      setGrandTotalAmt(grandTotal);\r\n      localStorage.setItem(\"EditoneProduct\", location?.state);\r\n      setEditdata(location?.state);\r\n    } else {\r\n      // let mydata = localStorage.getItem(\"EditoneProduct\");\r\n      setOrderedListData(getFromLocalData);\r\n      let grandTotal = location?.state.orderItems.reduce(\r\n        (a, b) => a + b.price,\r\n        0\r\n      );\r\n\r\n      setGrandTotalAmt(grandTotal);\r\n    }\r\n  }, []);\r\n  useEffect(() => {\r\n    console.log(OrderedListData);\r\n  }, [OrderedListData]);\r\n\r\n  useEffect(() => {\r\n    Create_Sales_personList()\r\n      .then(res => {\r\n        setSalesPersonList(res?.SalesPerson);\r\n      })\r\n      .catch(err => console.log(err));\r\n    ProductListView()\r\n      .then(res => {\r\n        setProductList(res?.Product);\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userData\"));\r\n    console.log(userInfo);\r\n    setUserInfo(userInfo);\r\n  }, []);\r\n\r\n  const submitHandler = e => {\r\n    e.preventDefault();\r\n    debugger;\r\n    console.log(OrderedListData);\r\n    let userData = JSON.parse(localStorage.getItem(\"userData\"));\r\n    // console.log(userData);\r\n\r\n    let myarr = OrderedListData?.map((ele, i) => {\r\n      return {\r\n        productId: ele?.product?._id,\r\n        Qty_Purchased: ele?.qty,\r\n        Qty_Return: Number(ele?.returnQty),\r\n        Product_Price: ele?.price,\r\n      };\r\n    });\r\n\r\n    let payload = {\r\n      userId: userData?._id,\r\n      // status: \"return\",\r\n      returnItems: myarr,\r\n      mobileNumber: userData?.mobileNumber,\r\n      email: userData.email,\r\n      Return_amount: grandTotalAmt,\r\n      orderId: location?.state?._id,\r\n    };\r\n\r\n    if (error) {\r\n      swal(\"Error occured while Entering Details\");\r\n    } else {\r\n      console.log(payload);\r\n      PurchaseReturn(payload)\r\n        .then(res => {\r\n          swal(\"Purchase Returned Successfully\");\r\n          history.push(\"/app/AJgroup/order/purchaseOrderList\");\r\n          console.log(res);\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Card>\r\n          <Row className=\"m-2\">\r\n            <Col className=\"\">\r\n              <div>\r\n                <h1 className=\"\">Purchase Return</h1>\r\n              </div>\r\n            </Col>\r\n            <Col>\r\n              <div className=\"float-right\">\r\n                <Route\r\n                  render={({ history }) => (\r\n                    <Button\r\n                      style={{ cursor: \"pointer\" }}\r\n                      className=\"float-right mr-1\"\r\n                      color=\"danger\"\r\n                      size=\"sm\"\r\n                      onClick={() => history.goBack()}\r\n                    >\r\n                      Back\r\n                    </Button>\r\n                  )}\r\n                />\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n\r\n          <CardBody>\r\n            <Form className=\"m-1\" onSubmit={submitHandler}>\r\n              {OrderedListData &&\r\n                OrderedListData?.map((item, index) => {\r\n                  return (\r\n                    <Row className=\"\" key={index}>\r\n                      <Col className=\"mb-1\" lg=\"2\" md=\"2\" sm=\"12\">\r\n                        <div className=\"\">\r\n                          <Label>Product Name</Label>\r\n                          <Input\r\n                            type=\"text\"\r\n                            name=\"Product_Title\"\r\n                            readOnly\r\n                            placeholder=\"Product Name\"\r\n                            value={item?.product?.Product_Title}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col className=\"mb-1\" lg=\"2\" md=\"2\" sm=\"12\">\r\n                        <div className=\"\">\r\n                          <Label>Price</Label>\r\n                          <Input\r\n                            type=\"text\"\r\n                            name=\"price\"\r\n                            readOnly\r\n                            placeholder=\"Price\"\r\n                            value={item?.price}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col className=\"mb-1\" lg=\"2\" md=\"2\" sm=\"12\">\r\n                        <div className=\"\">\r\n                          <Label>Purchased Quantity</Label>\r\n                          <Input\r\n                            type=\"number\"\r\n                            readOnly\r\n                            name=\"qty\"\r\n                            placeholder=\"Req_Qty\"\r\n                            value={item?.qty}\r\n                            onChange={e => handleProductChangeProduct(e, index)}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                      <Col className=\"mb-1\" lg=\"2\" md=\"2\" sm=\"12\">\r\n                        <div className=\"\">\r\n                          <Label>Return Quantity</Label>\r\n                          <Input\r\n                            type=\"number\"\r\n                            name=\"returnQty\"\r\n                            placeholder=\"Return Quantity\"\r\n                            value={OrderedListData.returnQty}\r\n                            onChange={e => handleProductChangeProduct(e, index)}\r\n                          />\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                  );\r\n                })}\r\n              <Row>\r\n                <Col className=\"mb-1\" lg=\"12\" md=\"12\" sm=\"12\">\r\n                  <div className=\" d-flex justify-content-end\">\r\n                    <Label className=\"pr-5\">\r\n                      Grand Total : <stron>{grandTotalAmt}</stron>\r\n                    </Label>\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <div className=\"d-flex justify-content-center\">\r\n                    <Button.Ripple\r\n                      color=\"primary\"\r\n                      type=\"submit\"\r\n                      className=\"mt-2\"\r\n                    >\r\n                      Submit\r\n                    </Button.Ripple>\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n            </Form>\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default SalesReturnView;\r\n"],"sourceRoot":""}