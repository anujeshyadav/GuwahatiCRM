{"version":3,"sources":["views/apps/freshlist/customer/transporter/CreateTransporter.js","../node_modules/reactstrap/es/FormGroup.js"],"names":["StateList","id","state_title","CreateTransporter","useState","CreatTransporterView","setCreatTransporterView","Countries","setCountry","States","setState","Cities","setCities","setSelectedValue","formData","setFormData","index","setindex","error","setError","handleInputChange","e","type","i","target","name","value","console","log","test","length","useEffect","Createtransporterxml","then","res","jsonData","xmlJs","xml2json","data","compact","spaces","JSON","parse","catch","err","className","render","history","onClick","push","onSubmit","preventDefault","swal","Createtransportersave","status","message","lg","md","sm","required","showCheckbox","isObject","options","onSelect","selectedList","selectedItem","onRemove","removedItem","displayValue","input","map","ele","phoneinput","key","label","_text","inputClass","country","onKeyDown","_attributes","includes","countryCodeEditable","onChange","phone","style","color","library","Country","getAllCountries","getOptionLabel","getOptionValue","State","getStatesOfCountry","isoCode","City","getCitiesOfState","countryCode","placeholder","Ripple","_excluded","propTypes","children","PropTypes","node","row","bool","check","inline","disabled","tag","tagPropType","string","cssModule","object","FormGroup","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps"],"mappings":"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","file":"static/js/337.0cb2c4a8.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef ,useContext } from \"react\";\r\nimport xmlJs from \"xml-js\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport Multiselect from \"multiselect-react-dropdown\";\r\nimport { Country, State, City } from \"country-state-city\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Form,\r\n  Row,\r\n  Input,\r\n  Label,\r\n  Button,\r\n  FormGroup,\r\n  CustomInput,\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport swal from \"sweetalert\";\r\nimport { Route } from \"react-router-dom\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\n\r\nimport { history } from \"../../../../../history\";\r\nimport \"../../../../../../src/layouts/assets/scss/pages/users.scss\";\r\nimport {\r\n  Createtransporterxml,\r\n  Createtransportersave,\r\n} from \"../../../../../ApiEndPoint/ApiCalling\";\r\nimport \"../../../../../assets/scss/pages/users.scss\";\r\n// import UserContext from \"../../../../../context/Context\";\r\nconst StateList = [\r\n    { id: 1, state_title: 'Clothing & Apparel.' },\r\n    { id: 2, state_title: 'Footwear & Shoes.' },\r\n    { id: 3, state_title: 'Electronics & Gadgets.' },\r\n    // Add more states as needed\r\n  ];\r\nconst CreateTransporter = () => {\r\n  const [CreatTransporterView, setCreatTransporterView] = useState({});\r\n  const [Countries, setCountry] = useState({});\r\n  const [States, setState] = useState({});\r\n  const [Cities, setCities] = useState({});\r\n//   const [StateList, setCityList] = useState([]);\r\n  const [selectedValue, setSelectedValue] = useState([]);\r\n  const [formData, setFormData] = useState({});\r\n  const [index, setindex] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [permissions, setpermissions] = useState({});\r\n//   const formRef = useRef(null);\r\n  // const createUserXmlView = useContext(UserContext);\r\n\r\n  const handleInputChange = (e, type, i) => {\r\n    const { name, value } = e.target;\r\n    console.log(value)\r\n  setindex(i);\r\n if (type == \"number\") {\r\n      if (/^\\d{0,10}$/.test(value)) {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: value,\r\n        });\r\n        setError(\"\");\r\n      } else {\r\n        setError(\r\n          \"Please enter a valid number with a maximum length of 10 digits\"\r\n        );\r\n      }\r\n    } else {\r\n      if (value.length <= 10) {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: value,\r\n        });\r\n        // console.log(value);\r\n        setError(\"\");\r\n      } else {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: value,\r\n        });\r\n        // setError(\"Input length exceeds the maximum of 10 characters\");\r\n      }\r\n    }\r\n\r\n  };\r\n\r\n\r\nuseEffect(() => {\r\n  Createtransporterxml()\r\n      .then(res => {\r\n        const jsonData = xmlJs.xml2json(res.data, { compact: true, spaces: 2 });\r\n       setCreatTransporterView(JSON.parse(jsonData))\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  const onSelect1 = (selectedList, selectedItem) => {\r\n    setSelectedValue(selectedList)\r\n    console.log('Selected:', selectedList);\r\n };\r\n  const onRemove1 = (selectedList, removedItem) => {\r\n    setSelectedValue(selectedList); \r\n    console.log('Removed:', selectedList);\r\n  };\r\n\r\n  const submitHandler = e => {\r\n    // if (formRef.current) {\r\n    //     formRef.current.reset();\r\n    //   }\r\n    e.preventDefault();\r\n    console.log(formData)\r\n    if (error) {\r\n      swal(\"Error occured while Entering Details\");\r\n    } else {\r\n      Createtransportersave(formData)\r\n        .then(res => {\r\n            console.log(res)\r\n          if (res.status) {\r\n            // setFormData({WarehouseName:\"\",mobileno:\"\",email:\"\"});\r\n            // setFormData({\r\n            //     ...formData,\r\n            //     [name]: value,\r\n            //   });\r\n            swal(`${res.message}`)\r\n            // swal(`${res.message.substring(0,1).toUpperCase()} \"+\" ${res.message.substring(1,25)}`);\r\n            // text.substring(0,1).toUpperCase()\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Card>\r\n          <Row className=\"m-2\">\r\n            <Col>\r\n              <h1 className=\"float-left\">Create Transporter</h1>\r\n            </Col>\r\n            <Col>\r\n              <Route\r\n                render={({ history }) => (\r\n                  <Button\r\n                    className=\" btn btn-danger float-right\"\r\n                    onClick={() =>\r\n                      history.push(\"/app/softNumen/transporter/TransporterList\")\r\n                    }\r\n                  >\r\n                    Back\r\n                  </Button>\r\n                )}\r\n              />\r\n            </Col>\r\n          </Row>\r\n\r\n          <CardBody>\r\n            <Form className=\"m-1\"\r\n            //   ref={formRef}\r\n             onSubmit={submitHandler}>\r\n              <Row className=\"mb-2\">\r\n            <Col lg=\"6\" md=\"6\" sm=\"12\">\r\n                <Label>Select Product</Label>\r\n            <Multiselect\r\n                          required\r\n                          showCheckbox=\"true\"\r\n                          isObject=\"false\"\r\n                          options={StateList} // Options to display in the dropdown\r\n                          // selectedValues={selectedValue}   // Preselected value to persist in dropdown\r\n                          onSelect={onSelect1} // Function will trigger on select event\r\n                          onRemove={onRemove1} // Function will trigger on remove event\r\n                          displayValue=\"state_title\" // Property name to display in the dropdown options\r\n                        />\r\n            </Col>\r\n                {CreatTransporterView &&\r\n                  CreatTransporterView?.CreateTransporter?.input?.map((ele, i) => {\r\n                  if (!!ele?.phoneinput) {\r\n                        return (\r\n                          <>\r\n                            <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                              <FormGroup>\r\n                                <Label>{ele?.label?._text}</Label>\r\n                                <PhoneInput\r\n                                  inputClass=\"myphoneinput\"\r\n                                  country={\"in\"}\r\n                                  onKeyDown={(e) => {\r\n                                    if (\r\n                                      ele?.type?._attributes?.type == \"number\"\r\n                                    ) {\r\n                                      [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                        e.preventDefault();\r\n                                    }\r\n                                  }}\r\n                                  countryCodeEditable={false}\r\n                                  name={ele?.name?._text}\r\n                                  value={formData[ele?.name?._text]}\r\n                                  onChange={(phone) => {\r\n                                    setFormData({\r\n                                      ...formData,\r\n                                      [ele?.name?._text]: phone,\r\n                                    });\r\n                                  }}\r\n                                />\r\n                                {index === i ? (\r\n                                  <>\r\n                                    {error && (\r\n                                      <span style={{ color: \"red\" }}>\r\n                                        {error}\r\n                                      </span>\r\n                                    )}\r\n                                  </>\r\n                                ) : (\r\n                                  <></>\r\n                                )}\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </>\r\n                        );\r\n                      } else if (!!ele?.library) {\r\n                        if (ele?.label._text?.includes(\"ountry\")) {\r\n                          return (\r\n                            <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                              <FormGroup>\r\n                                <Label>{ele?.label?._text}</Label>\r\n                                <Select\r\n                                  inputClass=\"countryclass\"\r\n                                  className=\"countryclassnw\"\r\n                                  options={Country.getAllCountries()}\r\n                                  getOptionLabel={(options) => {\r\n                                    return options[\"name\"];\r\n                                  }}\r\n                                  getOptionValue={(options) => {\r\n                                    return options[\"name\"];\r\n                                  }}\r\n                                  value={Countries}\r\n                                  onChange={(country) => {\r\n                                    setCountry(country);\r\n                                    setFormData({\r\n                                      ...formData,\r\n                                      [\"Country\"]: country?.name,\r\n                                    });\r\n                                  }}\r\n                                />\r\n                                {index === i ? (\r\n                                  <>\r\n                                    {error && (\r\n                                      <span style={{ color: \"red\" }}>\r\n                                        {error}\r\n                                      </span>\r\n                                    )}\r\n                                  </>\r\n                                ) : (\r\n                                  <></>\r\n                                )}\r\n                              </FormGroup>\r\n                            </Col>\r\n                          );\r\n                        } else if (ele?.label._text?.includes(\"tate\")) {\r\n                          return (\r\n                            <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                              <FormGroup>\r\n                                <Label>{ele?.label?._text}</Label>\r\n                                <Select\r\n                                  options={State?.getStatesOfCountry(\r\n                                    Countries?.isoCode\r\n                                  )}\r\n                                  getOptionLabel={(options) => {\r\n                                    return options[\"name\"];\r\n                                  }}\r\n                                  getOptionValue={(options) => {\r\n                                    return options[\"name\"];\r\n                                  }}\r\n                                  value={States}\r\n                                  onChange={(State) => {\r\n                                    setState(State);\r\n                                    setFormData({\r\n                                      ...formData,\r\n                                      [\"State\"]: State?.name,\r\n                                    });\r\n                                  }}\r\n                                />\r\n                                {index === i ? (\r\n                                  <>\r\n                                    {error && (\r\n                                      <span style={{ color: \"red\" }}>\r\n                                        {error}\r\n                                      </span>\r\n                                    )}\r\n                                  </>\r\n                                ) : (\r\n                                  <></>\r\n                                )}\r\n                              </FormGroup>\r\n                            </Col>\r\n                          );\r\n                        } else if (ele?.label._text?.includes(\"ity\")) {\r\n                          return (\r\n                            <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                              <FormGroup>\r\n                                <Label>{ele?.label?._text}</Label>\r\n                                <Select\r\n                                  options={City?.getCitiesOfState(\r\n                                    States?.countryCode,\r\n                                    States?.isoCode\r\n                                  )}\r\n                                  getOptionLabel={(options) => {\r\n                                    return options[\"name\"];\r\n                                  }}\r\n                                  getOptionValue={(options) => {\r\n                                    return options[\"name\"];\r\n                                  }}\r\n                                  value={Cities}\r\n                                  onChange={(City) => {\r\n                                    setCities(City);\r\n                                    setFormData({\r\n                                      ...formData,\r\n                                      [\"City\"]: City?.name,\r\n                                    });\r\n                                  }}\r\n                                />\r\n                                {index === i ? (\r\n                                  <>\r\n                                    {error && (\r\n                                      <span style={{ color: \"red\" }}>\r\n                                        {error}\r\n                                      </span>\r\n                                    )}\r\n                                  </>\r\n                                ) : (\r\n                                  <></>\r\n                                )}\r\n                              </FormGroup>\r\n                            </Col>\r\n                          );\r\n                        } else {\r\n                          return (\r\n                            <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                              <FormGroup key={i}>\r\n                                <Label>{ele?.label?._text}</Label>\r\n  \r\n                                <Input\r\n                                  onKeyDown={(e) => {\r\n                                    if (\r\n                                      ele?.type?._attributes?.type == \"number\"\r\n                                    ) {\r\n                                      [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                        e.preventDefault();\r\n                                    }\r\n                                  }}\r\n                                  type={ele?.type?._attributes?.type}\r\n                                  placeholder={ele?.placeholder?._text}\r\n                                  name={ele?.name?._text}\r\n                                  value={formData[ele?.name?._text]}\r\n                                  onChange={(e) =>\r\n                                    handleInputChange(\r\n                                      e,\r\n                                      ele?.type?._attributes?.type,\r\n                                      i\r\n                                    )\r\n                                  }\r\n                                />\r\n                                {index === i ? (\r\n                                  <>\r\n                                    {error && (\r\n                                      <span style={{ color: \"red\" }}>\r\n                                        {error}\r\n                                      </span>\r\n                                    )}\r\n                                  </>\r\n                                ) : (\r\n                                  <></>\r\n                                )}\r\n                              </FormGroup>\r\n                            </Col>\r\n                          );\r\n                        }\r\n                      } else {\r\n                        return (\r\n                          <>\r\n                            <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                              <FormGroup key={i}>\r\n                                <Label>{ele?.label?._text}</Label>\r\n  \r\n                                <Input\r\n                                  onKeyDown={(e) => {\r\n                                    if (\r\n                                      ele?.type?._attributes?.type == \"number\"\r\n                                    ) {\r\n                                      [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                        e.preventDefault();\r\n                                    }\r\n                                  }}\r\n                                  type={ele?.type?._attributes?.type}\r\n                                  placeholder={ele?.placeholder?._text}\r\n                                  name={ele?.name?._text}\r\n                                  value={formData[ele?.name?._text]}\r\n                                  onChange={(e) =>\r\n                                    handleInputChange(\r\n                                      e,\r\n                                      ele?.type?._attributes?.type,\r\n                                      i\r\n                                    )\r\n                                  }\r\n                                />\r\n                                {index === i ? (\r\n                                  <>\r\n                                    {error && (\r\n                                      <span style={{ color: \"red\" }}>\r\n                                        {error}\r\n                                      </span>\r\n                                    )}\r\n                                  </>\r\n                                ) : (\r\n                                  <></>\r\n                                )}\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </>\r\n                        );\r\n                      }\r\n                    // else {\r\n                    //   return (\r\n                    //     <>\r\n                    //       <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                    //         <FormGroup>\r\n                    //           <Label>{ele?.label?._text}</Label>\r\n\r\n                    //           <Input\r\n                    //             onKeyDown={e => {\r\n                    //               if (\r\n                    //                 ele?.type?._attributes?.type == \"number\"\r\n                    //               ) {\r\n                    //                 [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                    //                   e.preventDefault();\r\n                    //               }\r\n                    //             }}\r\n                    //             type={ele?.type?._attributes?.type}\r\n                    //             placeholder={ele?.placeholder?._text}\r\n                    //             name={ele?.name?._text}\r\n                    //             value={formData[ele?.name?._text]}\r\n                    //             onChange={e =>\r\n                    //               handleInputChange(\r\n                    //                 e,\r\n                    //                 ele?.type?._attributes?.type,\r\n                    //                 i\r\n                    //               )\r\n                    //             }\r\n                    //           />\r\n                    //           {index === i ? (\r\n                    //             <>\r\n                    //               {error && (\r\n                    //                 <span style={{ color: \"red\" }}>\r\n                    //                   {error}\r\n                    //                 </span>\r\n                    //               )}\r\n                    //             </>\r\n                    //           ) : (\r\n                    //             <></>\r\n                    //           )}\r\n                    //         </FormGroup>\r\n                    //       </Col>\r\n\r\n                    //     </>\r\n                    //   );\r\n                    // }\r\n                  })}\r\n              </Row>\r\n              <hr />\r\n              <Row>\r\n                <Button.Ripple\r\n                  color=\"primary\"\r\n                  type=\"submit\"\r\n                  className=\"mr-1 mt-2 mx-2\"\r\n                >\r\n                  Submit\r\n                </Button.Ripple>\r\n              </Row>\r\n            </Form>\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default CreateTransporter;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"row\", \"disabled\", \"check\", \"inline\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  row: PropTypes.bool,\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar FormGroup = function FormGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      row = props.row,\n      disabled = props.disabled,\n      check = props.check,\n      inline = props.inline,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, row ? 'row' : false, check ? 'form-check' : 'form-group', check && inline ? 'form-check-inline' : false, check && disabled ? 'disabled' : false), cssModule);\n\n  if (Tag === 'fieldset') {\n    attributes.disabled = disabled;\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormGroup.propTypes = propTypes;\nFormGroup.defaultProps = defaultProps;\nexport default FormGroup;"],"sourceRoot":""}