{"version":3,"sources":["views/apps/freshlist/accounts/CreateAccount.js","../node_modules/reactstrap/es/FormGroup.js"],"names":["i","CreateAccount","useState","CreatAccountView","setCreatAccountView","BulkImport","setBulkImport","Master","setMaster","formData","setFormData","dropdownValue","setdropdownValue","Country_State_city","setCountry_State_city","AllAssignRoleList","setAllAssignRoleList","SelectedRoleToAssign","setSelectedRoleToAssign","index","setindex","error","setError","Context","useContext","UserContext","history","useHistory","handleInputChange","e","type","target","name","value","checked","test","length","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","console","log","swal","enableHighAccuracy","userdata","JSON","parse","localStorage","getItem","_GetList","country_state_City_List","then","res","catch","err","rolename","rank","_Get","Role_list_by_Master","_id","Superadmin","Role","filter","ele","roleName","toLowerCase","includes","WithoutSuperadmin","Get_RoleList","database","item","CreateAccountView","jsonData","xmlJs","xml2json","data","compact","spaces","CreateUser","input","submitHandler","preventDefault","undefined","formdata","FormData","append","_BulkUpload","Bulk_Upload_User","message","email","firstName","CreateAccountSave","status","payload","Roles","map","role","desc","rolePermission","createdBy","User","_PostSave","Assign_Role_To_SuperAdmin","goBack","className","render","style","cursor","color","onClick","push","onSubmit","lg","md","required","onChange","selectedName","options","selectedIndex","getAttribute","selectedPosition","data-id","data-name","showCheckbox","isObject","onSelect","selectedList","selectedItem","onRemove","removedItem","displayValue","placeholder","moment","tz","format","phoneinput","key","sm","label","_text","inputClass","country","onKeyDown","_attributes","countryCodeEditable","phone","library","disabled","dateFormat","UserInformatio","timeZone","SelectedCity","Pincode","StateName","District","number","onWheel","files","marginRight","Ripple","_excluded","propTypes","children","PropTypes","node","row","bool","check","inline","tag","tagPropType","string","cssModule","object","FormGroup","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps"],"mappings":";ucACA,kmGAAAA,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQAkgCeC,UA/8BO,WACpB,MAAgDC,mBAAS,IAAG,mBAArDC,EAAgB,KAAEC,EAAmB,KAC5C,EAAgCF,mBAAS,IAAG,mBAC5C,GADgB,KAAY,KACDA,mBAAS,KAAG,mBACvC,GADa,KAAU,KACKA,mBAAS,KAAG,mBACxC,GADa,KAAW,KACYA,mBAAS,OAAK,mBAA3CG,EAAU,KAAEC,EAAa,KAChC,EAA4BJ,oBAAS,GAAM,mBAApCK,EAAM,KAAEC,EAAS,KACxB,EAAgCN,mBAAS,IAAG,mBAArCO,EAAQ,KAAEC,EAAW,KAC5B,EAA0CR,mBAAS,IAAG,mBAA/CS,EAAa,KAAEC,EAAgB,KACtC,EAAoDV,mBAAS,IAAG,mBAAzDW,EAAkB,KAAEC,GAAqB,KAChD,GAAkDZ,mBAAS,IAAG,qBAAvDa,GAAiB,MAAEC,GAAoB,MAC9C,GAAwDd,mBAAS,IAAG,qBAA7De,GAAoB,MAAEC,GAAuB,MACpD,GAA0BhB,mBAAS,IAAG,qBAA/BiB,GAAK,MAAEC,GAAQ,MACtB,GAA0BlB,mBAAS,IAAG,qBAA/BmB,GAAK,MAAEC,GAAQ,MACtB,GAA4BpB,oBAAS,GAAM,qBAC3C,IADa,MAAW,MACcA,mBAAS,KAAG,qBAE5CqB,IAFY,MAAgB,MAElBC,qBAAWC,MACvBC,GAAUC,cAERC,GAAoB,SAACC,EAAGC,EAAM9B,GAClC,MAAiC6B,EAAEE,OAA3BC,EAAI,EAAJA,KAAMC,EAAK,EAALA,MAAOC,EAAO,EAAPA,QACrBd,GAASpB,GACG,YAAR8B,EAEApB,EAAY,2BACPD,GAAQ,kBACVuB,EAAOE,KASA,UAARJ,EACE,aAAaK,KAAKF,IACpBvB,EAAY,2BACPD,GAAQ,kBACVuB,EAAOC,KAEVX,GAAS,KAETA,GACE,kEAIAW,EAAMG,QAAU,IAClB1B,EAAY,2BACPD,GAAQ,kBACVuB,EAAOC,KAGVX,GAAS,KAETZ,EAAY,2BACPD,GAAQ,kBACVuB,EAAOC,MAQlBI,qBAAU,cAEP,CAAC5B,IACJ4B,qBAAU,WAEFC,UAAUC,YACZD,UAAUC,YAAYC,oBACpB,SAACC,GACC,MAAgCA,EAASC,OAAzB,EAARC,SAAmB,EAATC,UAElBC,QAAQC,IAAIL,EAASC,WAEvB,SAACrB,GACC0B,IAAK,QAAS1B,KAEhB,CAAE2B,oBAAoB,IAGxBD,IAAK,4CAKR,IAqBHV,qBAAU,WAAO,IAAD,EACVY,EAAWC,KAAKC,MAAMC,aAAaC,QAAQ,aAC/CC,aAASC,MACNC,MAAK,SAACC,GACL3C,GAAsB2C,MAEvBC,OAAM,SAACC,GACNd,QAAQC,IAAIa,MAEiB,KAArB,OAARV,QAAQ,IAARA,GAAkB,QAAV,EAARA,EAAUW,gBAAQ,WAAV,EAAR,EAAoBC,OACtBrD,GAAU,GACVsD,aAAKC,KAA6B,OAARd,QAAQ,IAARA,OAAQ,EAARA,EAAUe,KACjCR,MAAK,SAACC,GAAS,IAAD,IACTQ,EAAgB,OAAHR,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKS,YAAI,WAAN,EAAH,EAAWC,QAAO,SAACC,GAAG,eAClC,OAAHA,QAAG,IAAHA,GAAa,QAAV,EAAHA,EAAKC,gBAAQ,OAAe,QAAf,EAAb,EAAeC,qBAAa,WAAzB,EAAH,EAA8BC,SAAS,iBAErCC,EAAuB,OAAHf,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKS,YAAI,WAAN,EAAH,EAAWC,QACjC,SAACC,GAAG,MAAuB,gBAAf,OAAHA,QAAG,IAAHA,OAAG,EAAHA,EAAKC,aAEZJ,GACFrD,EAAiBqD,GAGfO,GACFxD,GAAwB,OAAHyC,QAAG,IAAHA,OAAG,EAAHA,EAAKS,SAI7BR,OAAM,SAACC,GACNd,QAAQC,IAAIa,GACZZ,IAAK,4BAGT0B,aAAqB,OAARxB,QAAQ,IAARA,OAAQ,EAARA,EAAUe,IAAa,OAARf,QAAQ,IAARA,OAAQ,EAARA,EAAUyB,UACnClB,MAAK,SAACC,GAAS,IAAD,EAEK,OAAHA,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKS,YAAI,OAAT,EAAWC,QACxB,SAACQ,EAAM3E,GAAC,aAAS,OAAJ2E,QAAI,IAAJA,OAAI,EAAJA,EAAMlC,WAAmB,OAARQ,QAAQ,IAARA,GAAkB,QAAV,EAARA,EAAUW,gBAAQ,WAAV,EAAR,EAAoBnB,aAEpD7B,EAAoB,OAAH6C,QAAG,IAAHA,OAAG,EAAHA,EAAKS,SAGvBR,OAAM,SAACC,GACNd,QAAQC,IAAIa,GACZZ,IAAK,2BAGX6B,cACGpB,MAAK,SAACC,GAAS,IAAD,IACPoB,EAAWC,IAAMC,SAAStB,EAAIuB,KAAM,CAAEC,SAAS,EAAMC,OAAQ,IACnE9E,EAAwC,QAArB,EAAC8C,KAAKC,MAAM0B,UAAS,OAAY,QAAZ,EAApB,EAAsBM,kBAAU,WAAZ,EAApB,EAAkCC,OACtDxE,EAAiBsC,KAAKC,MAAM0B,OAE7BnB,OAAM,SAACC,GACNd,QAAQC,IAAIa,QAKf,IAGH,IAAM0B,GAAa,uCAAG,WAAOxD,GAAC,uEACT,GAAnBA,EAAEyD,iBAEiB,OAAfjF,QAAqCkF,GAAdlF,EAAuB,gBAEZ,OADhCmF,EAAW,IAAIC,UACVC,OAAO,OAAQrF,GAAY,SAE9BsF,aAAYC,IAAkBJ,GACjChC,MAAK,SAACC,GACLV,IAAK,GAAD,OAAO,OAAHU,QAAG,IAAHA,OAAG,EAAHA,EAAKoC,aAEdnC,OAAM,SAACC,GACNd,QAAQC,IAAIa,GACZZ,IAAK,2BACJ,KAAD,yBAEQ,OAARtC,QAAQ,IAARA,OAAQ,EAARA,EAAUmD,YAAoB,OAARnD,QAAQ,IAARA,OAAQ,EAARA,EAAUqF,SAAiB,OAARrF,QAAQ,IAARA,OAAQ,EAARA,EAAUsF,WACjD1E,GACF0B,IAAK,wCAELiD,YAAkBvF,GACf+C,MAAK,SAACC,GACL,GAAO,OAAHA,QAAG,IAAHA,OAAG,EAAHA,EAAKwC,OAAQ,CAEf,GAAwB,OAApBhF,SAAoB,IAApBA,QAAoB,EAApBA,GAAsBmB,OAAQ,CAchC,IAAI8D,EAAU,CACZC,MAdmC,OAApBlF,SAAoB,IAApBA,QAAoB,EAApBA,GAAsBmF,KAAI,SAAChC,GAC1C,MAAO,CACLiC,KAAM,CACJhC,SAAa,OAAHD,QAAG,IAAHA,OAAG,EAAHA,EAAKC,SACf5B,SAAU,EACV6D,KAAS,OAAHlC,QAAG,IAAHA,OAAG,EAAHA,EAAKkC,KACXzC,KAAM,EACN0C,eAAmB,OAAHnC,QAAG,IAAHA,OAAG,EAAHA,EAAKmC,eACrB7B,SAAUjE,EAAmB,SAC7B+F,UAAc,OAAH/C,QAAG,IAAHA,OAAG,EAAHA,EAAKgD,KAAKzC,WAQpB,OAAHP,QAAG,IAAHA,OAAG,EAAHA,EAAKgD,KAAKzC,MACZ0C,aAAUC,IAA2BT,GAClC1C,MAAK,SAACC,GAGLZ,QAAQC,IAAIW,MAEbC,OAAM,SAACC,GAGNd,QAAQC,IAAIa,MAIpBZ,IAAK,6BACLrB,GAAQkF,aAGXlD,OAAM,SAACC,GACNd,QAAQC,IAAIa,MAIlBZ,IAAK,yCACN,2CAEJ,gBApEkB,sCAgFnB,OACE,6BACE,6BACE,kBAAC,IAAI,KACH,kBAAC,IAAG,CAAC8D,UAAU,OACb,kBAAC,IAAG,KACF,wBAAIA,UAAU,cAAa,gBAE7B,kBAAC,IAAG,KACF,yBAAKA,UAAU,eACb,kBAAC,IAAK,CACJC,OAAQ,gBAAGpF,EAAO,EAAPA,QAAO,OAChB,kBAAC,IAAM,CACLqF,MAAO,CAAEC,OAAQ,WACjBH,UAAU,mBACVI,MAAM,UACNC,QAAS,kBACPxF,EAAQyF,KAAK,iCAEd,IAAI,cAWjB,yBAAKN,UAAU,SACb,kBAAC,IAAI,CAACA,UAAU,MAAMO,SAAU/B,IAC9B,kBAAC,IAAG,CAACwB,UAAU,QACb,kBAAC,IAAG,CAACQ,GAAG,IAAIC,GAAG,KACb,kBAAC,IAAS,KACR,kBAAC,IAAK,KAAC,aACP,kBAAC,IAAW,CACVC,UAAQ,EACRzF,KAAK,SACLE,KAAK,WACLC,MAAOxB,EAAmB,SAC1B+G,SAAU,SAAC3F,GAAO,IAAD,MACT4F,EACJ5F,EAAEE,OAAO2F,QAAQ7F,EAAEE,OAAO4F,eAAeC,aACvC,aAEEC,EACJhG,EAAEE,OAAO2F,QAAQ7F,EAAEE,OAAO4F,eAAeC,aACvC,WAGJ,IACkB,OAAhBC,QAAgB,IAAhBA,GAA+B,QAAf,EAAhBA,EAAkBvD,qBAAa,WAAf,EAAhB,EAAiCC,SAAS,YAC1B,OAAhBsD,QAAgB,IAAhBA,GACiB,QADD,EAAhBA,EACIvD,qBAAa,WADD,EAAhB,EAEIC,SAAS,eACb,CACA,IAAItB,EAAWC,KAAKC,MAClBC,aAAaC,QAAQ,aAGvB5C,EAAqB,WAAY,OAARwC,QAAQ,IAARA,OAAQ,EAARA,EAAUe,IAIrCtD,EAAY,2BACPD,GAAQ,uBACV,WAAaoB,EAAEE,OAAOE,OAAK,cAC3B,WAAawF,GAAY,OAG9B,gCAAQ,mBACP9G,IACc,OAAbA,QAAa,IAAbA,OAAa,EAAbA,EAAeyB,UACF,OAAbzB,QAAa,IAAbA,OAAa,EAAbA,EAAeyF,KAAI,SAAChC,EAAKpE,GACvB,OACE,4BACE8H,UAAY,OAAH1D,QAAG,IAAHA,OAAG,EAAHA,EAAKC,SACd0D,YAAc,OAAH3D,QAAG,IAAHA,OAAG,EAAHA,EAAKM,SAChBzC,MAAU,OAAHmC,QAAG,IAAHA,OAAG,EAAHA,EAAKJ,KACR,OAAHI,QAAG,IAAHA,OAAG,EAAHA,EAAKC,iBAOnB9D,GAAUA,GACT,oCACE,kBAAC,IAAG,CAACsG,UAAU,OAAOQ,GAAG,IAAIC,GAAG,KAC9B,yBAAKT,UAAU,IACb,kBAAC,IAAK,KAAC,6BAEP,kBAAC,IAAW,CACVU,UAAQ,EACRS,aAAa,OACbC,SAAS,QACTP,QAAS3G,GAETmH,SA9GN,SAACC,EAAcC,GAC/BvF,QAAQC,IAAIqF,GACZjH,GAAwBiH,IA6GFE,SA1GN,SAACF,EAAcG,GAC/BzF,QAAQC,IAAIqF,GACZjH,GAAwBiH,IAyGFI,aAAa,eAKnB,kBAAC,IAAG,CAAClB,GAAG,IAAIC,GAAG,KACb,kBAAC,IAAS,KACR,kBAAC,IAAK,KAAC,mBACP,kBAAC,IAAK,CACJkB,YAAY,0BACZ1G,KAAK,OACLG,MAAOxB,EAAmB,SAC1B+G,SAAU,SAAC3F,GACTnB,EAAY,2BACPD,GAAQ,kBACV,WAAaoB,EAAEE,OAAOE,eASpC9B,IACiB,OAAhBA,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBiG,KAAI,SAAChC,EAAKpE,GAAO,IAAD,EAKT,MA0CI,MACiB,YA4DK,YA4DD,YA6DvC,oCAwGwC,kBAyE1C,oCArZeyI,IAAO,uBAC1BC,GAAG,oBACHC,OAAO,qBAEV,OAAS,OAAHvE,QAAG,IAAHA,OAAG,EAAHA,EAAKwE,YAEP,oCACE,kBAAC,IAAG,CAACC,IAAK7I,EAAGqH,GAAG,IAAIC,GAAG,IAAIwB,GAAG,MAC5B,kBAAC,IAAS,KACR,kBAAC,IAAK,KAAK,OAAH1E,QAAG,IAAHA,GAAU,QAAP,EAAHA,EAAK2E,aAAK,WAAP,EAAH,EAAYC,OACpB,kBAAC,IAAU,CACTC,WAAW,eACXC,QAAS,KACTC,UAAW,SAACtH,GAAO,IAAD,IAEkB,WAA7B,OAAHuC,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtC,YAAI,OAAa,QAAb,EAAT,EAAWsH,mBAAW,WAAnB,EAAH,EAAwBtH,OAExB,CAAC,IAAK,IAAK,IAAK,KAAKyC,SAAS1C,EAAEgH,MAC9BhH,EAAEyD,kBAGR+D,qBAAqB,EACrBrH,KAAS,OAAHoC,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKpC,YAAI,WAAN,EAAH,EAAWgH,MACjB/G,MAAOxB,EAAY,OAAH2D,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKpC,YAAI,WAAN,EAAH,EAAWgH,OAC3BxB,SAAU,SAAC8B,GAAW,IAAD,EACnB5I,EAAY,2BACPD,GAAQ,kBACP,OAAH2D,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKpC,YAAI,WAAN,EAAH,EAAWgH,MAAQM,QAIzBnI,KAAUnB,EACT,oCACGqB,IACC,0BAAM0F,MAAO,CAAEE,MAAO,QACnB5F,KAKP,yCAMI,OAAH+C,QAAG,IAAHA,OAAG,EAAHA,EAAKmF,UACT,OAAHnF,QAAG,IAAHA,GAAgB,QAAb,EAAHA,EAAK2E,MAAMC,aAAK,WAAb,EAAH,EAAkBzE,SAAS,WAE3B,kBAAC,IAAG,CAACsE,IAAK7I,EAAGqH,GAAG,IAAIC,GAAG,IAAIwB,GAAG,MAC5B,kBAAC,IAAS,KACR,kBAAC,IAAK,KAAK,OAAH1E,QAAG,IAAHA,GAAU,QAAP,EAAHA,EAAK2E,aAAK,WAAP,EAAH,EAAYC,OAEpB,kBAAC,IAAK,CACJG,UAAW,SAACtH,GAAO,IAAD,IAEkB,WAA7B,OAAHuC,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtC,YAAI,OAAa,QAAb,EAAT,EAAWsH,mBAAW,WAAnB,EAAH,EAAwBtH,OAExB,CAAC,IAAK,IAAK,IAAK,KAAKyC,SAAS1C,EAAEgH,MAC9BhH,EAAEyD,kBAGRxD,KAAS,OAAHsC,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtC,YAAI,OAAa,QAAb,EAAT,EAAWsH,mBAAW,WAAnB,EAAH,EAAwBtH,KAC9B0G,YAAgB,OAAHpE,QAAG,IAAHA,GAAgB,QAAb,EAAHA,EAAKoE,mBAAW,WAAb,EAAH,EAAkBQ,MAC/BhH,KAAS,OAAHoC,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKpC,YAAI,WAAN,EAAH,EAAWgH,MACjB/G,MAAOxB,EAAY,OAAH2D,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKpC,YAAI,WAAN,EAAH,EAAWgH,OAC3BxB,SAAU,SAAC3F,GAAC,eACVD,GACEC,EACG,OAAHuC,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtC,YAAI,OAAa,QAAb,EAAT,EAAWsH,mBAAW,WAAnB,EAAH,EAAwBtH,KACxB9B,MAuBLmB,KAAUnB,EACT,oCACGqB,IACC,0BAAM0F,MAAO,CAAEE,MAAO,QACnB5F,KAKP,wCAKI,OAAH+C,QAAG,IAAHA,GAAgB,QAAb,EAAHA,EAAK2E,MAAMC,aAAK,WAAb,EAAH,EAAkBzE,SAAS,SAElC,kBAAC,IAAG,CAACsE,IAAK7I,EAAGqH,GAAG,IAAIC,GAAG,IAAIwB,GAAG,MAC5B,kBAAC,IAAS,KACR,kBAAC,IAAK,KAAK,OAAH1E,QAAG,IAAHA,GAAU,QAAP,EAAHA,EAAK2E,aAAK,WAAP,EAAH,EAAYC,OACpB,kBAAC,IAAK,CACJQ,UAAQ,EACRL,UAAW,SAACtH,GAAO,IAAD,IAEkB,WAA7B,OAAHuC,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtC,YAAI,OAAa,QAAb,EAAT,EAAWsH,mBAAW,WAAnB,EAAH,EAAwBtH,OAExB,CAAC,IAAK,IAAK,IAAK,KAAKyC,SAAS1C,EAAEgH,MAC9BhH,EAAEyD,kBAGRxD,KAAS,OAAHsC,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtC,YAAI,OAAa,QAAb,EAAT,EAAWsH,mBAAW,WAAnB,EAAH,EAAwBtH,KAC9B0G,YAAgB,OAAHpE,QAAG,IAAHA,GAAgB,QAAb,EAAHA,EAAKoE,mBAAW,WAAb,EAAH,EAAkBQ,MAC/BhH,KAAS,OAAHoC,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKpC,YAAI,WAAN,EAAH,EAAWgH,MACjB/G,MAAOxB,EAAY,OAAH2D,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKpC,YAAI,WAAN,EAAH,EAAWgH,OAC3BxB,SAAU,SAAC3F,GAAC,eACVD,GACEC,EACG,OAAHuC,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtC,YAAI,OAAa,QAAb,EAAT,EAAWsH,mBAAW,WAAnB,EAAH,EAAwBtH,KACxB9B,MAuBLmB,KAAUnB,EACT,oCACGqB,IACC,0BAAM0F,MAAO,CAAEE,MAAO,QACnB5F,KAKP,wCAKI,OAAH+C,QAAG,IAAHA,GAAgB,QAAb,EAAHA,EAAK2E,MAAMC,aAAK,WAAb,EAAH,EAAkBzE,SAAS,QAElC,kBAAC,IAAG,CAACsE,IAAK7I,EAAGqH,GAAG,IAAIC,GAAG,IAAIwB,GAAG,MAC5B,kBAAC,IAAS,KACR,kBAAC,IAAK,KAAK,OAAH1E,QAAG,IAAHA,GAAU,QAAP,EAAHA,EAAK2E,aAAK,WAAP,EAAH,EAAYC,OACpB,kBAAC,IAAK,CACJQ,UAAQ,EACRL,UAAW,SAACtH,GAAO,IAAD,IAEkB,WAA7B,OAAHuC,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtC,YAAI,OAAa,QAAb,EAAT,EAAWsH,mBAAW,WAAnB,EAAH,EAAwBtH,OAExB,CAAC,IAAK,IAAK,IAAK,KAAKyC,SAAS1C,EAAEgH,MAC9BhH,EAAEyD,kBAGRxD,KAAS,OAAHsC,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtC,YAAI,OAAa,QAAb,EAAT,EAAWsH,mBAAW,WAAnB,EAAH,EAAwBtH,KAC9B0G,YAAgB,OAAHpE,QAAG,IAAHA,GAAgB,QAAb,EAAHA,EAAKoE,mBAAW,WAAb,EAAH,EAAkBQ,MAC/BhH,KAAS,OAAHoC,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKpC,YAAI,WAAN,EAAH,EAAWgH,MACjB/G,MAAOxB,EAAY,OAAH2D,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKpC,YAAI,WAAN,EAAH,EAAWgH,OAC3BxB,SAAU,SAAC3F,GAAC,eACVD,GACEC,EACG,OAAHuC,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtC,YAAI,OAAa,QAAb,EAAT,EAAWsH,mBAAW,WAAnB,EAAH,EAAwBtH,KACxB9B,MAwBLmB,KAAUnB,EACT,oCACGqB,IACC,0BAAM0F,MAAO,CAAEE,MAAO,QACnB5F,KAKP,uCAON,oCACmC,SAA7B,OAAH+C,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtC,YAAI,OAAa,QAAb,EAAT,EAAWsH,mBAAW,WAAnB,EAAH,EAAwBtH,MACvB,oCACE,kBAAC,IAAG,CAAC+G,IAAK7I,EAAGqH,GAAG,IAAIC,GAAG,IAAIwB,GAAG,MAC5B,kBAAC,IAAS,CAACD,IAAK7I,GACd,kBAAC,IAAK,KAAK,OAAHoE,QAAG,IAAHA,GAAU,QAAP,EAAHA,EAAK2E,aAAK,WAAP,EAAH,EAAYC,OAEpB,kBAAC,IAAK,CACJG,UAAW,SAACtH,GAAO,IAAD,IAGd,WADG,OAAHuC,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtC,YAAI,OAAa,QAAb,EAAT,EAAWsH,mBAAW,WAAnB,EAAH,EAAwBtH,OAGxB,CAAC,IAAK,IAAK,IAAK,KAAKyC,SACnB1C,EAAEgH,MACChH,EAAEyD,kBAGXxD,KAAS,OAAHsC,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtC,YAAI,OAAa,QAAb,EAAT,EAAWsH,mBAAW,WAAnB,EAAH,EAAwBtH,KAC9B0G,YAAgB,OAAHpE,QAAG,IAAHA,GAAgB,QAAb,EAAHA,EAAKoE,mBAAW,WAAb,EAAH,EAAkBQ,MAC/BhH,KAAS,OAAHoC,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKpC,YAAI,WAAN,EAAH,EAAWgH,MACjBS,WACS,OAAPlI,SAAO,IAAPA,IAAuB,QAAhB,EAAPA,GAASmI,sBAAc,WAAhB,EAAP,EAAyBD,WAE3BxH,MACEwG,IAAOhI,EAAY,OAAH2D,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKpC,YAAI,WAAN,EAAH,EAAWgH,QACxBN,GAAU,OAAPnH,SAAO,IAAPA,IAAuB,QAAhB,EAAPA,GAASmI,sBAAc,WAAhB,EAAP,EAAyBC,UAC5BhB,OACQ,OAAPpH,SAAO,IAAPA,IAAuB,QAAhB,EAAPA,GAASmI,sBAAc,WAAhB,EAAP,EAAyBD,YAK/BjC,SAAU,SAAC3F,GAAC,eACVD,GACEC,EACG,OAAHuC,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtC,YAAI,OAAa,QAAb,EAAT,EAAWsH,mBAAW,WAAnB,EAAH,EAAwBtH,KACxB9B,MAILmB,KAAUnB,EACT,oCACGqB,IACC,0BAAM0F,MAAO,CAAEE,MAAO,QACnB5F,KAKP,wCAMR,oCACE,kBAAC,IAAG,CAACwH,IAAK7I,EAAGqH,GAAG,IAAIC,GAAG,IAAIwB,GAAG,MAC5B,kBAAC,IAAS,CAACD,IAAK7I,GACd,kBAAC,IAAK,KAAK,OAAHoE,QAAG,IAAHA,GAAU,QAAP,EAAHA,EAAK2E,aAAK,WAAP,EAAH,EAAYC,OAEpB,kBAAC,IAAK,CACJG,UAAW,SAACtH,GAAO,IAAD,IAGd,WADG,OAAHuC,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtC,YAAI,OAAa,QAAb,EAAT,EAAWsH,mBAAW,WAAnB,EAAH,EAAwBtH,OAGxB,CAAC,IAAK,IAAK,IAAK,KAAKyC,SACnB1C,EAAEgH,MACChH,EAAEyD,kBAGXxD,KAAS,OAAHsC,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtC,YAAI,OAAa,QAAb,EAAT,EAAWsH,mBAAW,WAAnB,EAAH,EAAwBtH,KAC9B0G,YAAgB,OAAHpE,QAAG,IAAHA,GAAgB,QAAb,EAAHA,EAAKoE,mBAAW,WAAb,EAAH,EAAkBQ,MAC/BhH,KAAS,OAAHoC,QAAG,IAAHA,GAAS,QAAN,GAAHA,EAAKpC,YAAI,YAAN,EAAH,GAAWgH,MACjB/G,MAAOxB,EAAY,OAAH2D,QAAG,IAAHA,GAAS,QAAN,GAAHA,EAAKpC,YAAI,YAAN,EAAH,GAAWgH,OAC3BxB,SAAU,SAAC3F,GAAC,eACVD,GACEC,EACG,OAAHuC,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtC,YAAI,OAAa,QAAb,EAAT,EAAWsH,mBAAW,WAAnB,EAAH,EAAwBtH,KACxB9B,MAILmB,KAAUnB,EACT,oCACGqB,IACC,0BAAM0F,MAAO,CAAEE,MAAO,QACnB5F,KAKP,0CASJ,OAAH+C,QAAG,IAAHA,GAAgB,QAAb,EAAHA,EAAK2E,MAAMC,aAAK,WAAb,EAAH,EAAkBzE,SAAS,WAElC,kBAAC,IAAG,CAACsE,IAAK7I,EAAGqH,GAAG,IAAIC,GAAG,IAAIwB,GAAG,MAC5B,kBAAC,IAAS,KACR,kBAAC,IAAK,KAAK,OAAH1E,QAAG,IAAHA,GAAU,QAAP,GAAHA,EAAK2E,aAAK,YAAP,EAAH,GAAYC,OACpB,kBAAC,IAAK,CACJG,UAAW,SAACtH,GAAO,IAAD,IACoB,WAA7B,OAAHuC,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtC,YAAI,OAAa,QAAb,EAAT,EAAWsH,mBAAW,WAAnB,EAAH,EAAwBtH,OAC1B,CAAC,IAAK,IAAK,IAAK,KAAKyC,SAAS1C,EAAEgH,MAC9BhH,EAAEyD,kBAGRxD,KAAS,OAAHsC,QAAG,IAAHA,GAAS,QAAN,GAAHA,EAAKtC,YAAI,QAAa,QAAb,GAAT,GAAWsH,mBAAW,YAAnB,EAAH,GAAwBtH,KAC9B0G,YAAgB,OAAHpE,QAAG,IAAHA,GAAgB,QAAb,GAAHA,EAAKoE,mBAAW,YAAb,EAAH,GAAkBQ,MAC/BhH,KAAS,OAAHoC,QAAG,IAAHA,GAAS,QAAN,GAAHA,EAAKpC,YAAI,YAAN,EAAH,GAAWgH,MACjB/G,MAAOxB,EAAY,OAAH2D,QAAG,IAAHA,GAAS,QAAN,GAAHA,EAAKpC,YAAI,YAAN,EAAH,GAAWgH,OAC3BxB,SAAU,SAAC3F,GACT,IAI0B,MAOnB,EAXH+H,EAAiC,OAAlB/I,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoBsD,QACrC,SAACC,GAAG,OAAQ,OAAHA,QAAG,IAAHA,OAAG,EAAHA,EAAKyF,UAAWhI,EAAEE,OAAOE,UAGpB,OAAZ2H,QAAY,IAAZA,OAAY,EAAZA,EAAcxH,QAChB1B,EAAY,2BACPD,GAAQ,uBACV,QAAyB,QAAlB,EAAGmJ,EAAa,UAAE,aAAf,EAAiBE,WAAS,cACpC,OAAwB,QAAlB,EAAGF,EAAa,UAAE,aAAf,EAAiBG,UAAQ,cAClC,UAAYlI,EAAEE,OAAOE,OAAK,KAG7BvB,EAAY,2BACPD,GAAQ,kBACP,OAAH2D,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKpC,YAAI,WAAN,EAAH,EAAWgH,MAAQnH,EAAEE,OAAOE,YA8BpCd,KAAUnB,EACT,oCACGqB,IACC,0BAAM0F,MAAO,CAAEE,MAAO,QAAU5F,KAIpC,uCAON,qCACQ,OAAH+C,QAAG,IAAHA,OAAG,EAAHA,EAAK4F,QACN,oCACE,kBAAC,IAAG,CAACnB,IAAK7I,EAAGqH,GAAG,IAAIC,GAAG,IAAIwB,GAAG,MAC5B,kBAAC,IAAS,CAACD,IAAK7I,GACd,kBAAC,IAAK,KAAK,OAAHoE,QAAG,IAAHA,GAAU,QAAP,GAAHA,EAAK2E,aAAK,YAAP,EAAH,GAAYC,OAEpB,kBAAC,IAAK,CACJiB,QAAS,SAACpI,GACRA,EAAEyD,kBAEJ6D,UAAW,SAACtH,GAAO,IAAD,IAEkB,WAA7B,OAAHuC,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtC,YAAI,OAAa,QAAb,EAAT,EAAWsH,mBAAW,WAAnB,EAAH,EAAwBtH,OAExB,CAAC,IAAK,IAAK,IAAK,KAAKyC,SAAS1C,EAAEgH,MAC9BhH,EAAEyD,kBAGRxD,KAAS,OAAHsC,QAAG,IAAHA,GAAS,QAAN,GAAHA,EAAKtC,YAAI,QAAa,QAAb,GAAT,GAAWsH,mBAAW,YAAnB,EAAH,GAAwBtH,KAC9B0G,YAAgB,OAAHpE,QAAG,IAAHA,GAAgB,QAAb,GAAHA,EAAKoE,mBAAW,YAAb,EAAH,GAAkBQ,MAC/BhH,KAAS,OAAHoC,QAAG,IAAHA,GAAS,QAAN,GAAHA,EAAKpC,YAAI,YAAN,EAAH,GAAWgH,MACjB/G,MAAOxB,EAAY,OAAH2D,QAAG,IAAHA,GAAS,QAAN,GAAHA,EAAKpC,YAAI,YAAN,EAAH,GAAWgH,OAC3BxB,SAAU,SAAC3F,GAAC,eACVD,GACEC,EACG,OAAHuC,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtC,YAAI,OAAa,QAAb,EAAT,EAAWsH,mBAAW,WAAnB,EAAH,EAAwBtH,KACxB9B,MAILmB,KAAUnB,EACT,oCACGqB,IACC,0BAAM0F,MAAO,CAAEE,MAAO,QACnB5F,KAKP,wCAMR,kBAAC,IAAG,CAACwH,IAAK7I,EAAGqH,GAAG,IAAIC,GAAG,IAAIwB,GAAG,MAC5B,kBAAC,IAAS,CAACD,IAAK7I,GACd,kBAAC,IAAK,KAAK,OAAHoE,QAAG,IAAHA,GAAU,QAAP,GAAHA,EAAK2E,aAAK,YAAP,EAAH,GAAYC,OAEpB,kBAAC,IAAK,CACJG,UAAW,SAACtH,GAAO,IAAD,IAEkB,WAA7B,OAAHuC,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtC,YAAI,OAAa,QAAb,EAAT,EAAWsH,mBAAW,WAAnB,EAAH,EAAwBtH,OAExB,CAAC,IAAK,IAAK,IAAK,KAAKyC,SAAS1C,EAAEgH,MAC9BhH,EAAEyD,kBAGRxD,KAAS,OAAHsC,QAAG,IAAHA,GAAS,QAAN,GAAHA,EAAKtC,YAAI,QAAa,QAAb,GAAT,GAAWsH,mBAAW,YAAnB,EAAH,GAAwBtH,KAC9B0G,YAAgB,OAAHpE,QAAG,IAAHA,GAAgB,QAAb,GAAHA,EAAKoE,mBAAW,YAAb,EAAH,GAAkBQ,MAC/BhH,KAAS,OAAHoC,QAAG,IAAHA,GAAS,QAAN,GAAHA,EAAKpC,YAAI,YAAN,EAAH,GAAWgH,MACjB/G,MAAOxB,EAAY,OAAH2D,QAAG,IAAHA,GAAS,QAAN,GAAHA,EAAKpC,YAAI,YAAN,EAAH,GAAWgH,OAC3BxB,SAAU,SAAC3F,GAAO,IAAD,IACfD,GACEC,EACG,OAAHuC,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKtC,YAAI,OAAa,QAAb,EAAT,EAAWsH,mBAAW,WAAnB,EAAH,EAAwBtH,KACxB9B,MAILmB,KAAUnB,EACT,oCACGqB,IACC,0BAAM0F,MAAO,CAAEE,MAAO,QACnB5F,KAKP,4CASlB,kBAAC,IAAG,CAACgG,GAAG,IAAIC,GAAG,IAAIwB,GAAG,MACpB,kBAAC,IAAS,KACR,kBAAC,IAAK,KAAC,eAEP,kBAAC,IAAK,CACJjC,UAAU,eACV/E,KAAK,OACL0G,YAAY,GACZxG,KAAK,aACLwF,SAAU,SAAC3F,GACTvB,EAAcuB,EAAEE,OAAOmI,MAAM,UAOvC,6BAsCA,kBAAC,IAAG,CAAC7C,GAAG,IAAIC,GAAG,IAAIwB,GAAG,IAAIjC,UAAU,aAClC,kBAAC,IAAK,CAACA,UAAU,QAAO,UACxB,yBACEA,UAAU,mBACVW,SAAU,SAAC3F,GACTnB,EAAY,2BACPD,GAAQ,kBACV,SAAWoB,EAAEE,OAAOE,WAGzB,2BACEsF,UAAQ,EACRR,MAAO,CAAEoD,YAAa,OACtBrI,KAAK,QACLE,KAAK,SACLC,MAAM,WAER,0BAAM8E,MAAO,CAAEoD,YAAa,SAAU,UAEtC,2BACE5C,UAAQ,EACRR,MAAO,CAAEoD,YAAa,OACtBrI,KAAK,QACLE,KAAK,SACLC,MAAM,aAER,0BAAM8E,MAAO,CAAEoD,YAAa,QAAS,cAGzC,kBAAC,IAAG,KACF,kBAAC,IAAOC,OAAM,CACZnD,MAAM,UACNnF,KAAK,SACL+E,UAAU,kBAAiB,kB,iCCx/B7C,2EAEIwD,EAAY,CAAC,YAAa,YAAa,MAAO,WAAY,QAAS,SAAU,OAK7EC,EAAY,CACdC,SAAUC,IAAUC,KACpBC,IAAKF,IAAUG,KACfC,MAAOJ,IAAUG,KACjBE,OAAQL,IAAUG,KAClBnB,SAAUgB,IAAUG,KACpBG,IAAKC,cACLlE,UAAW2D,IAAUQ,OACrBC,UAAWT,IAAUU,QAMnBC,EAAY,SAAmBC,GACjC,IAAIvE,EAAYuE,EAAMvE,UAClBoE,EAAYG,EAAMH,UAClBP,EAAMU,EAAMV,IACZlB,EAAW4B,EAAM5B,SACjBoB,EAAQQ,EAAMR,MACdC,EAASO,EAAMP,OACfQ,EAAMD,EAAMN,IACZQ,EAAaC,YAA8BH,EAAOf,GAElDmB,EAAUC,0BAAgBC,IAAW7E,IAAW6D,GAAM,MAAeE,EAAQ,aAAe,gBAAcA,IAASC,IAAS,uBAA6BD,IAASpB,IAAW,YAAqByB,GAMtM,MAJY,aAARI,IACFC,EAAW9B,SAAWA,GAGJmC,IAAMC,cAAcP,EAAKQ,YAAS,GAAIP,EAAY,CACpEzE,UAAW2E,MAIfL,EAAUb,UAAYA,EACtBa,EAAUW,aA1BS,CACjBhB,IAAK,OA0BQK","file":"static/js/312.c6356ef0.chunk.js","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\r\nimport xmlJs from \"xml-js\";\r\nimport Multiselect from \"multiselect-react-dropdown\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Form,\r\n  Row,\r\n  Input,\r\n  Label,\r\n  Button,\r\n  FormGroup,\r\n  CustomInput,\r\n  Badge,\r\n  Spinner,\r\n} from \"reactstrap\";\r\nimport { history } from \"../../../../history\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Country, State, City } from \"country-state-city\";\r\nimport Select from \"react-select\";\r\nimport moment from \"moment-timezone\";\r\nimport { Route, useHistory } from \"react-router-dom\";\r\n\r\nimport swal from \"sweetalert\";\r\nimport \"../../../../../src/layouts/assets/scss/pages/users.scss\";\r\n\r\nimport {\r\n  CreateAccountSave,\r\n  CreateAccountView,\r\n  Get_RoleList,\r\n  _BulkUpload,\r\n  _Get,\r\n  _GetList,\r\n  _PostSave,\r\n} from \"../../../../ApiEndPoint/ApiCalling\";\r\nimport { BiEnvelope } from \"react-icons/bi\";\r\nimport { FcPhoneAndroid } from \"react-icons/fc\";\r\nimport { BsWhatsapp } from \"react-icons/bs\";\r\nimport \"../../../../assets/scss/pages/users.scss\";\r\nimport UserContext from \"../../../../context/Context\";\r\nimport { CloudLightning } from \"react-feather\";\r\nimport { FaPlus } from \"react-icons/fa\";\r\nimport {\r\n  Assign_Role_To_SuperAdmin,\r\n  Bulk_Upload_Customer,\r\n  Bulk_Upload_User,\r\n  Role_list_by_Master,\r\n  country_state_City_List,\r\n} from \"../../../../ApiEndPoint/Api\";\r\n\r\nconst CreateAccount = () => {\r\n  const [CreatAccountView, setCreatAccountView] = useState([]);\r\n  const [Countries, setCountry] = useState({});\r\n  const [States, setState] = useState({});\r\n  const [Cities, setCities] = useState({});\r\n  const [BulkImport, setBulkImport] = useState(null);\r\n  const [Master, setMaster] = useState(false);\r\n  const [formData, setFormData] = useState({});\r\n  const [dropdownValue, setdropdownValue] = useState([]);\r\n  const [Country_State_city, setCountry_State_city] = useState([]);\r\n  const [AllAssignRoleList, setAllAssignRoleList] = useState([]);\r\n  const [SelectedRoleToAssign, setSelectedRoleToAssign] = useState([]);\r\n  const [index, setindex] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [Loader, setLoader] = useState(false);\r\n  const [permissions, setpermissions] = useState({});\r\n\r\n  const Context = useContext(UserContext);\r\n  let history = useHistory();\r\n\r\n  const handleInputChange = (e, type, i) => {\r\n    const { name, value, checked } = e.target;\r\n    setindex(i);\r\n    if (type == \"checkbox\") {\r\n      if (checked) {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      } else {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      }\r\n    } else {\r\n      if (type == \"number\") {\r\n        if (/^\\d{0,10}$/.test(value)) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          setError(\"\");\r\n        } else {\r\n          setError(\r\n            \"Please enter a valid number with a maximum length of 10 digits\"\r\n          );\r\n        }\r\n      } else {\r\n        if (value.length <= 10) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          // console.log(value);\r\n          setError(\"\");\r\n        } else {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          // setError(\"Input length exceeds the maximum of 10 characters\");\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // console.log(formData);\r\n  }, [formData]);\r\n  useEffect(() => {\r\n    const getLocation = () => {\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(\r\n          (position) => {\r\n            const { latitude, longitude } = position.coords;\r\n\r\n            console.log(position.coords);\r\n          },\r\n          (error) => {\r\n            swal(\"error\", error);\r\n          },\r\n          { enableHighAccuracy: true }\r\n        );\r\n      } else {\r\n        swal(\"Your Browser does not support Location\");\r\n      }\r\n    };\r\n\r\n    getLocation();\r\n  }, []);\r\n\r\n  // if (Loader) {\r\n  //   return (\r\n  //     <div\r\n  //       style={{\r\n  //         display: \"flex\",\r\n  //         justifyContent: \"center\",\r\n  //         marginTop: \"20rem\",\r\n  //       }}>\r\n  //       <Spinner\r\n  //         style={{\r\n  //           height: \"4rem\",\r\n  //           width: \"4rem\",\r\n  //         }}\r\n  //         color=\"primary\">\r\n  //         Loading...\r\n  //       </Spinner>\r\n  //     </div>\r\n  //   );\r\n  // }\r\n  useEffect(() => {\r\n    let userdata = JSON.parse(localStorage.getItem(\"userData\"));\r\n    _GetList(country_state_City_List)\r\n      .then((res) => {\r\n        setCountry_State_city(res);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n    if (userdata?.rolename?.rank === 0) {\r\n      setMaster(true);\r\n      _Get(Role_list_by_Master, userdata?._id)\r\n        .then((res) => {\r\n          let Superadmin = res?.Role?.filter((ele) =>\r\n            ele?.roleName?.toLowerCase()?.includes(\"superadmin\")\r\n          );\r\n          let WithoutSuperadmin = res?.Role?.filter(\r\n            (ele) => ele?.roleName !== \"SuperAdmin\"\r\n          );\r\n          if (Superadmin) {\r\n            setdropdownValue(Superadmin);\r\n          }\r\n\r\n          if (WithoutSuperadmin) {\r\n            setAllAssignRoleList(res?.Role);\r\n          }\r\n          // console.log(ShowList);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          swal(\"Roles List Not found\");\r\n        });\r\n    } else {\r\n      Get_RoleList(userdata?._id, userdata?.database)\r\n        .then((res) => {\r\n\r\n          let ShowList = res?.Role?.filter(\r\n            (item, i) => item?.position > userdata?.rolename?.position\r\n          );\r\n          setdropdownValue(res?.Role);\r\n          // console.log(ShowList);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          swal(\"Roles List Not found\");\r\n        });\r\n    }\r\n    CreateAccountView()\r\n      .then((res) => {\r\n        const jsonData = xmlJs.xml2json(res.data, { compact: true, spaces: 2 });\r\n        setCreatAccountView(JSON.parse(jsonData)?.CreateUser?.input);\r\n        setdropdownValue(JSON.parse(jsonData));\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n\r\n    // console.log(userdata?._id);\r\n    // formData[\"created_by\"] = userdata?._id;\r\n  }, []);\r\n\r\n  // console.log(BulkImport);\r\n  const submitHandler = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (BulkImport !== null || BulkImport != undefined) {\r\n      let formdata = new FormData();\r\n      formdata.append(\"file\", BulkImport);\r\n\r\n      await _BulkUpload(Bulk_Upload_User, formdata)\r\n        .then((res) => {\r\n          swal(`${res?.message}`);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          swal(\"Something Went Wrong\");\r\n        });\r\n    } else {\r\n      if (formData?.rolename && formData?.email && formData?.firstName) {\r\n        if (error) {\r\n          swal(\"Error occured while Entering Details\");\r\n        } else {\r\n          CreateAccountSave(formData)\r\n            .then((res) => {\r\n              if (res?.status) {\r\n                let AssignDataBase = [];\r\n                if (SelectedRoleToAssign?.length) {\r\n                  AssignDataBase = SelectedRoleToAssign?.map((ele) => {\r\n                    return {\r\n                      role: {\r\n                        roleName: ele?.roleName,\r\n                        position: 0,\r\n                        desc: ele?.desc,\r\n                        rank: 0,\r\n                        rolePermission: ele?.rolePermission,\r\n                        database: formData[\"database\"],\r\n                        createdBy: res?.User._id,\r\n                      },\r\n                    };\r\n                  });\r\n                  let payload = {\r\n                    Roles: AssignDataBase,\r\n                  };\r\n\r\n                  if (res?.User._id) {\r\n                    _PostSave(Assign_Role_To_SuperAdmin, payload)\r\n                      .then((res) => {\r\n                        // setLoader(false);\r\n\r\n                        console.log(res);\r\n                      })\r\n                      .catch((err) => {\r\n                        // setLoader(false);\r\n\r\n                        console.log(err);\r\n                      });\r\n                  }\r\n                }\r\n                swal(\"User Created Successfully\");\r\n                history.goBack();\r\n              }\r\n            })\r\n            .catch((err) => {\r\n              console.log(err);\r\n            });\r\n        }\r\n      } else {\r\n        swal(\"Enter User Name Email and Select Role\");\r\n      }\r\n    }\r\n  };\r\n  const onSelect1 = (selectedList, selectedItem) => {\r\n    console.log(selectedList);\r\n    setSelectedRoleToAssign(selectedList);\r\n    // setProductList(selectedList[0].productItems);\r\n  };\r\n  const onRemove1 = (selectedList, removedItem) => {\r\n    console.log(selectedList);\r\n    setSelectedRoleToAssign(selectedList);\r\n\r\n    // console.log(index);\r\n  };\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Card>\r\n          <Row className=\"m-2\">\r\n            <Col>\r\n              <h1 className=\"float-left\">Create User</h1>\r\n            </Col>\r\n            <Col>\r\n              <div className=\"float-right\">\r\n                <Route\r\n                  render={({ history }) => (\r\n                    <Button\r\n                      style={{ cursor: \"pointer\" }}\r\n                      className=\"float-right mr-1\"\r\n                      color=\"primary\"\r\n                      onClick={() =>\r\n                        history.push(\"/app/SoftNumen/accounSearch\")\r\n                      }>\r\n                      {\" \"}\r\n                      Back\r\n                      {/* <FaPlus size={15} /> Create User */}\r\n                    </Button>\r\n                  )}\r\n                />\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          {/* <hr /> */}\r\n\r\n          <div className=\"px-1 \">\r\n            <Form className=\"m-1\" onSubmit={submitHandler}>\r\n              <Row className=\"mb-2\">\r\n                <Col lg=\"4\" md=\"4\">\r\n                  <FormGroup>\r\n                    <Label>Role List</Label>\r\n                    <CustomInput\r\n                      required\r\n                      type=\"select\"\r\n                      name=\"rolename\"\r\n                      value={formData[\"rolename\"]}\r\n                      onChange={(e) => {\r\n                        const selectedName =\r\n                          e.target.options[e.target.selectedIndex].getAttribute(\r\n                            \"data-name\"\r\n                          );\r\n                        const selectedPosition =\r\n                          e.target.options[e.target.selectedIndex].getAttribute(\r\n                            \"data-id\"\r\n                          );\r\n\r\n                        if (\r\n                          selectedPosition?.toLowerCase()?.includes(\"admin\") ||\r\n                          selectedPosition\r\n                            ?.toLowerCase()\r\n                            ?.includes(\"superadmin\")\r\n                        ) {\r\n                          let userdata = JSON.parse(\r\n                            localStorage.getItem(\"userData\")\r\n                          );\r\n\r\n                          formData[\"created_by\"] = userdata?._id;\r\n                        }\r\n                        // console.log(dropdownValue);\r\n                        // console.log(formData[\"created_by\"] = userdata?._id;)\r\n                        setFormData({\r\n                          ...formData,\r\n                          [\"rolename\"]: e.target.value,\r\n                          [\"database\"]: selectedName,\r\n                        });\r\n                      }}>\r\n                      <option>--select Role--</option>\r\n                      {dropdownValue &&\r\n                        dropdownValue?.length &&\r\n                        dropdownValue?.map((ele, i) => {\r\n                          return (\r\n                            <option\r\n                              data-id={ele?.roleName}\r\n                              data-name={ele?.database}\r\n                              value={ele?._id}>\r\n                              {ele?.roleName}\r\n                            </option>\r\n                          );\r\n                        })}\r\n                    </CustomInput>\r\n                  </FormGroup>\r\n                </Col>\r\n                {Master && Master && (\r\n                  <>\r\n                    <Col className=\"mb-1\" lg=\"4\" md=\"4\">\r\n                      <div className=\"\">\r\n                        <Label>Select Roles to Assign * </Label>\r\n\r\n                        <Multiselect\r\n                          required\r\n                          showCheckbox=\"true\"\r\n                          isObject=\"false\"\r\n                          options={AllAssignRoleList} // Options to display in the dropdown\r\n                          // selectedValues={selectedValue}   // Preselected value to persist in dropdown\r\n                          onSelect={onSelect1} // Function will trigger on select event\r\n                          onRemove={onRemove1} // Function will trigger on remove event\r\n                          displayValue=\"roleName\" // Property name to display in the dropdown options\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n\r\n                    <Col lg=\"4\" md=\"4\">\r\n                      <FormGroup>\r\n                        <Label>Database Name *</Label>\r\n                        <Input\r\n                          placeholder=\"one or two or three ...\"\r\n                          type=\"text\"\r\n                          value={formData[\"database\"]}\r\n                          onChange={(e) => {\r\n                            setFormData({\r\n                              ...formData,\r\n                              [\"database\"]: e.target.value,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </>\r\n                )}\r\n\r\n                {CreatAccountView &&\r\n                  CreatAccountView?.map((ele, i) => {\r\n                    const convertedTime = moment(\"2022-08-05T12:00:00\")\r\n                      .tz(\"America/New_York\")\r\n                      .format(\"D MMM, YYYY HH:mm\");\r\n\r\n                    if (!!ele?.phoneinput) {\r\n                      return (\r\n                        <>\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <PhoneInput\r\n                                inputClass=\"myphoneinput\"\r\n                                country={\"in\"}\r\n                                onKeyDown={(e) => {\r\n                                  if (\r\n                                    ele?.type?._attributes?.type == \"number\"\r\n                                  ) {\r\n                                    [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                      e.preventDefault();\r\n                                  }\r\n                                }}\r\n                                countryCodeEditable={false}\r\n                                name={ele?.name?._text}\r\n                                value={formData[ele?.name?._text]}\r\n                                onChange={(phone) => {\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [ele?.name?._text]: phone,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </>\r\n                      );\r\n                    } else if (!!ele?.library) {\r\n                      if (ele?.label._text?.includes(\"ountry\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n\r\n                              <Input\r\n                                onKeyDown={(e) => {\r\n                                  if (\r\n                                    ele?.type?._attributes?.type == \"number\"\r\n                                  ) {\r\n                                    [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                      e.preventDefault();\r\n                                  }\r\n                                }}\r\n                                type={ele?.type?._attributes?.type}\r\n                                placeholder={ele?.placeholder?._text}\r\n                                name={ele?.name?._text}\r\n                                value={formData[ele?.name?._text]}\r\n                                onChange={(e) =>\r\n                                  handleInputChange(\r\n                                    e,\r\n                                    ele?.type?._attributes?.type,\r\n                                    i\r\n                                  )\r\n                                }\r\n                              />\r\n                              {/* <Select\r\n                                inputClass=\"countryclass\"\r\n                                className=\"countryclassnw\"\r\n                                options={Country.getAllCountries()}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={Countries}\r\n                                onChange={(country) => {\r\n                                  setCountry(country);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"Country\"]: country?.name,\r\n                                  });\r\n                                }}\r\n                              /> */}\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else if (ele?.label._text?.includes(\"tate\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <Input\r\n                                disabled\r\n                                onKeyDown={(e) => {\r\n                                  if (\r\n                                    ele?.type?._attributes?.type == \"number\"\r\n                                  ) {\r\n                                    [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                      e.preventDefault();\r\n                                  }\r\n                                }}\r\n                                type={ele?.type?._attributes?.type}\r\n                                placeholder={ele?.placeholder?._text}\r\n                                name={ele?.name?._text}\r\n                                value={formData[ele?.name?._text]}\r\n                                onChange={(e) =>\r\n                                  handleInputChange(\r\n                                    e,\r\n                                    ele?.type?._attributes?.type,\r\n                                    i\r\n                                  )\r\n                                }\r\n                              />\r\n                              {/* <Select\r\n                                options={State?.getStatesOfCountry(\r\n                                  Countries?.isoCode\r\n                                )}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={States}\r\n                                onChange={(State) => {\r\n                                  setState(State);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"State\"]: State?.name,\r\n                                  });\r\n                                }}\r\n                              /> */}\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else if (ele?.label._text?.includes(\"ity\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <Input\r\n                                disabled\r\n                                onKeyDown={(e) => {\r\n                                  if (\r\n                                    ele?.type?._attributes?.type == \"number\"\r\n                                  ) {\r\n                                    [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                      e.preventDefault();\r\n                                  }\r\n                                }}\r\n                                type={ele?.type?._attributes?.type}\r\n                                placeholder={ele?.placeholder?._text}\r\n                                name={ele?.name?._text}\r\n                                value={formData[ele?.name?._text]}\r\n                                onChange={(e) =>\r\n                                  handleInputChange(\r\n                                    e,\r\n                                    ele?.type?._attributes?.type,\r\n                                    i\r\n                                  )\r\n                                }\r\n                              />\r\n                              {/* <Select\r\n                                options={City?.getCitiesOfState(\r\n                                  States?.countryCode,\r\n                                  States?.isoCode\r\n                                )}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={Cities}\r\n                                onChange={(City) => {\r\n                                  setCities(City);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"City\"]: City?.name,\r\n                                  });\r\n                                }}\r\n                              /> */}\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else {\r\n                        return (\r\n                          <>\r\n                            {ele?.type?._attributes?.type == \"date\" ? (\r\n                              <>\r\n                                <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                  <FormGroup key={i}>\r\n                                    <Label>{ele?.label?._text}</Label>\r\n\r\n                                    <Input\r\n                                      onKeyDown={(e) => {\r\n                                        if (\r\n                                          ele?.type?._attributes?.type ==\r\n                                          \"number\"\r\n                                        ) {\r\n                                          [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                            e.key\r\n                                          ) && e.preventDefault();\r\n                                        }\r\n                                      }}\r\n                                      type={ele?.type?._attributes?.type}\r\n                                      placeholder={ele?.placeholder?._text}\r\n                                      name={ele?.name?._text}\r\n                                      dateFormat={\r\n                                        Context?.UserInformatio?.dateFormat\r\n                                      }\r\n                                      value={\r\n                                        moment(formData[ele?.name?._text])\r\n                                          .tz(Context?.UserInformatio?.timeZone)\r\n                                          .format(\r\n                                            Context?.UserInformatio?.dateFormat\r\n                                          )\r\n                                        // formData[ele?.name?._text]\r\n                                      }\r\n                                      // value={formData[ele?.name?._text]}\r\n                                      onChange={(e) =>\r\n                                        handleInputChange(\r\n                                          e,\r\n                                          ele?.type?._attributes?.type,\r\n                                          i\r\n                                        )\r\n                                      }\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </FormGroup>\r\n                                </Col>\r\n                              </>\r\n                            ) : (\r\n                              <>\r\n                                <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                  <FormGroup key={i}>\r\n                                    <Label>{ele?.label?._text}</Label>\r\n\r\n                                    <Input\r\n                                      onKeyDown={(e) => {\r\n                                        if (\r\n                                          ele?.type?._attributes?.type ==\r\n                                          \"number\"\r\n                                        ) {\r\n                                          [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                            e.key\r\n                                          ) && e.preventDefault();\r\n                                        }\r\n                                      }}\r\n                                      type={ele?.type?._attributes?.type}\r\n                                      placeholder={ele?.placeholder?._text}\r\n                                      name={ele?.name?._text}\r\n                                      value={formData[ele?.name?._text]}\r\n                                      onChange={(e) =>\r\n                                        handleInputChange(\r\n                                          e,\r\n                                          ele?.type?._attributes?.type,\r\n                                          i\r\n                                        )\r\n                                      }\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </FormGroup>\r\n                                </Col>\r\n                              </>\r\n                            )}\r\n                          </>\r\n                        );\r\n                      }\r\n                    } else if (ele?.label._text?.includes(\"incode\")) {\r\n                      return (\r\n                        <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                          <FormGroup>\r\n                            <Label>{ele?.label?._text}</Label>\r\n                            <Input\r\n                              onKeyDown={(e) => {\r\n                                if (ele?.type?._attributes?.type == \"number\") {\r\n                                  [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                    e.preventDefault();\r\n                                }\r\n                              }}\r\n                              type={ele?.type?._attributes?.type}\r\n                              placeholder={ele?.placeholder?._text}\r\n                              name={ele?.name?._text}\r\n                              value={formData[ele?.name?._text]}\r\n                              onChange={(e) => {\r\n                                let SelectedCity = Country_State_city?.filter(\r\n                                  (ele) => ele?.Pincode == e.target.value\r\n                                );\r\n                                // console.log(SelectedCity);\r\n                                if (SelectedCity?.length) {\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"State\"]: SelectedCity[0]?.StateName,\r\n                                    [\"City\"]: SelectedCity[0]?.District,\r\n                                    [\"pincode\"]: e.target.value,\r\n                                  });\r\n                                } else {\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [ele?.name?._text]: e.target.value,\r\n                                  });\r\n                                }\r\n                                // handleInputChange(\r\n                                //   e,\r\n                                //   ele?.type?._attributes?.type,\r\n                                //   i\r\n                                // );\r\n                              }}\r\n                            />\r\n                            {/* <Select\r\n                                options={City?.getCitiesOfState(\r\n                                  States?.countryCode,\r\n                                  States?.isoCode\r\n                                )}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={Cities}\r\n                                onChange={(City) => {\r\n                                  setCities(City);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"City\"]: City?.name,\r\n                                  });\r\n                                }}\r\n                              /> */}\r\n                            {index === i ? (\r\n                              <>\r\n                                {error && (\r\n                                  <span style={{ color: \"red\" }}>{error}</span>\r\n                                )}\r\n                              </>\r\n                            ) : (\r\n                              <></>\r\n                            )}\r\n                          </FormGroup>\r\n                        </Col>\r\n                      );\r\n                    } else {\r\n                      return (\r\n                        <>\r\n                          {!!ele?.number ? (\r\n                            <>\r\n                              <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                <FormGroup key={i}>\r\n                                  <Label>{ele?.label?._text}</Label>\r\n\r\n                                  <Input\r\n                                    onWheel={(e) => {\r\n                                      e.preventDefault(); // Prevent the mouse wheel scroll event\r\n                                    }}\r\n                                    onKeyDown={(e) => {\r\n                                      if (\r\n                                        ele?.type?._attributes?.type == \"number\"\r\n                                      ) {\r\n                                        [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                          e.preventDefault();\r\n                                      }\r\n                                    }}\r\n                                    type={ele?.type?._attributes?.type}\r\n                                    placeholder={ele?.placeholder?._text}\r\n                                    name={ele?.name?._text}\r\n                                    value={formData[ele?.name?._text]}\r\n                                    onChange={(e) =>\r\n                                      handleInputChange(\r\n                                        e,\r\n                                        ele?.type?._attributes?.type,\r\n                                        i\r\n                                      )\r\n                                    }\r\n                                  />\r\n                                  {index === i ? (\r\n                                    <>\r\n                                      {error && (\r\n                                        <span style={{ color: \"red\" }}>\r\n                                          {error}\r\n                                        </span>\r\n                                      )}\r\n                                    </>\r\n                                  ) : (\r\n                                    <></>\r\n                                  )}\r\n                                </FormGroup>\r\n                              </Col>\r\n                            </>\r\n                          ) : (\r\n                            <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                              <FormGroup key={i}>\r\n                                <Label>{ele?.label?._text}</Label>\r\n\r\n                                <Input\r\n                                  onKeyDown={(e) => {\r\n                                    if (\r\n                                      ele?.type?._attributes?.type == \"number\"\r\n                                    ) {\r\n                                      [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                        e.preventDefault();\r\n                                    }\r\n                                  }}\r\n                                  type={ele?.type?._attributes?.type}\r\n                                  placeholder={ele?.placeholder?._text}\r\n                                  name={ele?.name?._text}\r\n                                  value={formData[ele?.name?._text]}\r\n                                  onChange={(e) => {\r\n                                    handleInputChange(\r\n                                      e,\r\n                                      ele?.type?._attributes?.type,\r\n                                      i\r\n                                    );\r\n                                  }}\r\n                                />\r\n                                {index === i ? (\r\n                                  <>\r\n                                    {error && (\r\n                                      <span style={{ color: \"red\" }}>\r\n                                        {error}\r\n                                      </span>\r\n                                    )}\r\n                                  </>\r\n                                ) : (\r\n                                  <></>\r\n                                )}\r\n                              </FormGroup>\r\n                            </Col>\r\n                          )}\r\n                        </>\r\n                      );\r\n                    }\r\n                  })}\r\n                <Col lg=\"4\" md=\"4\" sm=\"12\">\r\n                  <FormGroup>\r\n                    <Label>Bulk Import</Label>\r\n\r\n                    <Input\r\n                      className=\"form-control\"\r\n                      type=\"file\"\r\n                      placeholder=\"\"\r\n                      name=\"BulkImport\"\r\n                      onChange={(e) => {\r\n                        setBulkImport(e.target.files[0]);\r\n                      }}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n              </Row>\r\n\r\n              <hr />\r\n              {/* <Row className=\"mt-2 \">\r\n                <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2\">\r\n                  <Label className=\"\">\r\n                    <h4>Status</h4>\r\n                  </Label>\r\n                  <div className=\"form-label-group mx-1\">\r\n                    {CreatAccountView &&\r\n                      CreatAccountView?.CreateAccount?.Radiobutton?.input?.map(\r\n                        (ele, i) => {\r\n                          return (\r\n                            <FormGroup key={i}>\r\n                              <Input\r\n                                key={i}\r\n                                style={{ marginRight: \"3px\" }}\r\n                                required\r\n                                type={ele?.type?._attributes?.type}\r\n                                name={ele?.name?._text}\r\n                                value={`${\r\n                                  ele?.label?._text == \"Active\"\r\n                                    ? \"Active\"\r\n                                    : \"Deactive\"\r\n                                }`}\r\n                                onChange={handleInputChange}\r\n                              />{\" \"}\r\n                              <span\r\n                                className=\"mx-1 mt-1\"\r\n                                style={{ marginRight: \"20px\" }}\r\n                              >\r\n                                {ele?.label?._text}\r\n                              </span>\r\n                            </FormGroup>\r\n                          );\r\n                        }\r\n                      )}\r\n                  </div>\r\n                </Col>\r\n              </Row> */}\r\n              <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2 mt-1\">\r\n                <Label className=\"mb-0\">Status</Label>\r\n                <div\r\n                  className=\"form-label-group\"\r\n                  onChange={(e) => {\r\n                    setFormData({\r\n                      ...formData,\r\n                      [\"status\"]: e.target.value,\r\n                    });\r\n                  }}>\r\n                  <input\r\n                    required\r\n                    style={{ marginRight: \"3px\" }}\r\n                    type=\"radio\"\r\n                    name=\"status\"\r\n                    value=\"Active\"\r\n                  />\r\n                  <span style={{ marginRight: \"20px\" }}>Active</span>\r\n\r\n                  <input\r\n                    required\r\n                    style={{ marginRight: \"3px\" }}\r\n                    type=\"radio\"\r\n                    name=\"status\"\r\n                    value=\"Deactive\"\r\n                  />\r\n                  <span style={{ marginRight: \"3px\" }}>Deactive</span>\r\n                </div>\r\n              </Col>\r\n              <Row>\r\n                <Button.Ripple\r\n                  color=\"primary\"\r\n                  type=\"submit\"\r\n                  className=\"mr-1 mt-2 mx-2\">\r\n                  Submit\r\n                </Button.Ripple>\r\n              </Row>\r\n            </Form>\r\n          </div>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default CreateAccount;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"row\", \"disabled\", \"check\", \"inline\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  row: PropTypes.bool,\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar FormGroup = function FormGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      row = props.row,\n      disabled = props.disabled,\n      check = props.check,\n      inline = props.inline,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, row ? 'row' : false, check ? 'form-check' : 'form-group', check && inline ? 'form-check-inline' : false, check && disabled ? 'disabled' : false), cssModule);\n\n  if (Tag === 'fieldset') {\n    attributes.disabled = disabled;\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormGroup.propTypes = propTypes;\nFormGroup.defaultProps = defaultProps;\nexport default FormGroup;"],"sourceRoot":""}