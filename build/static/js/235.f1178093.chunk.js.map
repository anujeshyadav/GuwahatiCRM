{"version":3,"sources":["../node_modules/reactstrap/es/FormGroup.js","views/apps/freshlist/accounts/EditAccount.js"],"names":["_excluded","propTypes","children","PropTypes","node","row","bool","check","inline","disabled","tag","tagPropType","className","string","cssModule","object","FormGroup","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps","EditAccount","EditOneData","useState","CreatAccountView","setCreatAccountView","Countries","setCountry","States","setState","Cities","setCities","formData","setFormData","dropdownValue","setdropdownValue","index","setindex","error","setError","Context","useContext","UserContext","handleInputChange","e","type","i","target","name","value","checked","test","length","useEffect","console","log","Get_RoleList","then","res","Role","catch","err","swal","Country","countryselected","getAllCountries","filter","ele","State","stateselected","getStatesOfCountry","isoCode","City","cityselected","getCitiesOfState","countryCode","status","CreateAccountView","jsonData","xmlJs","xml2json","data","compact","spaces","JSON","parse","CreateUser","input","onSubmit","preventDefault","CreateAccountUpdate","_id","lg","md","required","onChange","map","roleName","moment","tz","format","phoneinput","key","sm","label","_text","inputClass","country","onKeyDown","_attributes","includes","countryCodeEditable","phone","style","color","library","options","getOptionLabel","getOptionValue","placeholder","dateFormat","UserInformatio","timeZone","number","onWheel","marginRight","Ripple"],"mappings":"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","file":"static/js/235.f1178093.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"row\", \"disabled\", \"check\", \"inline\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  row: PropTypes.bool,\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar FormGroup = function FormGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      row = props.row,\n      disabled = props.disabled,\n      check = props.check,\n      inline = props.inline,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, row ? 'row' : false, check ? 'form-check' : 'form-group', check && inline ? 'form-check-inline' : false, check && disabled ? 'disabled' : false), cssModule);\n\n  if (Tag === 'fieldset') {\n    attributes.disabled = disabled;\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormGroup.propTypes = propTypes;\nFormGroup.defaultProps = defaultProps;\nexport default FormGroup;","import React, { useEffect, useState, useContext } from \"react\";\r\nimport xmlJs from \"xml-js\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Form,\r\n  Row,\r\n  Input,\r\n  Label,\r\n  Button,\r\n  FormGroup,\r\n  CustomInput,\r\n  Badge,\r\n} from \"reactstrap\";\r\nimport { history } from \"../../../../history\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Country, State, City } from \"country-state-city\";\r\nimport Select from \"react-select\";\r\nimport moment from \"moment-timezone\";\r\nimport { Route } from \"react-router-dom\";\r\n\r\nimport swal from \"sweetalert\";\r\nimport \"../../../../../src/layouts/assets/scss/pages/users.scss\";\r\n\r\nimport {\r\n  CreateAccountSave,\r\n  CreateAccountUpdate,\r\n  CreateAccountView,\r\n  Get_RoleList,\r\n} from \"../../../../ApiEndPoint/ApiCalling\";\r\nimport { BiEnvelope } from \"react-icons/bi\";\r\nimport { FcPhoneAndroid } from \"react-icons/fc\";\r\nimport { BsWhatsapp } from \"react-icons/bs\";\r\nimport \"../../../../assets/scss/pages/users.scss\";\r\nimport UserContext from \"../../../../context/Context\";\r\nimport { CloudLightning } from \"react-feather\";\r\nimport { FaPlus } from \"react-icons/fa\";\r\n\r\nconst EditAccount = ({ EditOneData }) => {\r\n  const [CreatAccountView, setCreatAccountView] = useState([]);\r\n  const [Countries, setCountry] = useState({});\r\n  const [States, setState] = useState({});\r\n  const [Cities, setCities] = useState({});\r\n  const [formData, setFormData] = useState({});\r\n  const [dropdownValue, setdropdownValue] = useState({});\r\n  const [index, setindex] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [permissions, setpermissions] = useState({});\r\n\r\n  const Context = useContext(UserContext);\r\n\r\n  const handleInputChange = (e, type, i) => {\r\n    const { name, value, checked } = e.target;\r\n    setindex(i);\r\n    if (type == \"checkbox\") {\r\n      if (checked) {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      } else {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      }\r\n    } else {\r\n      if (type == \"number\") {\r\n        if (/^\\d{0,10}$/.test(value)) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          setError(\"\");\r\n        } else {\r\n          setError(\r\n            \"Please enter a valid number with a maximum length of 10 digits\"\r\n          );\r\n        }\r\n      } else {\r\n        if (value.length <= 10) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          // console.log(value);\r\n          setError(\"\");\r\n        } else {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          // setError(\"Input length exceeds the maximum of 10 characters\");\r\n        }\r\n      }\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    console.log(formData);\r\n  }, [formData]);\r\n  useEffect(() => {\r\n    setFormData(EditOneData);\r\n    Get_RoleList().then((res)=>{\r\n      setdropdownValue(res?.Role)\r\n    }).catch((err)=>{\r\n      console.log(err)\r\n      swal(\"Roles List Not found\")\r\n    })\r\n    if (EditOneData?.Country) {\r\n      let countryselected = Country?.getAllCountries()?.filter(\r\n        (ele, i) => ele?.name == EditOneData?.Country\r\n      );\r\n      setCountry(countryselected);\r\n      if (EditOneData?.State) {\r\n        let stateselected = State?.getStatesOfCountry(\r\n          countryselected[0]?.isoCode\r\n        )?.filter((ele, i) => ele?.name == EditOneData?.State);\r\n        setState(stateselected);\r\n        if (EditOneData?.City) {\r\n          let cityselected = City.getCitiesOfState(\r\n            stateselected[0]?.countryCode,\r\n            stateselected[0]?.isoCode\r\n          )?.filter((ele, i) => ele?.name == EditOneData?.City);\r\n          setCities(cityselected);\r\n        }\r\n      }\r\n    }\r\n\r\n    formData[\"status\"] = EditOneData?.status;\r\n    CreateAccountView()\r\n      .then((res) => {\r\n        const jsonData = xmlJs.xml2json(res.data, { compact: true, spaces: 2 });\r\n        // console.log(JSON.parse(jsonData)?.CreateUser?.input);\r\n\r\n        setCreatAccountView(JSON.parse(jsonData)?.CreateUser?.input);\r\n\r\n        setdropdownValue(JSON.parse(jsonData));\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    // console.log(EditOneData);\r\n    // console.log(formData);\r\n    if (error) {\r\n      swal(\"Error occured while Entering Details\");\r\n    } else {\r\n      CreateAccountUpdate(EditOneData?._id, formData)\r\n        .then((res) => {\r\n          setFormData({});\r\n          if (res.status) {\r\n            // window.location.reload();\r\n            swal(\"User Updated Successfully\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Card>\r\n          <Row className=\"m-2\">\r\n            <Col>\r\n              <h1 className=\"float-left\">Edit User</h1>\r\n            </Col>\r\n            <Col>\r\n              <div className=\"float-right\">\r\n                {/* <Route\r\n                  render={({ history }) => (\r\n                    <Button\r\n                      style={{ cursor: \"pointer\" }}\r\n                      className=\"float-right mr-1\"\r\n                      color=\"primary\"\r\n                      onClick={() =>\r\n                        history.push(\"/app/SoftNumen/accounSearch\")\r\n                      }\r\n                    >\r\n                      {\" \"}\r\n                      Back\r\n                    </Button>\r\n                  )}\r\n                /> */}\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          {/* <hr /> */}\r\n\r\n        \r\n            <Form className=\"m-1\" onSubmit={submitHandler}>\r\n              <Row className=\"mb-2\">\r\n                {/* <Col lg=\"6\" md=\"6\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      {\r\n                        dropdownValue.CreateAccount?.MyDropdown?.dropdown?.label\r\n                          ?._text\r\n                      }\r\n                    </Label>\r\n                    <CustomInput\r\n                      required\r\n                      type=\"select\"\r\n                      name={\r\n                        dropdownValue.CreateAccount?.MyDropdown?.dropdown?.name\r\n                          ?._text\r\n                      }\r\n                      value={\r\n                        formData[\r\n                          dropdownValue.CreateAccount?.MyDropdown?.dropdown\r\n                            ?.name?._text\r\n                        ]\r\n                      }\r\n                      onChange={handleInputChange}\r\n                    >\r\n                      <option value=\"\">--Select Role--</option>\r\n                      {dropdownValue?.CreateAccount?.MyDropdown?.dropdown?.option.map(\r\n                        (option, index) => (\r\n                          <option\r\n                            key={index}\r\n                            value={option?._attributes?.value}\r\n                          >\r\n                            {option?._attributes?.value}\r\n                          </option>\r\n                        )\r\n                      )}\r\n                    </CustomInput>\r\n                  </FormGroup>\r\n                </Col> */}\r\n                <Col lg=\"4\" md=\"4\">\r\n                  <FormGroup>\r\n                 <Label>Role List</Label>\r\n                 <CustomInput\r\n                 required\r\n                 type=\"select\"\r\n                 name=\"rolename\"\r\n                 value={formData[\"rolename\"]}\r\n                 onChange={(e)=>{  \r\n                  setFormData({\r\n                  ...formData,\r\n                  [\"rolename\"]: e.target.value\r\n          })}}\r\n                 >\r\n                  <option>\r\n                    --select Role--\r\n                  </option>\r\n                 {dropdownValue && dropdownValue?.length && dropdownValue?.map((ele,i)=>{\r\n                  return(\r\n                    \r\n                  <option value={ele?._id}>\r\n                   {ele?.roleName}\r\n                  </option>\r\n                  )\r\n                 })}\r\n                \r\n                 </CustomInput>\r\n\r\n                  </FormGroup>\r\n                </Col>\r\n                {CreatAccountView &&\r\n                  CreatAccountView?.map((ele, i) => {\r\n                    {\r\n                      /* console.log(Context?.UserInformatio?.dateFormat); */\r\n                    }\r\n                    // console.log(Countries);\r\n                    // console.log(States);\r\n                    const convertedTime = moment(\"2022-08-05T12:00:00\")\r\n                      .tz(\"America/New_York\")\r\n                      .format(\"D MMM, YYYY HH:mm\");\r\n\r\n                    if (!!ele?.phoneinput) {\r\n                      return (\r\n                        <>\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <PhoneInput\r\n                                inputClass=\"myphoneinput\"\r\n                                country={\"in\"}\r\n                                onKeyDown={(e) => {\r\n                                  if (\r\n                                    ele?.type?._attributes?.type == \"number\"\r\n                                  ) {\r\n                                    [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                      e.preventDefault();\r\n                                  }\r\n                                }}\r\n                                countryCodeEditable={false}\r\n                                name={ele?.name?._text}\r\n                                value={formData[ele?.name?._text]}\r\n                                onChange={(phone) => {\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [ele?.name?._text]: phone,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </>\r\n                      );\r\n                    } else if (!!ele?.library) {\r\n                      if (ele?.label._text?.includes(\"ountry\")) {\r\n                        console.log(ele);\r\n                        return (\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <Select\r\n                                disabled\r\n                                inputClass=\"countryclass\"\r\n                                className=\"countryclassnw\"\r\n                                options={Country.getAllCountries()}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={Countries}\r\n                                onChange={(country) => {\r\n                                  setCountry(country);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"Country\"]: country?.name,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else if (ele?.label._text?.includes(\"tate\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <Select\r\n                                disabled\r\n                                options={State?.getStatesOfCountry(\r\n                                  Countries?.isoCode\r\n                                )}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={States}\r\n                                onChange={(State) => {\r\n                                  setState(State);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"State\"]: State?.name,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else if (ele?.label._text?.includes(\"ity\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <Select\r\n                                disabled\r\n                                options={City?.getCitiesOfState(\r\n                                  States?.countryCode,\r\n                                  States?.isoCode\r\n                                )}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={Cities}\r\n                                onChange={(City) => {\r\n                                  setCities(City);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"City\"]: City?.name,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else {\r\n                        return (\r\n                          <>\r\n                            {ele?.type?._attributes?.type == \"date\" ? (\r\n                              <>\r\n                                <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                  <FormGroup key={i}>\r\n                                    <Label>{ele?.label?._text}</Label>\r\n\r\n                                    <Input\r\n                                      onKeyDown={(e) => {\r\n                                        if (\r\n                                          ele?.type?._attributes?.type ==\r\n                                          \"number\"\r\n                                        ) {\r\n                                          [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                            e.key\r\n                                          ) && e.preventDefault();\r\n                                        }\r\n                                      }}\r\n                                      type={ele?.type?._attributes?.type}\r\n                                      placeholder={ele?.placeholder?._text}\r\n                                      name={ele?.name?._text}\r\n                                      dateFormat={\r\n                                        Context?.UserInformatio?.dateFormat\r\n                                      }\r\n                                      value={\r\n                                        moment(formData[ele?.name?._text])\r\n                                          .tz(Context?.UserInformatio?.timeZone)\r\n                                          .format(\r\n                                            Context?.UserInformatio?.dateFormat\r\n                                          )\r\n                                        // formData[ele?.name?._text]\r\n                                      }\r\n                                      // value={formData[ele?.name?._text]}\r\n                                      onChange={(e) =>\r\n                                        handleInputChange(\r\n                                          e,\r\n                                          ele?.type?._attributes?.type,\r\n                                          i\r\n                                        )\r\n                                      }\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </FormGroup>\r\n                                </Col>\r\n                              </>\r\n                            ) : (\r\n                              <>\r\n                                <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                  <FormGroup key={i}>\r\n                                    <Label>{ele?.label?._text}</Label>\r\n\r\n                                    <Input\r\n                                      onKeyDown={(e) => {\r\n                                        if (\r\n                                          ele?.type?._attributes?.type ==\r\n                                          \"number\"\r\n                                        ) {\r\n                                          [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                            e.key\r\n                                          ) && e.preventDefault();\r\n                                        }\r\n                                      }}\r\n                                      type={ele?.type?._attributes?.type}\r\n                                      placeholder={ele?.placeholder?._text}\r\n                                      name={ele?.name?._text}\r\n                                      value={formData[ele?.name?._text]}\r\n                                      onChange={(e) =>\r\n                                        handleInputChange(\r\n                                          e,\r\n                                          ele?.type?._attributes?.type,\r\n                                          i\r\n                                        )\r\n                                      }\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </FormGroup>\r\n                                </Col>\r\n                              </>\r\n                            )}\r\n                          </>\r\n                        );\r\n                      }\r\n                    } else {\r\n                      return (\r\n                        <>\r\n                          {!!ele?.number ? (\r\n                            <>\r\n                              <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                <FormGroup key={i}>\r\n                                  <Label>{ele?.label?._text}</Label>\r\n\r\n                                  <Input\r\n                                    onWheel={(e) => {\r\n                                      e.preventDefault(); // Prevent the mouse wheel scroll event\r\n                                    }}\r\n                                    onKeyDown={(e) => {\r\n                                      if (\r\n                                        ele?.type?._attributes?.type == \"number\"\r\n                                      ) {\r\n                                        [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                          e.preventDefault();\r\n                                      }\r\n                                    }}\r\n                                    type={ele?.type?._attributes?.type}\r\n                                    placeholder={ele?.placeholder?._text}\r\n                                    name={ele?.name?._text}\r\n                                    value={formData[ele?.name?._text]}\r\n                                    onChange={(e) =>\r\n                                      handleInputChange(\r\n                                        e,\r\n                                        ele?.type?._attributes?.type,\r\n                                        i\r\n                                      )\r\n                                    }\r\n                                  />\r\n                                  {index === i ? (\r\n                                    <>\r\n                                      {error && (\r\n                                        <span style={{ color: \"red\" }}>\r\n                                          {error}\r\n                                        </span>\r\n                                      )}\r\n                                    </>\r\n                                  ) : (\r\n                                    <></>\r\n                                  )}\r\n                                </FormGroup>\r\n                              </Col>\r\n                            </>\r\n                          ) : (\r\n                            <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                              <FormGroup key={i}>\r\n                                <Label>{ele?.label?._text}</Label>\r\n\r\n                                <Input\r\n                                  onKeyDown={(e) => {\r\n                                    if (\r\n                                      ele?.type?._attributes?.type == \"number\"\r\n                                    ) {\r\n                                      [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                        e.preventDefault();\r\n                                    }\r\n                                  }}\r\n                                  type={ele?.type?._attributes?.type}\r\n                                  placeholder={ele?.placeholder?._text}\r\n                                  name={ele?.name?._text}\r\n                                  value={formData[ele?.name?._text]}\r\n                                  onChange={(e) => {\r\n                                    // const value = e.target.value;\r\n                                    // // Use regular expression to allow only numbers\r\n                                    // const numericValue = value.replace(\r\n                                    //   /\\D/g,\r\n                                    //   \"\"\r\n                                    // );\r\n                                    handleInputChange(\r\n                                      e,\r\n                                      ele?.type?._attributes?.type,\r\n                                      i\r\n                                    );\r\n                                  }}\r\n                                />\r\n                                {index === i ? (\r\n                                  <>\r\n                                    {error && (\r\n                                      <span style={{ color: \"red\" }}>\r\n                                        {error}\r\n                                      </span>\r\n                                    )}\r\n                                  </>\r\n                                ) : (\r\n                                  <></>\r\n                                )}\r\n                              </FormGroup>\r\n                            </Col>\r\n                          )}\r\n                        </>\r\n                      );\r\n                    }\r\n                  })}\r\n              </Row>\r\n\r\n              <hr />\r\n              {/* <Row className=\"mt-2 \">\r\n                <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2\">\r\n                  <Label className=\"\">\r\n                    <h4>Status</h4>\r\n                  </Label>\r\n                  <div className=\"form-label-group mx-1\">\r\n                    {CreatAccountView &&\r\n                      CreatAccountView?.CreateAccount?.Radiobutton?.input?.map(\r\n                        (ele, i) => {\r\n                          return (\r\n                            <FormGroup key={i}>\r\n                              <Input\r\n                                key={i}\r\n                                style={{ marginRight: \"3px\" }}\r\n                                required\r\n                                type={ele?.type?._attributes?.type}\r\n                                name={ele?.name?._text}\r\n                                value={`${\r\n                                  ele?.label?._text == \"Active\"\r\n                                    ? \"Active\"\r\n                                    : \"Deactive\"\r\n                                }`}\r\n                                onChange={handleInputChange}\r\n                              />{\" \"}\r\n                              <span\r\n                                className=\"mx-1 mt-1\"\r\n                                style={{ marginRight: \"20px\" }}\r\n                              >\r\n                                {ele?.label?._text}\r\n                              </span>\r\n                            </FormGroup>\r\n                          );\r\n                        }\r\n                      )}\r\n                  </div>\r\n                </Col>\r\n              </Row> */}\r\n              <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2 mt-1\">\r\n                <Label className=\"mb-0\">Status</Label>\r\n                <div\r\n                  className=\"form-label-group\"\r\n                  onChange={(e) => {\r\n                    setFormData({\r\n                      ...formData,\r\n                      [\"status\"]: e.target.value,\r\n                    });\r\n                  }}\r\n                >\r\n                  <input\r\n                    checked={formData[\"status\"] == \"Active\"}\r\n                    style={{ marginRight: \"3px\" }}\r\n                    type=\"radio\"\r\n                    name=\"status\"\r\n                    value=\"Active\"\r\n                  />\r\n                  <span style={{ marginRight: \"20px\" }}>Active</span>\r\n\r\n                  <input\r\n                    // checked={status == \"Inactive\"}\r\n                    checked={formData[\"status\"] == \"Deactive\"}\r\n                    style={{ marginRight: \"3px\" }}\r\n                    type=\"radio\"\r\n                    name=\"status\"\r\n                    value=\"Deactive\"\r\n                  />\r\n                  <span style={{ marginRight: \"3px\" }}>Deactive</span>\r\n                </div>\r\n              </Col>\r\n              <Row>\r\n                <Button.Ripple\r\n                  color=\"primary\"\r\n                  type=\"submit\"\r\n                  className=\"mr-1 mt-2 mx-2\"\r\n                >\r\n                  Submit\r\n                </Button.Ripple>\r\n              </Row>\r\n            </Form>\r\n          \r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default EditAccount;\r\n"],"sourceRoot":""}