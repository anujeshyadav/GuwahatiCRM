{"version":3,"sources":["../node_modules/multiselect-react-dropdown/dist/index.js","../../node_modules/style-inject/dist/style-inject.es.js","../../src/multiselect/multiselect.component.tsx","views/forms/form-elements/datepicker/Timepicker.js","views/forms/form-elements/datepicker/Datepickers.js","views/forms/form-elements/datepicker/Pickers.js","views/apps/freshlist/accounts/EditTarget.js"],"names":["module","exports","require","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","closeIconTypes","circle","circle2","close","cancel","OutsideAlerter","props","clickEvent","wrapperRef","useRef","outsideClick","useEffect","handleClickOutside","event","current","contains","target","addEventListener","removeEventListener","React","children","Multiselect","c","_this","state","inputValue","options","filteredOptions","unfilteredOptions","selectedValues","Object","assign","preSelectedValues","toggleOptionsList","highlightOption","avoidHighlightFirstOption","showCheckbox","keepSearchTerm","groupedObject","closeIconType","closeIcon","optionTimeout","searchWrapper","createRef","searchBox","onChange","bind","onKeyPress","onFocus","onBlur","renderMultiselectContainer","renderSelectedList","onRemoveSelectedItem","toggelOptionList","onArrowKeyNavigation","onSelectItem","filterOptionsByInput","removeSelectedValuesFromOptions","isSelectedValue","fadeOutSelection","isDisablePreSelectedValues","renderGroupByOptions","renderNormalOption","listenerCallback","resetSelectedValues","getSelectedItems","getSelectedItemsCount","hideOnClickOutside","onCloseOptionList","isVisible","initialSetValue","this","groupBy","singleSelect","groupByOptions","_proto","Promise","resolve","_this2","setState","length","componentDidMount","componentDidUpdate","prevProps","prevSelectedvalues","JSON","stringify","focus","componentWillUnmount","clearTimeout","skipCheck","isObject","displayValue","optionList","filter","findIndex","v","item","indexOf","reduce","r","a","key","push","create","onSearch","value","onKeyPressFn","_this3","matchValues","i","search","caseSensitiveSearch","toLowerCase","toString","e","keyCode","disablePreSelectedValues","previousState","index","onRemove","splice","_this4","closeOnSelect","selectionLimit","onSelect","onSingleSelect","_this5","renderOptionList","emptyRecordMsg","loadingMessage","loading","className","optionContainer","notFound","t","keys","map","Fragment","obj","groupHeading","option","isSelected","_this6","onClick","readOnly","checked","optionValueDecorator","_this7","customCloseIcon","_this8","chips","selectedValueDecorator","src","setTimeout","elem","offsetWidth","offsetHeight","getClientRects","element","getElementsByClassName","_this9","placeholder","id","name","hidePlaceholder","disable","showArrow","customArrow","multiselectContainer","hideSelectedList","onKeyDown","inputField","autoComplete","disabled","onMouseDown","preventDefault","render","Component","defaultProps","Timepickers","basic","Date","timeLimit","preloaded","md","sm","enableTime","noCalendar","dateFormat","date","minTime","maxTime","defaultDate","Datepickers","basicPicker","dateTimePicker","humanFriendly","minMax","disabledRange","multipleDates","rangePicker","weekNum","inlinePicker","Card","CardHeader","CardTitle","CardBody","Row","Col","minDate","altInput","altFormat","data-enable-time","maxDate","fp_incr","from","to","mode","preloadRange","weekNumbers","inline","Pickers","breadCrumbTitle","breadCrumbParent","breadCrumbActive","Timepicker","GrandTotal","SelectedITems","EditTarget","args","useState","setIndex","targetStartDate","settargetStartDate","targetEndDate","settargetEndDate","error","ProductList","setProductList","setPartyList","Salesperson","setSalesperson","grandTotalAmt","setGrandTotalAmt","setEditdata","setUserInfo","SalesPersonList","setSalesPersonList","Params","useParams","location","useLocation","product","productId","availableQty","qty","price","totalprice","Salespersonname","targetstartDate","discount","Shipping","tax","grandTotal","setProduct","handleProductChangeProduct","list","console","log","amt","val","b","handleRemoveSelected","selectedList","selectedItem","ele","Product_MRP","indextotal","handleSelection","prevProductList","updatedProductList","updatedProduct","_id","startDate","localStorage","setItem","split","endDate","products","salesPersonId","mydata","getItem","Create_Sales_personList","then","res","SalesPerson","catch","err","ProductListView","Product","CreatePartyList","Party","userInfo","parse","addMoreProduct","removeMoreProduct","newFormValues","history","cursor","color","goBack","onSubmit","Allproduct","qtyAssign","totalPrice","payload","swal","Create_Targetsave","lg","required","removedItem","Ripple"],"mappings":"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","file":"static/js/151.b6a5edcd.chunk.js","sourcesContent":["\n'use strict'\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./multiselect-react-dropdown.cjs.production.min.js')\n} else {\n  module.exports = require('./multiselect-react-dropdown.cjs.development.js')\n}\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","// @ts-nocheck\nimport React, { useRef, useEffect } from \"react\";\nimport \"./styles.css\";\nimport CloseCircle from '../assets/svg/closeCircle.svg';\nimport CloseCircleDark from '../assets/svg/closeCircleDark.svg';\nimport CloseLine from '../assets/svg/closeLine.svg';\nimport CloseSquare from '../assets/svg/closeSquare.svg';\nimport DownArrow from '../assets/svg/downArrow.svg';\nimport {IMultiselectProps} from \"./interface\";\n\nconst closeIconTypes = {\n  circle: CloseCircleDark,\n  circle2: CloseCircle,\n  close: CloseSquare,\n  cancel: CloseLine\n};\n\nfunction useOutsideAlerter(ref, clickEvent) {\n  useEffect(() => {\n      function handleClickOutside(event) {\n          if (ref.current && !ref.current.contains(event.target)) {\n            clickEvent();\n          }\n      }\n\n      document.addEventListener(\"mousedown\", handleClickOutside);\n      return () => {\n          document.removeEventListener(\"mousedown\", handleClickOutside);\n      };\n  }, [ref]);\n}\n\n/**\n* Component that alerts if you click outside of it\n*/\nfunction OutsideAlerter(props) {\n  const wrapperRef = useRef(null);\n  useOutsideAlerter(wrapperRef, props.outsideClick);\n  return <div ref={wrapperRef}>{props.children}</div>;\n}\n\nexport class Multiselect extends React.Component<IMultiselectProps, any> {\n  static defaultProps: IMultiselectProps;\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: \"\",\n      options: props.options,\n      filteredOptions: props.options,\n      unfilteredOptions: props.options,\n      selectedValues: Object.assign([], props.selectedValues),\n      preSelectedValues: Object.assign([], props.selectedValues),\n      toggleOptionsList: false,\n      highlightOption: props.avoidHighlightFirstOption ? -1 : 0,\n\t\t\tshowCheckbox: props.showCheckbox,\n      keepSearchTerm: props.keepSearchTerm,\n      groupedObject: [],\n      closeIconType: closeIconTypes[props.closeIcon] || closeIconTypes['circle']\n    };\n    // @ts-ignore\n    this.optionTimeout = null;\n    // @ts-ignore\n\t\tthis.searchWrapper = React.createRef();\n    // @ts-ignore\n\t\tthis.searchBox = React.createRef();\n    this.onChange = this.onChange.bind(this);\n    this.onKeyPress = this.onKeyPress.bind(this);\n    this.onFocus = this.onFocus.bind(this);\n    this.onBlur = this.onBlur.bind(this);\n    this.renderMultiselectContainer = this.renderMultiselectContainer.bind(this);\n    this.renderSelectedList = this.renderSelectedList.bind(this);\n    this.onRemoveSelectedItem = this.onRemoveSelectedItem.bind(this);\n    this.toggelOptionList = this.toggelOptionList.bind(this);\n    this.onArrowKeyNavigation = this.onArrowKeyNavigation.bind(this);\n    this.onSelectItem = this.onSelectItem.bind(this);\n    this.filterOptionsByInput = this.filterOptionsByInput.bind(this);\n    this.removeSelectedValuesFromOptions = this.removeSelectedValuesFromOptions.bind(this);\n    this.isSelectedValue = this.isSelectedValue.bind(this);\n    this.fadeOutSelection = this.fadeOutSelection.bind(this);\n    this.isDisablePreSelectedValues = this.isDisablePreSelectedValues.bind(this);\n    this.renderGroupByOptions = this.renderGroupByOptions.bind(this);\n    this.renderNormalOption = this.renderNormalOption.bind(this);\n    this.listenerCallback = this.listenerCallback.bind(this);\n    this.resetSelectedValues = this.resetSelectedValues.bind(this);\n    this.getSelectedItems = this.getSelectedItems.bind(this);\n    this.getSelectedItemsCount = this.getSelectedItemsCount.bind(this);\n    this.hideOnClickOutside = this.hideOnClickOutside.bind(this);\n    this.onCloseOptionList = this.onCloseOptionList.bind(this);\n    this.isVisible = this.isVisible.bind(this);\n  }\n\n  initialSetValue() {\n    const { showCheckbox, groupBy, singleSelect } = this.props;\n\t\tconst { options } = this.state;\n    if (!showCheckbox && !singleSelect) {\n      this.removeSelectedValuesFromOptions(false);\n\t\t}\n    // if (singleSelect) {\n    //   this.hideOnClickOutside();\n    // }\n\t\tif (groupBy) {\n\t\t\tthis.groupByOptions(options);\n\t\t}\n  }\n\n  resetSelectedValues() {\n    const { unfilteredOptions } = this.state;\n    return new Promise((resolve) => {\n      this.setState({\n        selectedValues: [],\n        preSelectedValues: [],\n        options: unfilteredOptions,\n        filteredOptions: unfilteredOptions\n      }, () => {\n        // @ts-ignore\n        resolve();\n        this.initialSetValue();\n      });\n    });\n  }\n\n  getSelectedItems() {\n    return this.state.selectedValues;\n  }\n\n  getSelectedItemsCount() {\n    return this.state.selectedValues.length;\n  }\n\n  componentDidMount() {\n\t\tthis.initialSetValue();\n    // @ts-ignore\n    this.searchWrapper.current.addEventListener(\"click\", this.listenerCallback);\n  }\n\n  componentDidUpdate(prevProps) {\n    const { options, selectedValues } = this.props;\n    const { options: prevOptions, selectedValues: prevSelectedvalues } = prevProps;\n    if (JSON.stringify(prevOptions) !== JSON.stringify(options)) {\n      this.setState({ options, filteredOptions: options, unfilteredOptions: options }, this.initialSetValue);\n    }\n    if (JSON.stringify(prevSelectedvalues) !== JSON.stringify(selectedValues)) {\n      this.setState({ selectedValues: Object.assign([], selectedValues), preSelectedValues: Object.assign([], selectedValues) }, this.initialSetValue);\n    }\n  }\n\n  listenerCallback() {\n    // @ts-ignore\n    this.searchBox.current.focus();\n  }\n\n  componentWillUnmount() {\n    // @ts-ignore\n    if (this.optionTimeout) {\n      // @ts-ignore\n      clearTimeout(this.optionTimeout);\n    }\n    // @ts-ignore\n    this.searchWrapper.current.removeEventListener('click', this.listenerCallback);\n  }\n\n  // Skipcheck flag - value will be true when the func called from on deselect anything.\n  removeSelectedValuesFromOptions(skipCheck) {\n    const { isObject, displayValue, groupBy } = this.props;\n    const { selectedValues = [], unfilteredOptions, options } = this.state;\n    if (!skipCheck && groupBy) {\n      this.groupByOptions(options);\n    }\n    if (!selectedValues.length && !skipCheck) {\n      return;\n    }\n    if (isObject) {\n      let optionList = unfilteredOptions.filter(item => {\n        return selectedValues.findIndex(\n          v => v[displayValue] === item[displayValue]\n        ) === -1\n          ? true\n          : false;\n      });\n      if (groupBy) {\n        this.groupByOptions(optionList);\n      }\n      this.setState(\n        { options: optionList, filteredOptions: optionList },\n        this.filterOptionsByInput\n      );\n      return;\n    }\n    let optionList = unfilteredOptions.filter(\n      item => selectedValues.indexOf(item) === -1\n    );\n\n    this.setState(\n      { options: optionList, filteredOptions: optionList },\n      this.filterOptionsByInput\n    );\n  }\n\n  groupByOptions(options) {\n    const { groupBy } = this.props;\n    const groupedObject = options.reduce(function(r, a) {\n      const key = a[groupBy] || \"Others\";\n      r[key] = r[key] || [];\n      r[key].push(a);\n      return r;\n    }, Object.create({}));\n\n    this.setState({ groupedObject });\n  }\n\n  onChange(event) {\n    const { onSearch } = this.props;\n    this.setState(\n      { inputValue: event.target.value },\n      this.filterOptionsByInput\n    );\n    if (onSearch) {\n      onSearch(event.target.value);\n    }\n  }\n\n  onKeyPress(event) {\n    const { onKeyPressFn } = this.props;\n    if (onKeyPressFn) {\n        onKeyPressFn(event, event.target.value);\n    }\n  }\n\n  filterOptionsByInput() {\n    let { options, filteredOptions, inputValue } = this.state;\n    const { isObject, displayValue } = this.props;\n    if (isObject) {\n      options = filteredOptions.filter(i => this.matchValues(i[displayValue], inputValue))\n    } else {\n      options = filteredOptions.filter(i => this.matchValues(i, inputValue));\n    }\n    this.groupByOptions(options);\n    this.setState({ options });\n  }\n\n  matchValues(value, search) {\n    if (this.props.caseSensitiveSearch) {\n      return value.indexOf(search) > -1;\n    }\n    if (value.toLowerCase) {\n      return value.toLowerCase().indexOf(search.toLowerCase()) > -1;\n    }\n    return value.toString().indexOf(search) > -1;\n  }\n\n  onArrowKeyNavigation(e) {\n    const {\n      options,\n      highlightOption,\n      toggleOptionsList,\n      inputValue,\n      selectedValues\n    } = this.state;\n    const { disablePreSelectedValues } = this.props;\n    if (e.keyCode === 8 && !inputValue && !disablePreSelectedValues && selectedValues.length) {\n      this.onRemoveSelectedItem(selectedValues.length - 1);\n    }\n    if (!options.length) {\n      return;\n    }\n    if (e.keyCode === 38) {\n      if (highlightOption > 0) {\n        this.setState(previousState => ({\n          highlightOption: previousState.highlightOption - 1\n        }));\n      } else {\n        this.setState({ highlightOption: options.length - 1 });\n      }\n    } else if (e.keyCode === 40) {\n      if (highlightOption < options.length - 1) {\n        this.setState(previousState => ({\n          highlightOption: previousState.highlightOption + 1\n        }));\n      } else {\n        this.setState({ highlightOption: 0 });\n      }\n    } else if (e.key === \"Enter\" && options.length && toggleOptionsList) {\n      if (highlightOption === -1) {\n        return;\n      }\n      this.onSelectItem(options[highlightOption]);\n    }\n    // TODO: Instead of scrollIntoView need to find better soln for scroll the dropwdown container.\n    // setTimeout(() => {\n    //   const element = document.querySelector(\"ul.optionContainer .highlight\");\n    //   if (element) {\n    //     element.scrollIntoView();\n    //   }\n    // });\n  }\n\n  onRemoveSelectedItem(item) {\n\t\tlet { selectedValues, index = 0 } = this.state;\n\t\tconst { onRemove, showCheckbox, displayValue, isObject } = this.props;\n    if (isObject) {\n      index = selectedValues.findIndex(\n        i => i[displayValue] === item[displayValue]\n      );\n    } else {\n      index = selectedValues.indexOf(item);\n    }\n\t\tselectedValues.splice(index, 1);\n\t\tonRemove(selectedValues, item);\n    this.setState({ selectedValues }, () => {\n      if (!showCheckbox) {\n\t\t\t\tthis.removeSelectedValuesFromOptions(true);\n      }\n    });\n    if (!this.props.closeOnSelect) {\n      // @ts-ignore\n      this.searchBox.current.focus();\n    }\n  }\n\n  onSelectItem(item) {\n    const { selectedValues } = this.state;\n    const { selectionLimit, onSelect, singleSelect, showCheckbox } = this.props;\n    if (!this.state.keepSearchTerm){\n      this.setState({\n        inputValue: ''\n      });\n    }\n    if (singleSelect) {\n      this.onSingleSelect(item);\n      onSelect([item], item);\n      return;\n    }\n    if (this.isSelectedValue(item)) {\n      this.onRemoveSelectedItem(item);\n      return;\n    }\n    if (selectionLimit == selectedValues.length) {\n      return;\n    }\n\t\tselectedValues.push(item);\n\t\tonSelect(selectedValues, item);\n    this.setState({ selectedValues }, () => {\n      if (!showCheckbox) {\n\t\t\t\tthis.removeSelectedValuesFromOptions(true);\n      } else {\n        this.filterOptionsByInput();\n      }\n    });\n    if (!this.props.closeOnSelect) {\n      // @ts-ignore\n      this.searchBox.current.focus();\n    }\n  }\n\n  onSingleSelect(item) {\n    this.setState({ selectedValues: [item], toggleOptionsList: false });\n  }\n\n  isSelectedValue(item) {\n    const { isObject, displayValue } = this.props;\n    const { selectedValues } = this.state;\n    if (isObject) {\n      return (\n        selectedValues.filter(i => i[displayValue] === item[displayValue])\n          .length > 0\n      );\n    }\n    return selectedValues.filter(i => i === item).length > 0;\n  }\n\n  renderOptionList() {\n    const { groupBy, style, emptyRecordMsg, loading, loadingMessage = 'loading...' } = this.props;\n    const { options } = this.state;\n    if (loading) {\n      return (\n        <ul className={`optionContainer`} style={style['optionContainer']}>\n          {typeof loadingMessage === 'string' && <span style={style['loadingMessage']} className={`notFound`}>{loadingMessage}</span>}\n          {typeof loadingMessage !== 'string' && loadingMessage}\n        </ul>\n      );\n    }\n    return (\n      <ul className={`optionContainer`} style={style['optionContainer']}>\n        {options.length === 0 && <span style={style['notFound']} className={`notFound`}>{emptyRecordMsg}</span>}\n        {!groupBy ? this.renderNormalOption() : this.renderGroupByOptions()}\n      </ul>\n    );\n  }\n\n  renderGroupByOptions() {\n    const { isObject = false, displayValue, showCheckbox, style, singleSelect } = this.props;\n    const { groupedObject } = this.state;\n    return Object.keys(groupedObject).map(obj => {\n\t\t\treturn (\n\t\t\t\t<React.Fragment key={obj}>\n\t\t\t\t\t<li className=\"groupHeading\" style={style['groupHeading']}>{obj}</li>\n\t\t\t\t\t{groupedObject[obj].map((option, i) => {\n            const isSelected = this.isSelectedValue(option);\n            return (\n              <li\n                key={`option${i}`}\n                style={style['option']}\n                className={`groupChildEle option ${isSelected ? 'selected' : ''} ${this.fadeOutSelection(option) ? 'disableSelection' : ''} ${this.isDisablePreSelectedValues(option) ? 'disableSelection' : ''}`}\n                onClick={() => this.onSelectItem(option)}\n              >\n                {showCheckbox && !singleSelect && (\n                    <input\n                      type=\"checkbox\"\n                      className={'checkbox'}\n                      readOnly\n                      checked={isSelected}\n                    />\n                )}\n                {this.props.optionValueDecorator(isObject ? option[displayValue] : (option || '').toString(), option)}\n              </li>\n            )}\n          )}\n\t\t\t\t</React.Fragment>\n\t\t\t)\n\t\t});\n  }\n\n  renderNormalOption() {\n    const { isObject = false, displayValue, showCheckbox, style, singleSelect } = this.props;\n    const { highlightOption } = this.state;\n    return this.state.options.map((option, i) => {\n        const isSelected = this.isSelectedValue(option);\n        return (\n          <li\n            key={`option${i}`}\n            style={style['option']}\n            className={`option ${isSelected ? 'selected' : ''} ${highlightOption === i ? `highlightOption highlight` : \"\"} ${this.fadeOutSelection(option) ? 'disableSelection' : ''} ${this.isDisablePreSelectedValues(option) ? 'disableSelection' : ''}`}\n            onClick={() => this.onSelectItem(option)}\n          >\n            {showCheckbox && !singleSelect && (\n              <input\n                type=\"checkbox\"\n                readOnly\n                className={`checkbox`}\n                checked={isSelected}\n              />\n            )}\n            {this.props.optionValueDecorator(isObject ? option[displayValue] : (option || '').toString(), option)}\n          </li>\n      )\n    });\n  }\n\n  renderSelectedList() {\n    const { isObject = false, displayValue, style, singleSelect, customCloseIcon } = this.props;\n    const { selectedValues, closeIconType } = this.state;\n    return selectedValues.map((value, index) => (\n      <span className={`chip  ${singleSelect && 'singleChip'} ${this.isDisablePreSelectedValues(value) && 'disableSelection'}`} key={index} style={style['chips']}>\n        {this.props.selectedValueDecorator(!isObject ? (value || '').toString() : value[displayValue], value)}\n        {!this.isDisablePreSelectedValues(value) && (!customCloseIcon ? <img\n          className=\"icon_cancel closeIcon\"\n          src={closeIconType}\n          onClick={() => this.onRemoveSelectedItem(value)}\n        /> : <i className=\"custom-close\" onClick={() => this.onRemoveSelectedItem(value)}>{customCloseIcon}</i>)}\n      </span>\n    ));\n  }\n\n  isDisablePreSelectedValues(value) {\n    const { isObject, disablePreSelectedValues, displayValue } = this.props;\n    const { preSelectedValues } = this.state;\n    if (!disablePreSelectedValues || !preSelectedValues.length) {\n      return false;\n    }\n    if (isObject) {\n      return (\n        preSelectedValues.filter(i => i[displayValue] === value[displayValue])\n          .length > 0\n      );\n    }\n    return preSelectedValues.filter(i => i === value).length > 0;\n  }\n\n  fadeOutSelection(item) {\n    const { selectionLimit, showCheckbox, singleSelect } = this.props;\n    if (singleSelect) {\n      return;\n    }\n    const { selectedValues } = this.state;\n    if (selectionLimit == -1) {\n      return false;\n    }\n    if (selectionLimit != selectedValues.length) {\n      return false;\n    }\n    if (selectionLimit == selectedValues.length) {\n      if (!showCheckbox) {\n        return true;\n      } else {\n        if (this.isSelectedValue(item)) {\n          return false;\n        }\n        return true;\n      }\n    }\n  }\n\n  toggelOptionList() {\n    this.setState({\n      toggleOptionsList: !this.state.toggleOptionsList,\n      highlightOption: this.props.avoidHighlightFirstOption ? -1 : 0\n    });\n  }\n\n  onCloseOptionList() {\n    this.setState({\n      toggleOptionsList: false,\n      highlightOption: this.props.avoidHighlightFirstOption ? -1 : 0,\n      inputValue: ''\n    });\n  }\n\n  onFocus(){\n    if (this.state.toggleOptionsList) {\n      // @ts-ignore\n      clearTimeout(this.optionTimeout);\n    } else {\n      this.toggelOptionList();\n    }\n  }\n\n  onBlur(){\n    this.setState({ inputValue: '' }, this.filterOptionsByInput);\n    // @ts-ignore\n    this.optionTimeout = setTimeout(this.onCloseOptionList, 250);\n  }\n\n  isVisible(elem) {\n    return !!elem && !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length )\n  }\n\n  hideOnClickOutside() {\n    const element = document.getElementsByClassName('multiselect-container')[0];\n    const outsideClickListener = event => {\n        if (element && !element.contains(event.target) && this.isVisible(element)) {\n          this.toggelOptionList();\n        }\n    }\n    document.addEventListener('click', outsideClickListener)\n  }\n\n  renderMultiselectContainer() {\n    const { inputValue, toggleOptionsList, selectedValues } = this.state;\n    const { placeholder, style, singleSelect, id, name, hidePlaceholder, disable, showArrow, className, customArrow, hideSelectedList } = this.props;\n    return (\n      <div className={`multiselect-container multiSelectContainer ${disable ? `disable_ms` : ''} ${className || ''}`} id={id || 'multiselectContainerReact'} style={style['multiselectContainer']}>\n        <div className={`search-wrapper searchWrapper ${singleSelect ? 'singleSelect' : ''}`}\n          ref={this.searchWrapper} style={style['searchBox']}\n          onClick={singleSelect ? this.toggelOptionList : () => {}}\n        >\n          {!hideSelectedList && this.renderSelectedList()}\n          <input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tref={this.searchBox}\n            className={`searchBox ${singleSelect && selectedValues.length ? 'display-none' : ''}`}\n            id={`${id || 'search'}_input`}\n\t          name={`${name || 'search_name'}_input`}\n            onChange={this.onChange}\n            onKeyPress={this.onKeyPress}\n            value={inputValue}\n            onFocus={this.onFocus}\n            onBlur={this.onBlur}\n            placeholder={((singleSelect && selectedValues.length) || (hidePlaceholder && selectedValues.length)) ? '' : placeholder}\n            onKeyDown={this.onArrowKeyNavigation}\n            style={style['inputField']}\n            autoComplete=\"off\"\n            disabled={singleSelect || disable}\n          />\n          {(singleSelect || showArrow) && (\n            <>\n              {customArrow ? <span className=\"icon_down_dir\">{customArrow}</span> : <img src={DownArrow} className={`icon_cancel icon_down_dir`} />}\n            </>\n          )}\n        </div>\n        <div\n          className={`optionListContainer ${\n            toggleOptionsList ? 'displayBlock' : 'displayNone'\n          }`}\n          onMouseDown={(e) => {\n            e.preventDefault();\n          }}\n        >\n          {this.renderOptionList()}\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <OutsideAlerter outsideClick={this.onCloseOptionList}>\n        {this.renderMultiselectContainer()}\n      </OutsideAlerter>\n    );\n  }\n}\n\nMultiselect.defaultProps = {\n  options: [],\n  disablePreSelectedValues: false,\n  selectedValues: [],\n  isObject: true,\n  displayValue: \"model\",\n  showCheckbox: false,\n  selectionLimit: -1,\n  placeholder: \"Select\",\n\tgroupBy: \"\",\n\tstyle: {},\n\temptyRecordMsg: \"No Options Available\",\n\tonSelect: () => {},\n  onRemove: () => {},\n  onKeyPressFn: () => {},\n  closeIcon: 'circle2',\n  singleSelect: false,\n  caseSensitiveSearch: false,\n  id: '',\n  name: '',\n  closeOnSelect: true,\n  avoidHighlightFirstOption: false,\n  hidePlaceholder: false,\n  showArrow: false,\n  keepSearchTerm: false,\n  customCloseIcon: '',\n  className: '',\n  customArrow: undefined,\n  selectedValueDecorator: v => v,\n  optionValueDecorator: v => v\n} as IMultiselectProps;\n","import React from \"react\"\r\nimport { Row, Col, Card, CardBody, CardHeader, CardTitle } from \"reactstrap\"\r\nimport Flatpickr from \"react-flatpickr\";\r\n\r\nclass Timepickers extends React.Component{\r\n  state ={\r\n    basic : new Date(),\r\n    timeLimit : new Date(),\r\n    preloaded : new Date()\r\n  }\r\n\r\n  render(){\r\n    let { basic, timeLimit } = this.state\r\n    return(\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Timepickers</CardTitle>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <Row>\r\n            <Col className=\"mb-3\" md=\"6\" sm=\"12\">\r\n              <h5 className=\"text-bold-500\">Basic 24hrs</h5>\r\n              <Flatpickr\r\n                className=\"form-control\"\r\n                value={basic}\r\n                options={{\r\n                  enableTime: true,\r\n                  noCalendar: true,\r\n                  dateFormat: \"H:i\",\r\n                }}\r\n                onChange={date => {\r\n                  this.setState({ basic : date });\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col className=\"mb-3\" md=\"6\" sm=\"12\">\r\n              <h5 className=\"text-bold-500\">Limit</h5>\r\n              <Flatpickr\r\n                className=\"form-control\"\r\n                value={timeLimit}\r\n                options={{\r\n                  enableTime: true,\r\n                  noCalendar: true,\r\n                  dateFormat: \"H:i\",\r\n                  minTime: \"16:00\",\r\n                  maxTime: \"22:30\"\r\n                }}\r\n                onChange={date => {\r\n                  this.setState({ timeLimit : date });\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col className=\"mb-3\" md=\"6\" sm=\"12\">\r\n              <h5 className=\"text-bold-500\">Preloaded</h5>\r\n              <Flatpickr\r\n                className=\"form-control\"\r\n                options={{\r\n                  enableTime: true,\r\n                  noCalendar: true,\r\n                  dateFormat: \"H:i\",\r\n                  defaultDate: \"13:45\"\r\n                }}\r\n                onChange={date => {\r\n                  this.setState({ preloaded : date });\r\n                }}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </CardBody>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Timepickers","import React from \"react\";\r\nimport { Row, Col, Card, CardBody, CardHeader, CardTitle } from \"reactstrap\";\r\nimport Flatpickr from \"react-flatpickr\";\r\n\r\nclass Datepickers extends React.Component {\r\n  state = {\r\n    basicPicker: new Date(),\r\n    dateTimePicker: new Date(),\r\n    humanFriendly: new Date(),\r\n    minMax: new Date(),\r\n    disabledRange: new Date(),\r\n    multipleDates: new Date(),\r\n    rangePicker: new Date(),\r\n    weekNum: new Date(),\r\n    inlinePicker: new Date(),\r\n  };\r\n\r\n  render() {\r\n    let {\r\n      basicPicker,\r\n      dateTimePicker,\r\n      humanFriendly,\r\n      minMax,\r\n      disabledRange,\r\n      multipleDates,\r\n      rangePicker,\r\n      weekNum,\r\n      inlinePicker,\r\n    } = this.state;\r\n\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Datepickers</CardTitle>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <Row>\r\n            <Col className=\"mb-3\" md=\"6\" sm=\"12\">\r\n              <h5 className=\"text-bold-500\">Basic</h5>\r\n              <Flatpickr\r\n                className=\"form-control\"\r\n                value={basicPicker}\r\n                onChange={(date) => {\r\n                  this.setState({ basicPicker: date });\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col className=\"mb-3\" md=\"6\" sm=\"12\">\r\n              <h5 className=\"text-bold-500\">Date & Time</h5>\r\n              <Flatpickr\r\n                options={{\r\n                  minDate: \"today\",\r\n                  altInput: true,\r\n                  // altFormat: \"j-m-Y H:i:S\",\r\n                  altFormat: \"m-j-Y H:i:S\",\r\n                }}\r\n                className=\"form-control\"\r\n                data-enable-time\r\n                value={dateTimePicker}\r\n                onChange={(date) => {\r\n                  this.setState({ dateTimePicker: date });\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col className=\"mb-3\" md=\"6\" sm=\"12\">\r\n              <h5 className=\"text-bold-500\">Human Friendly</h5>\r\n              <Flatpickr\r\n                className=\"form-control\"\r\n                value={humanFriendly}\r\n                options={{\r\n                  altInput: true,\r\n                  altFormat: \"F j, Y\",\r\n                  dateFormat: \"Y-m-d\",\r\n                }}\r\n                onChange={(date) => {\r\n                  this.setState({ humanFriendly: date });\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col className=\"mb-3\" md=\"6\" sm=\"12\">\r\n              <h5 className=\"text-bold-500\">Min & Max Dates</h5>\r\n              <Flatpickr\r\n                className=\"form-control\"\r\n                value={minMax}\r\n                options={{ minDate: \"today\", maxDate: new Date().fp_incr(14) }}\r\n                onChange={(date) => {\r\n                  this.setState({ minMax: date });\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col className=\"mb-3\" md=\"6\" sm=\"12\">\r\n              <h5 className=\"text-bold-500\">Disabled Range</h5>\r\n              <Flatpickr\r\n                className=\"form-control\"\r\n                value={disabledRange}\r\n                options={{\r\n                  dateFormat: \"Y-m-d\",\r\n                  disable: [\r\n                    {\r\n                      from: \"2020-02-01\",\r\n                      to: \"2020-02-10\",\r\n                    },\r\n                    {\r\n                      from: \"2020-02-20\",\r\n                      to: \"2020-02-25\",\r\n                    },\r\n                  ],\r\n                }}\r\n                onChange={(date) => {\r\n                  this.setState({ disabledRange: date });\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col className=\"mb-3\" md=\"6\" sm=\"12\">\r\n              <h5 className=\"text-bold-500\">Multiple Dates</h5>\r\n              <Flatpickr\r\n                className=\"form-control\"\r\n                value={multipleDates}\r\n                options={{ mode: \"multiple\" }}\r\n                onChange={(date) => {\r\n                  this.setState({ multipleDates: date });\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col className=\"mb-3\" md=\"6\" sm=\"12\">\r\n              <h5 className=\"text-bold-500\">Range</h5>\r\n              <Flatpickr\r\n                value={rangePicker}\r\n                className=\"form-control\"\r\n                options={{ mode: \"range\" }}\r\n              />\r\n            </Col>\r\n            <Col className=\"mb-3\" md=\"6\" sm=\"12\">\r\n              <h5 className=\"text-bold-500\">Preloaded Range</h5>\r\n              <Flatpickr\r\n                className=\"form-control\"\r\n                options={{\r\n                  mode: \"range\",\r\n                  defaultDate: [\"2020-02-01\", \"2020-02-15\"],\r\n                }}\r\n                onChange={(date) => {\r\n                  this.setState({ preloadRange: date });\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col className=\"mb-md-0 mb-3\" md=\"6\" sm=\"12\">\r\n              <h5 className=\"text-bold-500\">Week Numbers</h5>\r\n              <Flatpickr\r\n                className=\"form-control\"\r\n                value={weekNum}\r\n                options={{ weekNumbers: true }}\r\n                onChange={(date) => {\r\n                  this.setState({ weekNum: date });\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col md=\"6\" sm=\"12\">\r\n              <h5 className=\"text-bold-500\">Inline</h5>\r\n              <Flatpickr\r\n                className=\"form-control\"\r\n                value={inlinePicker}\r\n                options={{ inline: true }}\r\n                onChange={(date) => {\r\n                  this.setState({ inlinePicker: date });\r\n                }}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </CardBody>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Datepickers;\r\n","import React from \"react\";\r\nimport { Row, Col } from \"reactstrap\";\r\nimport Breadcrumbs from \"../../../../components/@vuexy/breadCrumbs/BreadCrumb\";\r\nimport Datepickers from \"./Datepickers\";\r\nimport Timepickers from \"./Timepicker\";\r\n\r\nimport \"flatpickr/dist/themes/light.css\";\r\nimport \"../../../../assets/scss/plugins/forms/flatpickr/flatpickr.scss\";\r\n\r\nclass Pickers extends React.Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Breadcrumbs\r\n          breadCrumbTitle=\"Date & Time Picker\"\r\n          breadCrumbParent=\"Form Elements\"\r\n          breadCrumbActive=\"Date & Time Picker\"\r\n        />\r\n        <Row>\r\n          <Col sm=\"12\">\r\n            <Datepickers />\r\n          </Col>\r\n          <Col sm=\"12\">\r\n            <Timepickers />\r\n          </Col>\r\n        </Row>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nexport default Pickers;\r\n// import { useState, useRef } from \"react\";\r\n// import Tesseract from \"tesseract.js\";\r\n\r\n// function anuj() {\r\n//   const [imagePath, setImagePath] = useState(\"\");\r\n//   const [text, setText] = useState(\"aa\");\r\n\r\n//   const handleChange = (event) => {\r\n//     setImage(URL.createObjectURL(event.target.files[0]));\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <main className=\"App-main\">\r\n//         <h3>Actual image uploaded</h3>\r\n//         {/* <img src={imagePath} className=\"App-logo\" alt=\"logo\" /> */}\r\n\r\n//         <h3>Extracted text</h3>\r\n//         <div className=\"text-box\">\r\n//           <p> {text} </p>\r\n//         </div>\r\n//         <input type=\"file\" onChange={handleChange} />\r\n//       </main>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default anuj;\r\n","// import React, { useEffect, useState, useContext } from \"react\";\r\n// import xmlJs from \"xml-js\";\r\n// import Multiselect from \"multiselect-react-dropdown\";\r\n// import {\r\n//   Card,\r\n//   CardBody,\r\n//   Col,\r\n//   Form,\r\n//   Row,\r\n//   Input,\r\n//   Label,\r\n//   Button,\r\n//   FormGroup,\r\n//   CustomInput,\r\n//   Badge,\r\n// } from \"reactstrap\";\r\n// import { history } from \"../../../../history\";\r\n// import PhoneInput from \"react-phone-input-2\";\r\n// import \"react-phone-input-2/lib/style.css\";\r\n// import { Country, State, City } from \"country-state-city\";\r\n// import Select from \"react-select\";\r\n// import moment from \"moment-timezone\";\r\n// import { Route } from \"react-router-dom\";\r\n\r\n// import swal from \"sweetalert\";\r\n// import \"../../../../../src/layouts/assets/scss/pages/users.scss\";\r\n\r\n// import {\r\n//   CreateAccountSave,\r\n//   CreateAccountView,\r\n//   CreateTargetXmlView,\r\n// } from \"../../../../ApiEndPoint/ApiCalling\";\r\n// import { BiEnvelope } from \"react-icons/bi\";\r\n// import { FcPhoneAndroid } from \"react-icons/fc\";\r\n// import { BsWhatsapp } from \"react-icons/bs\";\r\n// import \"../../../../assets/scss/pages/users.scss\";\r\n// import UserContext from \"../../../../context/Context\";\r\n// import { CloudLightning } from \"react-feather\";\r\n// import { FaPlus } from \"react-icons/fa\";\r\n\r\n// const CreateTarget = () => {\r\n//   const [CreatAccountView, setCreatAccountView] = useState([]);\r\n//   const [Countries, setCountry] = useState({});\r\n//   const [States, setState] = useState({});\r\n//   const [Cities, setCities] = useState({});\r\n//   const [formData, setFormData] = useState({});\r\n//   const [dropdownValue, setdropdownValue] = useState({});\r\n//   const [index, setindex] = useState(\"\");\r\n//   const [error, setError] = useState(\"\");\r\n//   const [permissions, setpermissions] = useState({});\r\n\r\n//   const Context = useContext(UserContext);\r\n\r\n//   const handleInputChange = (e, type, i) => {\r\n//     const { name, value, checked } = e.target;\r\n//     setindex(i);\r\n//     if (type == \"checkbox\") {\r\n//       if (checked) {\r\n//         setFormData({\r\n//           ...formData,\r\n//           [name]: checked,\r\n//         });\r\n//       } else {\r\n//         setFormData({\r\n//           ...formData,\r\n//           [name]: checked,\r\n//         });\r\n//       }\r\n//     } else {\r\n//       if (type == \"number\") {\r\n//         if (/^\\d{0,10}$/.test(value)) {\r\n//           setFormData({\r\n//             ...formData,\r\n//             [name]: value,\r\n//           });\r\n//           setError(\"\");\r\n//         } else {\r\n//           setError(\r\n//             \"Please enter a valid number with a maximum length of 10 digits\"\r\n//           );\r\n//         }\r\n//       } else {\r\n//         if (value.length <= 10) {\r\n//           setFormData({\r\n//             ...formData,\r\n//             [name]: value,\r\n//           });\r\n//           // console.log(value);\r\n//           setError(\"\");\r\n//         } else {\r\n//           setFormData({\r\n//             ...formData,\r\n//             [name]: value,\r\n//           });\r\n//           // setError(\"Input length exceeds the maximum of 10 characters\");\r\n//         }\r\n//       }\r\n//     }\r\n//   };\r\n//   useEffect(() => {\r\n//     console.log(formData);\r\n//   }, [formData]);\r\n//   useEffect(() => {\r\n//     CreateTargetXmlView()\r\n//       .then((res) => {\r\n//         console.log(res);\r\n//       })\r\n//       .catch((err) => {\r\n//         console.log(err);\r\n//       });\r\n//     CreateAccountView()\r\n//       .then((res) => {\r\n//         const jsonData = xmlJs.xml2json(res.data, { compact: true, spaces: 2 });\r\n//         // console.log(JSON.parse(jsonData)?.CreateUser?.input);\r\n\r\n//         setCreatAccountView(JSON.parse(jsonData)?.CreateUser?.input);\r\n\r\n//         setdropdownValue(JSON.parse(jsonData));\r\n//       })\r\n//       .catch((err) => {\r\n//         console.log(err);\r\n//       });\r\n//   }, []);\r\n\r\n//   const submitHandler = (e) => {\r\n//     e.preventDefault();\r\n//     console.log(formData);\r\n//     if (error) {\r\n//       swal(\"Error occured while Entering Details\");\r\n//     } else {\r\n//       CreateAccountSave(formData)\r\n//         .then((res) => {\r\n//           setFormData({});\r\n//           if (res.status) {\r\n//             window.location.reload();\r\n//             swal(\"User Created Successfully\");\r\n//           }\r\n//         })\r\n//         .catch((err) => {\r\n//           console.log(err);\r\n//         });\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <div>\r\n//         <Card>\r\n//           <Row className=\"m-2\">\r\n//             <Col>\r\n//               <h1 className=\"float-left\">Create Target</h1>\r\n//             </Col>\r\n//             <Col>\r\n//               <div className=\"float-right\">\r\n//                 <Route\r\n//                   render={({ history }) => (\r\n//                     <Button\r\n//                       style={{ cursor: \"pointer\" }}\r\n//                       className=\"float-right mr-1\"\r\n//                       color=\"primary\"\r\n//                       onClick={() =>\r\n//                         history.push(\"/app/SoftNumen/TargetCreationList\")\r\n//                       }\r\n//                     >\r\n//                       {\" \"}\r\n//                       Back\r\n//                       {/* <FaPlus size={15} /> Create User */}\r\n//                     </Button>\r\n//                   )}\r\n//                 />\r\n//               </div>\r\n//             </Col>\r\n//           </Row>\r\n//           {/* <hr /> */}\r\n\r\n//           <CardBody>\r\n//             <Form className=\"m-1\" onSubmit={submitHandler}>\r\n//               <Row className=\"mb-2\">\r\n//                 {/* <Col lg=\"6\" md=\"6\">\r\n//                   <FormGroup>\r\n//                     <Label>\r\n//                       {\r\n//                         dropdownValue.CreateAccount?.MyDropdown?.dropdown?.label\r\n//                           ?._text\r\n//                       }\r\n//                     </Label>\r\n//                     <CustomInput\r\n//                       required\r\n//                       type=\"select\"\r\n//                       name={\r\n//                         dropdownValue.CreateAccount?.MyDropdown?.dropdown?.name\r\n//                           ?._text\r\n//                       }\r\n//                       value={\r\n//                         formData[\r\n//                           dropdownValue.CreateAccount?.MyDropdown?.dropdown\r\n//                             ?.name?._text\r\n//                         ]\r\n//                       }\r\n//                       onChange={handleInputChange}\r\n//                     >\r\n//                       <option value=\"\">--Select Role--</option>\r\n//                       {dropdownValue?.CreateAccount?.MyDropdown?.dropdown?.option.map(\r\n//                         (option, index) => (\r\n//                           <option\r\n//                             key={index}\r\n//                             value={option?._attributes?.value}\r\n//                           >\r\n//                             {option?._attributes?.value}\r\n//                           </option>\r\n//                         )\r\n//                       )}\r\n//                     </CustomInput>\r\n//                   </FormGroup>\r\n//                 </Col> */}\r\n\r\n//                 {CreatAccountView &&\r\n//                   CreatAccountView?.map((ele, i) => {\r\n//                     {\r\n//                       /* console.log(Context?.UserInformatio?.dateFormat); */\r\n//                     }\r\n//                     // console.log(Countries);\r\n//                     // console.log(States);\r\n//                     const convertedTime = moment(\"2022-08-05T12:00:00\")\r\n//                       .tz(\"America/New_York\")\r\n//                       .format(\"D MMM, YYYY HH:mm\");\r\n\r\n//                     if (!!ele?.phoneinput) {\r\n//                       return (\r\n//                         <>\r\n//                           <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n//                             <FormGroup>\r\n//                               <Label>{ele?.label?._text}</Label>\r\n//                               <PhoneInput\r\n//                                 inputClass=\"myphoneinput\"\r\n//                                 country={\"us\"}\r\n//                                 onKeyDown={(e) => {\r\n//                                   if (\r\n//                                     ele?.type?._attributes?.type == \"number\"\r\n//                                   ) {\r\n//                                     [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n//                                       e.preventDefault();\r\n//                                   }\r\n//                                 }}\r\n//                                 countryCodeEditable={false}\r\n//                                 name={ele?.name?._text}\r\n//                                 value={formData[ele?.name?._text]}\r\n//                                 onChange={(phone) => {\r\n//                                   setFormData({\r\n//                                     ...formData,\r\n//                                     [ele?.name?._text]: phone,\r\n//                                   });\r\n//                                 }}\r\n//                               />\r\n//                               {index === i ? (\r\n//                                 <>\r\n//                                   {error && (\r\n//                                     <span style={{ color: \"red\" }}>\r\n//                                       {error}\r\n//                                     </span>\r\n//                                   )}\r\n//                                 </>\r\n//                               ) : (\r\n//                                 <></>\r\n//                               )}\r\n//                             </FormGroup>\r\n//                           </Col>\r\n//                         </>\r\n//                       );\r\n//                     } else if (!!ele?.library) {\r\n//                       if (ele?.label._text?.includes(\"ountry\")) {\r\n//                         console.log(ele);\r\n//                         return (\r\n//                           <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n//                             <FormGroup>\r\n//                               <Label>{ele?.label?._text}</Label>\r\n//                               <Select\r\n//                                 inputClass=\"countryclass\"\r\n//                                 className=\"countryclassnw\"\r\n//                                 options={Country.getAllCountries()}\r\n//                                 getOptionLabel={(options) => {\r\n//                                   return options[\"name\"];\r\n//                                 }}\r\n//                                 getOptionValue={(options) => {\r\n//                                   return options[\"name\"];\r\n//                                 }}\r\n//                                 value={Countries}\r\n//                                 onChange={(country) => {\r\n//                                   setCountry(country);\r\n//                                   setFormData({\r\n//                                     ...formData,\r\n//                                     [\"Country\"]: country?.name,\r\n//                                   });\r\n//                                 }}\r\n//                               />\r\n//                               {index === i ? (\r\n//                                 <>\r\n//                                   {error && (\r\n//                                     <span style={{ color: \"red\" }}>\r\n//                                       {error}\r\n//                                     </span>\r\n//                                   )}\r\n//                                 </>\r\n//                               ) : (\r\n//                                 <></>\r\n//                               )}\r\n//                             </FormGroup>\r\n//                           </Col>\r\n//                         );\r\n//                       } else if (ele?.label._text?.includes(\"tate\")) {\r\n//                         return (\r\n//                           <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n//                             <FormGroup>\r\n//                               <Label>{ele?.label?._text}</Label>\r\n//                               <Select\r\n//                                 options={State?.getStatesOfCountry(\r\n//                                   Countries?.isoCode\r\n//                                 )}\r\n//                                 getOptionLabel={(options) => {\r\n//                                   return options[\"name\"];\r\n//                                 }}\r\n//                                 getOptionValue={(options) => {\r\n//                                   return options[\"name\"];\r\n//                                 }}\r\n//                                 value={States}\r\n//                                 onChange={(State) => {\r\n//                                   setState(State);\r\n//                                   setFormData({\r\n//                                     ...formData,\r\n//                                     [\"State\"]: State?.name,\r\n//                                   });\r\n//                                 }}\r\n//                               />\r\n//                               {index === i ? (\r\n//                                 <>\r\n//                                   {error && (\r\n//                                     <span style={{ color: \"red\" }}>\r\n//                                       {error}\r\n//                                     </span>\r\n//                                   )}\r\n//                                 </>\r\n//                               ) : (\r\n//                                 <></>\r\n//                               )}\r\n//                             </FormGroup>\r\n//                           </Col>\r\n//                         );\r\n//                       } else if (ele?.label._text?.includes(\"ity\")) {\r\n//                         return (\r\n//                           <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n//                             <FormGroup>\r\n//                               <Label>{ele?.label?._text}</Label>\r\n//                               <Select\r\n//                                 options={City?.getCitiesOfState(\r\n//                                   States?.countryCode,\r\n//                                   States?.isoCode\r\n//                                 )}\r\n//                                 getOptionLabel={(options) => {\r\n//                                   return options[\"name\"];\r\n//                                 }}\r\n//                                 getOptionValue={(options) => {\r\n//                                   return options[\"name\"];\r\n//                                 }}\r\n//                                 value={Cities}\r\n//                                 onChange={(City) => {\r\n//                                   setCities(City);\r\n//                                   setFormData({\r\n//                                     ...formData,\r\n//                                     [\"City\"]: City?.name,\r\n//                                   });\r\n//                                 }}\r\n//                               />\r\n//                               {index === i ? (\r\n//                                 <>\r\n//                                   {error && (\r\n//                                     <span style={{ color: \"red\" }}>\r\n//                                       {error}\r\n//                                     </span>\r\n//                                   )}\r\n//                                 </>\r\n//                               ) : (\r\n//                                 <></>\r\n//                               )}\r\n//                             </FormGroup>\r\n//                           </Col>\r\n//                         );\r\n//                       } else {\r\n//                         return (\r\n//                           <>\r\n//                             {ele?.type?._attributes?.type == \"date\" ? (\r\n//                               <>\r\n//                                 <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n//                                   <FormGroup key={i}>\r\n//                                     <Label>{ele?.label?._text}</Label>\r\n\r\n//                                     <Input\r\n//                                       onKeyDown={(e) => {\r\n//                                         if (\r\n//                                           ele?.type?._attributes?.type ==\r\n//                                           \"number\"\r\n//                                         ) {\r\n//                                           [\"e\", \"E\", \"+\", \"-\"].includes(\r\n//                                             e.key\r\n//                                           ) && e.preventDefault();\r\n//                                         }\r\n//                                       }}\r\n//                                       type={ele?.type?._attributes?.type}\r\n//                                       placeholder={ele?.placeholder?._text}\r\n//                                       name={ele?.name?._text}\r\n//                                       dateFormat={\r\n//                                         Context?.UserInformatio?.dateFormat\r\n//                                       }\r\n//                                       value={\r\n//                                         moment(formData[ele?.name?._text])\r\n//                                           .tz(Context?.UserInformatio?.timeZone)\r\n//                                           .format(\r\n//                                             Context?.UserInformatio?.dateFormat\r\n//                                           )\r\n//                                         // formData[ele?.name?._text]\r\n//                                       }\r\n//                                       // value={formData[ele?.name?._text]}\r\n//                                       onChange={(e) =>\r\n//                                         handleInputChange(\r\n//                                           e,\r\n//                                           ele?.type?._attributes?.type,\r\n//                                           i\r\n//                                         )\r\n//                                       }\r\n//                                     />\r\n//                                     {index === i ? (\r\n//                                       <>\r\n//                                         {error && (\r\n//                                           <span style={{ color: \"red\" }}>\r\n//                                             {error}\r\n//                                           </span>\r\n//                                         )}\r\n//                                       </>\r\n//                                     ) : (\r\n//                                       <></>\r\n//                                     )}\r\n//                                   </FormGroup>\r\n//                                 </Col>\r\n//                               </>\r\n//                             ) : (\r\n//                               <>\r\n//                                 <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n//                                   <FormGroup key={i}>\r\n//                                     <Label>{ele?.label?._text}</Label>\r\n\r\n//                                     <Input\r\n//                                       onKeyDown={(e) => {\r\n//                                         if (\r\n//                                           ele?.type?._attributes?.type ==\r\n//                                           \"number\"\r\n//                                         ) {\r\n//                                           [\"e\", \"E\", \"+\", \"-\"].includes(\r\n//                                             e.key\r\n//                                           ) && e.preventDefault();\r\n//                                         }\r\n//                                       }}\r\n//                                       type={ele?.type?._attributes?.type}\r\n//                                       placeholder={ele?.placeholder?._text}\r\n//                                       name={ele?.name?._text}\r\n//                                       value={formData[ele?.name?._text]}\r\n//                                       onChange={(e) =>\r\n//                                         handleInputChange(\r\n//                                           e,\r\n//                                           ele?.type?._attributes?.type,\r\n//                                           i\r\n//                                         )\r\n//                                       }\r\n//                                     />\r\n//                                     {index === i ? (\r\n//                                       <>\r\n//                                         {error && (\r\n//                                           <span style={{ color: \"red\" }}>\r\n//                                             {error}\r\n//                                           </span>\r\n//                                         )}\r\n//                                       </>\r\n//                                     ) : (\r\n//                                       <></>\r\n//                                     )}\r\n//                                   </FormGroup>\r\n//                                 </Col>\r\n//                               </>\r\n//                             )}\r\n//                           </>\r\n//                         );\r\n//                       }\r\n//                     } else {\r\n//                       return (\r\n//                         <>\r\n//                           {!!ele?.number ? (\r\n//                             <>\r\n//                               <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n//                                 <FormGroup key={i}>\r\n//                                   <Label>{ele?.label?._text}</Label>\r\n\r\n//                                   <Input\r\n//                                     onWheel={(e) => {\r\n//                                       e.preventDefault(); // Prevent the mouse wheel scroll event\r\n//                                     }}\r\n//                                     onKeyDown={(e) => {\r\n//                                       if (\r\n//                                         ele?.type?._attributes?.type == \"number\"\r\n//                                       ) {\r\n//                                         [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n//                                           e.preventDefault();\r\n//                                       }\r\n//                                     }}\r\n//                                     type={ele?.type?._attributes?.type}\r\n//                                     placeholder={ele?.placeholder?._text}\r\n//                                     name={ele?.name?._text}\r\n//                                     value={formData[ele?.name?._text]}\r\n//                                     onChange={(e) =>\r\n//                                       handleInputChange(\r\n//                                         e,\r\n//                                         ele?.type?._attributes?.type,\r\n//                                         i\r\n//                                       )\r\n//                                     }\r\n//                                   />\r\n//                                   {index === i ? (\r\n//                                     <>\r\n//                                       {error && (\r\n//                                         <span style={{ color: \"red\" }}>\r\n//                                           {error}\r\n//                                         </span>\r\n//                                       )}\r\n//                                     </>\r\n//                                   ) : (\r\n//                                     <></>\r\n//                                   )}\r\n//                                 </FormGroup>\r\n//                               </Col>\r\n//                             </>\r\n//                           ) : (\r\n//                             <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n//                               <FormGroup key={i}>\r\n//                                 <Label>{ele?.label?._text}</Label>\r\n\r\n//                                 <Input\r\n//                                   onKeyDown={(e) => {\r\n//                                     if (\r\n//                                       ele?.type?._attributes?.type == \"number\"\r\n//                                     ) {\r\n//                                       [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n//                                         e.preventDefault();\r\n//                                     }\r\n//                                   }}\r\n//                                   type={ele?.type?._attributes?.type}\r\n//                                   placeholder={ele?.placeholder?._text}\r\n//                                   name={ele?.name?._text}\r\n//                                   value={formData[ele?.name?._text]}\r\n//                                   onChange={(e) => {\r\n//                                     // const value = e.target.value;\r\n//                                     // // Use regular expression to allow only numbers\r\n//                                     // const numericValue = value.replace(\r\n//                                     //   /\\D/g,\r\n//                                     //   \"\"\r\n//                                     // );\r\n//                                     handleInputChange(\r\n//                                       e,\r\n//                                       ele?.type?._attributes?.type,\r\n//                                       i\r\n//                                     );\r\n//                                   }}\r\n//                                 />\r\n//                                 {index === i ? (\r\n//                                   <>\r\n//                                     {error && (\r\n//                                       <span style={{ color: \"red\" }}>\r\n//                                         {error}\r\n//                                       </span>\r\n//                                     )}\r\n//                                   </>\r\n//                                 ) : (\r\n//                                   <></>\r\n//                                 )}\r\n//                               </FormGroup>\r\n//                             </Col>\r\n//                           )}\r\n//                         </>\r\n//                       );\r\n//                     }\r\n//                   })}\r\n//               </Row>\r\n\r\n//               <hr />\r\n//               {/* <Row className=\"mt-2 \">\r\n//                 <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2\">\r\n//                   <Label className=\"\">\r\n//                     <h4>Status</h4>\r\n//                   </Label>\r\n//                   <div className=\"form-label-group mx-1\">\r\n//                     {CreatAccountView &&\r\n//                       CreatAccountView?.CreateAccount?.Radiobutton?.input?.map(\r\n//                         (ele, i) => {\r\n//                           return (\r\n//                             <FormGroup key={i}>\r\n//                               <Input\r\n//                                 key={i}\r\n//                                 style={{ marginRight: \"3px\" }}\r\n//                                 required\r\n//                                 type={ele?.type?._attributes?.type}\r\n//                                 name={ele?.name?._text}\r\n//                                 value={`${\r\n//                                   ele?.label?._text == \"Active\"\r\n//                                     ? \"Active\"\r\n//                                     : \"Deactive\"\r\n//                                 }`}\r\n//                                 onChange={handleInputChange}\r\n//                               />{\" \"}\r\n//                               <span\r\n//                                 className=\"mx-1 mt-1\"\r\n//                                 style={{ marginRight: \"20px\" }}\r\n//                               >\r\n//                                 {ele?.label?._text}\r\n//                               </span>\r\n//                             </FormGroup>\r\n//                           );\r\n//                         }\r\n//                       )}\r\n//                   </div>\r\n//                 </Col>\r\n//               </Row> */}\r\n//               <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2 mt-1\">\r\n//                 <Label className=\"mb-0\">Status</Label>\r\n//                 <div\r\n//                   className=\"form-label-group\"\r\n//                   onChange={(e) => {\r\n//                     setFormData({\r\n//                       ...formData,\r\n//                       [\"status\"]: e.target.value,\r\n//                     });\r\n//                   }}\r\n//                 >\r\n//                   <input\r\n//                     style={{ marginRight: \"3px\" }}\r\n//                     type=\"radio\"\r\n//                     name=\"status\"\r\n//                     value=\"Active\"\r\n//                   />\r\n//                   <span style={{ marginRight: \"20px\" }}>Active</span>\r\n\r\n//                   <input\r\n//                     style={{ marginRight: \"3px\" }}\r\n//                     type=\"radio\"\r\n//                     name=\"status\"\r\n//                     value=\"Deactive\"\r\n//                   />\r\n//                   <span style={{ marginRight: \"3px\" }}>Deactive</span>\r\n//                 </div>\r\n//               </Col>\r\n\r\n//               <Row>\r\n//                 <Button.Ripple\r\n//                   color=\"primary\"\r\n//                   type=\"submit\"\r\n//                   className=\"mr-1 mt-2 mx-2\"\r\n//                 >\r\n//                   Submit\r\n//                 </Button.Ripple>\r\n//               </Row>\r\n//             </Form>\r\n//           </CardBody>\r\n//         </Card>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n// export default CreateTarget;\r\nimport React, { useEffect, useState, useContext } from \"react\";\r\nimport xmlJs from \"xml-js\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Form,\r\n  Row,\r\n  Input,\r\n  Label,\r\n  Button,\r\n  FormGroup,\r\n  CustomInput,\r\n  ModalBody,\r\n  ModalHeader,\r\n  Modal,\r\n  InputGroup,\r\n} from \"reactstrap\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { BiEnvelope } from \"react-icons/bi\";\r\nimport { BsFillChatDotsFill, BsWhatsapp } from \"react-icons/bs\";\r\nimport { FaHistory } from \"react-icons/fa\";\r\nimport { FcPhoneAndroid } from \"react-icons/fc\";\r\nimport { AiOutlineSearch } from \"react-icons/ai\";\r\nimport Flatpickr from \"react-flatpickr\";\r\nimport { useParams, useLocation } from \"react-router-dom\";\r\n\r\nimport Multiselect from \"multiselect-react-dropdown\";\r\n\r\nimport { FiSend } from \"react-icons/fi\";\r\n\r\nimport \"../../../../assets/scss/pages/users.scss\";\r\nimport {\r\n  CreateOrder_ViewData,\r\n  CommentOrder,\r\n  CreateOrder_ID,\r\n  CommentProductWiki,\r\n  SaveOrder,\r\n  ProductListView,\r\n  CreatePartyList,\r\n  Create_Sales_personList,\r\n  Create_Targetsave,\r\n} from \"../../../../ApiEndPoint/ApiCalling\";\r\nimport \"../../../../assets/scss/pages/users.scss\";\r\nimport Timepickers from \"../../../forms/form-elements/datepicker/Timepicker\";\r\nimport Pickers from \"../../../forms/form-elements/datepicker/Pickers\";\r\nimport { Route } from \"react-router-dom\";\r\n\r\n// import Payment from \"./payment/Payment\";\r\n// import OrderedList from \"./OrderedList\";\r\n// import AuditHistory from \"./audithistory/AuditHistory\";\r\nlet GrandTotal = [];\r\nlet SelectedITems = [];\r\nlet IndividualIndex = [];\r\nconst EditTarget = (args) => {\r\n  const [formData, setFormData] = useState({});\r\n  const [Index, setIndex] = useState(\"\");\r\n  const [targetStartDate, settargetStartDate] = useState(\"\");\r\n  const [targetEndDate, settargetEndDate] = useState(\"\");\r\n  const [index, setindex] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [ProductList, setProductList] = useState([]);\r\n  const [PartyList, setPartyList] = useState([]);\r\n  const [Salesperson, setSalesperson] = useState(\"\");\r\n  const [grandTotalAmt, setGrandTotalAmt] = useState(0);\r\n  const [Editdata, setEditdata] = useState({});\r\n  const [UserInfo, setUserInfo] = useState({});\r\n  const [modal, setModal] = useState(false);\r\n  const [items, setItems] = useState(\"\");\r\n  const [audit, setAudit] = useState(false);\r\n  const [SalesPersonList, setSalesPersonList] = useState([]);\r\n  const Params = useParams();\r\n  const location = useLocation();\r\n  const toggle = (item) => {\r\n    setItems(item);\r\n    setModal(!modal);\r\n  };\r\n  const audittoggle = () => {\r\n    setAudit(!audit);\r\n    // setModal(!modal);\r\n  };\r\n  const handleopentoggle = (iteam) => {\r\n    toggle(iteam);\r\n  };\r\n  const handleHistory = () => {\r\n    audittoggle();\r\n  };\r\n  const [product, setProduct] = useState([\r\n    {\r\n      product: \"\", //\r\n      productId: \"\",\r\n      availableQty: \"\",\r\n      qty: 1, //\r\n      price: \"\", //\r\n      totalprice: \"\", //\r\n      Salespersonname: \"\",\r\n      targetstartDate: \"\",\r\n      targetEndDate: \"\",\r\n      discount: \"\",\r\n      Shipping: \"\",\r\n      tax: \"\",\r\n      grandTotal: \"\",\r\n    },\r\n  ]);\r\n\r\n  const handleProductChangeProduct = (e, index) => {\r\n    // product.price * product?.qty\r\n    setIndex(index);\r\n    const { name, value } = e.target;\r\n    const list = [...product];\r\n    list[index][name] = value;\r\n    console.log(GrandTotal);\r\n    let amt = 0;\r\n    if (list.length > 0) {\r\n      const x = list?.map((val) => {\r\n        console.log(val.qty * val.price);\r\n        GrandTotal[index] = val.qty * val.price;\r\n\r\n        list[index][\"totalprice\"] = val.qty * val.price;\r\n        return val.qty * val.price;\r\n      });\r\n      amt = x.reduce((a, b) => a + b);\r\n      console.log(\"GrandTotal\", amt);\r\n    }\r\n    // console.log(list)\r\n    setProduct(list);\r\n    setGrandTotalAmt(amt);\r\n    // setAmount(amt);\r\n  };\r\n\r\n  const handleRemoveSelected = (selectedList, selectedItem, index) => {\r\n    // console.log(selectedList);\r\n    // console.log(selectedItem); // removed item\r\n    // console.log(product);\r\n    // console.log(index);\r\n    // console.log(SelectedITems);\r\n    SelectedITems.splice(index, 1);\r\n    let myarr = product?.map((ele, i) => {\r\n      console.log(ele?.qty * selectedItem[i]?.Product_MRP);\r\n      let indextotal = ele?.qty * SelectedITems[i]?.Product_MRP;\r\n      GrandTotal[index] = indextotal;\r\n      return indextotal;\r\n    });\r\n\r\n    let amt = myarr.reduce((a, b) => a + b);\r\n    setGrandTotalAmt(amt);\r\n  };\r\n  const handleSelection = (selectedList, selectedItem, index) => {\r\n    SelectedITems.push(selectedItem);\r\n    setProduct((prevProductList) => {\r\n      const updatedProductList = [...prevProductList]; // Create a copy of the productList array\r\n      const updatedProduct = { ...updatedProductList[index] }; // Create a copy of the product at the specified index\r\n      updatedProduct.price = selectedItem?.Product_MRP; // Update the price of the copied product\r\n      updatedProduct.productId = selectedItem?._id;\r\n      updatedProductList[index] = updatedProduct; // Replace the product at the specified index with the updated one\r\n      let myarr = prevProductList?.map((ele, i) => {\r\n        console.log(ele?.qty * selectedItem[i]?.Product_MRP);\r\n        let indextotal = ele?.qty * SelectedITems[i]?.Product_MRP;\r\n        GrandTotal[index] = indextotal;\r\n        return indextotal;\r\n      });\r\n\r\n      let amt = myarr.reduce((a, b) => a + b);\r\n      setGrandTotalAmt(amt);\r\n      // updatedProduct.grandTotal = Quantity[index]*selectedItem.Product_MRP;\r\n      // setGrandTotalAmt\r\n      return updatedProductList; // Return the updated product list to set the state\r\n    });\r\n    product.map((value) => console.log(value.totalprice));\r\n    // onSelect1(selectedList, selectedItem, index);\r\n  };\r\n  const handleInputChange = (e, type, i) => {\r\n    const { name, value, checked } = e.target;\r\n    setindex(i);\r\n    if (type == \"checkbox\") {\r\n      if (checked) {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      } else {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      }\r\n    } else {\r\n      if (type == \"number\") {\r\n        if (/^\\d{0,10}$/.test(value)) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          setError(\"\");\r\n        } else {\r\n          setError(\r\n            \"Please enter a valid number with a maximum length of 10 digits\"\r\n          );\r\n        }\r\n      } else {\r\n        if (value.length <= 10) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          setError(\"\");\r\n        } else {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n  // handleInputChange;\r\n  useEffect(() => {\r\n    console.log(Params.id);\r\n    console.log(location?.state?.startDate);\r\n    if (location?.state) {\r\n      localStorage.setItem(\"EditoneProduct\", location?.state);\r\n      setEditdata(location?.state);\r\n      debugger;\r\n      settargetStartDate(location?.state?.startDate?.split(\"T\")[0]);\r\n      settargetEndDate(location?.state?.endDate?.split(\"T\")[0]);\r\n      setProduct(location?.state?.products);\r\n      setGrandTotalAmt(location?.state?.grandTotal);\r\n      console.log(location?.state?.salesPersonId._id);\r\n    } else {\r\n      let mydata = localStorage.getItem(\"EditoneProduct\");\r\n      setEditdata(mydata);\r\n      settargetStartDate(mydata?.startDate?.split(\"T\")[0]);\r\n      settargetEndDate(mydata?.endDate?.split(\"T\")[0]);\r\n      setProduct(mydata?.products);\r\n      setGrandTotalAmt(mydata?.grandTotal);\r\n    }\r\n    console.log(product);\r\n    console.log(GrandTotal);\r\n    console.log(Salesperson);\r\n    console.log(targetStartDate);\r\n    console.log(targetEndDate);\r\n  }, [product, targetEndDate]);\r\n\r\n  useEffect(() => {\r\n    Create_Sales_personList()\r\n      .then((res) => {\r\n        console.log(res?.SalesPerson);\r\n        setSalesPersonList(res?.SalesPerson);\r\n      })\r\n      .catch((err) => console.log(err));\r\n    ProductListView()\r\n      .then((res) => {\r\n        // console.log(res?.Product);\r\n        setProductList(res?.Product);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n    CreatePartyList()\r\n      .then((res) => {\r\n        // console.log(res.Party)\r\n        setPartyList(res.Party);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userData\"));\r\n    console.log(userInfo);\r\n    setUserInfo(userInfo);\r\n    // CreateOrder_ID()\r\n    //   .then((res) => {\r\n    //     const lastElement = res?.Order[res?.Order?.length - 1].id;\r\n    //     const prefix = lastElement?.substring(0, 5);\r\n    //     const number = parseInt(lastElement?.match(/\\d+$/)[0], 10) + 1;\r\n    //     const concatenatedString = prefix + number;\r\n    //     setOrderID(concatenatedString);\r\n    //   })\r\n    //   .catch((err) => {\r\n    //     console.log(err);\r\n    //   });\r\n    // CreateOrder_ViewData()\r\n    //   .then((res) => {\r\n    //     const jsonData = xmlJs.xml2json(res.data, { compact: true, spaces: 2 });\r\n    //     setCreatAccountView(JSON.parse(jsonData));\r\n    //     setStatusDropDown(\r\n    //       JSON.parse(jsonData)?.createOrder.CurrentStatus?.MyDropDown?.dropdown\r\n    //     );\r\n    //     setdropdownValue(JSON.parse(jsonData));\r\n    //     setPartDetails(JSON.parse(jsonData)?.createOrder.PartDetails);\r\n    //   })\r\n    //   .catch((err) => {\r\n    //     console.log(err);\r\n    //   });\r\n  }, []);\r\n\r\n  let addMoreProduct = () => {\r\n    setProduct([\r\n      ...product,\r\n      {\r\n        product: \"\", //\r\n        productId: \"\",\r\n        availableQty: \"\",\r\n        qty: 1, //\r\n        price: \"\", //\r\n        totalprice: \"\", //\r\n        Salespersonname: \"\",\r\n        targetstartDate: \"\",\r\n        targetEndDate: \"\",\r\n        discount: \"\",\r\n        Shipping: \"\",\r\n        tax: \"\",\r\n        grandTotal: \"\",\r\n      },\r\n    ]);\r\n  };\r\n  let removeMoreProduct = (i) => {\r\n    let newFormValues = [...product];\r\n    newFormValues.splice(i, 1);\r\n    GrandTotal.splice(i, 1);\r\n    let amt = GrandTotal.reduce((a, b) => a + b);\r\n    setGrandTotalAmt(amt);\r\n\r\n    setProduct(newFormValues);\r\n  };\r\n  // let handlePartChange = (i, e) => {\r\n  //   let newFormValues = [...part];\r\n  //   newFormValues[i][e.target.name] = e.target.value;\r\n  //   setPart(newFormValues);\r\n  // };\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n\r\n    // console.log(product);\r\n    // console.log(GrandTotal);\r\n    // console.log(Salesperson[0]?._id);\r\n    // console.log(targetStartDate);\r\n    // console.log(targetEndDate);\r\n    // console.log(grandTotalAmt);\r\n    let Allproduct = product?.map((ele, i) => {\r\n      console.log(ele);\r\n      return {\r\n        productId: ele?.productId,\r\n        qtyAssign: ele?.qty,\r\n        price: ele?.price,\r\n        totalPrice: ele?.totalprice,\r\n      };\r\n    });\r\n    let payload = {\r\n      startDate: targetStartDate,\r\n      endDate: targetEndDate,\r\n      grandTotal: grandTotalAmt,\r\n      salesPersonId: Salesperson[0]?._id,\r\n      products: Allproduct,\r\n    };\r\n    // const ObjOrder = {\r\n    //   userId: UserInfo?._id,\r\n    //   fullName: UserInfo?.UserName,\r\n    //   address: UserInfo?.Address,\r\n    //   // MobileNo: 1234567890,\r\n    //   // country: \"USA\",\r\n    //   // state: \"California\",\r\n    //   // city: \"Los Angeles\",\r\n    //   // landMark: \"Nearby Park\",\r\n    //   // pincode: 90001,\r\n    //   // grandTotal: 100.50,\r\n    //   // discount: 10.00,\r\n    //   // shippingCost: 5.00,\r\n    //   // taxAmount: 7.50,\r\n    //   // status: \"pending\",\r\n    //   orderItems: product,\r\n    // };\r\n    if (error) {\r\n      swal(\"Error occured while Entering Details\");\r\n    } else {\r\n      Create_Targetsave(payload)\r\n        .then((res) => {\r\n          // if (res.status) {\r\n          //   setFormData({});\r\n          //   window.location.reload();\r\n          swal(\"Target Created Successfully\");\r\n          // }\r\n          console.log(res);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n  const onSelect1 = (selectedList, selectedItem, index) => {\r\n    // console.log(selectedList);\r\n    setSalesperson(selectedList);\r\n    // console.log(index);\r\n    // if (selectedList.length) {\r\n    //   for (var i = 0; i < selectedList.length; i++) {\r\n    //     selectedOptions.push(selectedList[i].id);\r\n    //   }\r\n    // }\r\n    // let arr = selectedList.map((ele) => ele.id);\r\n    // setmultiSelect(arr);\r\n    // console.log(multiSelect);\r\n    // let uniqueChars = [...new Set(selectedOptions)];\r\n    // if (uniqueChars.length === 1) {\r\n    //   let value = uniqueChars[0];\r\n    //   const formdata = new FormData();\r\n    //   formdata.append(\"state_id\", value);\r\n    //   axiosConfig\r\n    //     .post(`/getcity`, formdata)\r\n    //     .then((res) => {\r\n    //       setCityList(res?.data?.cities);\r\n    //     })\r\n    //     .catch((err) => {\r\n    //       console.log(err);\r\n    //     });\r\n    // } else {\r\n    //   setCityList([]);\r\n    // }\r\n  };\r\n  const onRemove1 = (selectedList, removedItem, index) => {\r\n    console.log(selectedList);\r\n    console.log(index);\r\n\r\n    // setmultiSelect(selectedList);\r\n\r\n    // let arr = selectedList.map((ele) => ele.id);\r\n    // console.log(arr);\r\n    // setmultiSelect(arr);\r\n    // console.log(multiSelect);\r\n    // if (selectedList.length) {\r\n    //   for (var i = 0; i < selectedList.length; i++) {\r\n    //     selectedOptions.push(selectedList[i].id);\r\n    //   }\r\n    // }\r\n    // let uniqueChars = [...new Set(selectedOptions)];\r\n    // console.log(uniqueChars);\r\n  };\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Card>\r\n          <Row className=\"m-2\">\r\n            <Col className=\"\">\r\n              <div>\r\n                <h1 className=\"\">Create Target</h1>\r\n              </div>\r\n            </Col>\r\n            <Col>\r\n              <div className=\"float-right\">\r\n                <Route\r\n                  render={({ history }) => (\r\n                    <Button\r\n                      style={{ cursor: \"pointer\" }}\r\n                      className=\"float-right mr-1\"\r\n                      color=\"primary\"\r\n                      onClick={() => history.goBack()}\r\n                    >\r\n                      {\" \"}\r\n                      Back\r\n                      {/* <FaPlus size={15} /> Create User */}\r\n                    </Button>\r\n                  )}\r\n                />\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n\r\n          <CardBody>\r\n            {/* <Pickers /> */}\r\n            {/* <Col className=\"mb-3\" md=\"6\" sm=\"12\">\r\n              <h5 className=\"text-bold-500\">Range</h5>\r\n              <Flatpickr\r\n                // value={rangePicker}\r\n                className=\"form-control\"\r\n                options={{ mode: \"range\" }}\r\n                onChange={(date) => {\r\n                  console.log(date);\r\n                }}\r\n              />\r\n            </Col> */}\r\n            <Form className=\"m-1\" onSubmit={submitHandler}>\r\n              <Row>\r\n                <Col className=\"mb-1\" lg=\"2\" md=\"2\" sm=\"12\">\r\n                  <div className=\"\">\r\n                    <Label>Choose Sales Person</Label>\r\n\r\n                    <Multiselect\r\n                      required\r\n                      selectionLimit={1}\r\n                      // showCheckbox=\"true\"\r\n                      isObject=\"false\"\r\n                      options={SalesPersonList} // Options to display in the dropdown\r\n                      //   selectedValues={}   // Preselected value to persist in dropdown\r\n                      onSelect={onSelect1} // Function will trigger on select event\r\n                      onRemove={onRemove1} // Function will trigger on remove event\r\n                      displayValue=\"firstName\" // Property name to display in the dropdown options\r\n                    />\r\n                  </div>\r\n                </Col>\r\n                <Col className=\"mb-1\" lg=\"2\" md=\"2\" sm=\"12\">\r\n                  <div className=\"\">\r\n                    <Label>Start date</Label>\r\n                    <Input\r\n                      required\r\n                      type=\"date\"\r\n                      name=\"targetEndDate\"\r\n                      placeholder=\"Date of Delivery\"\r\n                      value={targetStartDate}\r\n                      // value={product.price * product.qty}\r\n                      onChange={(e) => settargetStartDate(e.target.value)}\r\n                    />\r\n                  </div>\r\n                </Col>\r\n                <Col className=\"mb-1\" lg=\"2\" md=\"2\" sm=\"12\">\r\n                  <div className=\"\">\r\n                    <Label>End Date</Label>\r\n                    <Input\r\n                      required\r\n                      type=\"date\"\r\n                      name=\"targetstartDate\"\r\n                      placeholder=\"Date of Delivery\"\r\n                      value={targetEndDate}\r\n                      // value={product.price * product.qty}\r\n                      onChange={(e) => settargetEndDate(e.target.value)}\r\n                    />\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n              {product &&\r\n                product?.map((product, index) => (\r\n                  <Row className=\"\" key={index}>\r\n                    <Col className=\"mb-1\" lg=\"2\" md=\"2\" sm=\"12\">\r\n                      <div className=\"\">\r\n                        <Label>Product Name</Label>\r\n                        <Multiselect\r\n                          required\r\n                          selectionLimit={1}\r\n                          // showCheckbox=\"true\"\r\n                          isObject=\"false\"\r\n                          options={ProductList}\r\n                          // selectedValues={selectedValue}   // Preselected value to persist in dropdown\r\n                          onSelect={(selectedList, selectedItem) =>\r\n                            handleSelection(selectedList, selectedItem, index)\r\n                          }\r\n                          onRemove={(selectedList, selectedItem) => {\r\n                            handleRemoveSelected(\r\n                              selectedList,\r\n                              selectedItem,\r\n                              index\r\n                            );\r\n                          }}\r\n                          displayValue=\"Product_Title\" // Property name to display in the dropdown options\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n                    <Col className=\"mb-1\" lg=\"2\" md=\"2\" sm=\"12\">\r\n                      <div className=\"\">\r\n                        <Label>Quantity Assign</Label>\r\n                        <Input\r\n                          type=\"number\"\r\n                          name=\"qty\"\r\n                          placeholder=\"Req_Qty\"\r\n                          value={product?.qty}\r\n                          onChange={(e) => handleProductChangeProduct(e, index)}\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n                    <Col className=\"mb-1\" lg=\"2\" md=\"2\" sm=\"12\">\r\n                      <div className=\"\">\r\n                        <Label>Price</Label>\r\n                        <Input\r\n                          type=\"number\"\r\n                          name=\"price\"\r\n                          readOnly\r\n                          placeholder=\"Price\"\r\n                          value={product.price}\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n                    <Col className=\"mb-1\" lg=\"2\" md=\"2\" sm=\"12\">\r\n                      <div className=\"\">\r\n                        <Label>Total Price</Label>\r\n                        <Input\r\n                          type=\"number\"\r\n                          name=\"totalprice\"\r\n                          readOnly\r\n                          placeholder=\"TtlPrice\"\r\n                          value={product.price * product?.qty}\r\n                        />\r\n                      </div>\r\n                    </Col>\r\n\r\n                    <Col className=\"d-flex mt-1 abb\" lg=\"3\" md=\"3\" sm=\"12\">\r\n                      <div className=\"btnStyle\">\r\n                        {index ? (\r\n                          <Button\r\n                            type=\"button\"\r\n                            color=\"danger\"\r\n                            className=\"button remove \"\r\n                            onClick={() => removeMoreProduct(index)}\r\n                          >\r\n                            - Remove\r\n                          </Button>\r\n                        ) : null}\r\n                      </div>\r\n\r\n                      <div className=\"btnStyle\">\r\n                        <Button\r\n                          className=\"ml-1 mb-1\"\r\n                          color=\"primary\"\r\n                          type=\"button\"\r\n                          onClick={() => addMoreProduct()}\r\n                        >\r\n                          + Add\r\n                        </Button>\r\n                      </div>\r\n                    </Col>\r\n                  </Row>\r\n                ))}\r\n              <Row>\r\n                {/* <Col className=\"mb-1\" lg=\"2\" md=\"2\" sm=\"12\">\r\n                      <div className=\"\">\r\n                        <Label>Discount</Label>\r\n                        <Input\r\n                          type=\"number\"\r\n                          name=\"discount\"\r\n                          readOnly\r\n                          placeholder=\"Dissct\"\r\n                          value={product.discount}\r\n                        />\r\n                      </div>\r\n                    </Col> */}\r\n                {/* <Col className=\"mb-1\" lg=\"2\" md=\"2\" sm=\"12\">\r\n                      <div className=\"\">\r\n                        <Label>Shipping Cost</Label>\r\n                        <Input\r\n                          type=\"number\"\r\n                          name=\"Shipcst\"\r\n                          readOnly\r\n                          placeholder=\"Shipcst\"\r\n                          value={product.Shipping}\r\n                        />\r\n                      </div>\r\n                    </Col> */}\r\n                {/* <Col className=\"mb-1\" lg=\"2\" md=\"2\" sm=\"12\">\r\n                      <div className=\"\">\r\n                        <Label>Tax</Label>\r\n                        <Input\r\n                          type=\"number\"\r\n                          name=\"tax\"\r\n                          readOnly\r\n                          placeholder=\"Tax\"\r\n                          value={product.tax}\r\n                        />\r\n                      </div>\r\n                    </Col> */}\r\n              </Row>\r\n              <Row>\r\n                <Col className=\"mb-1\" lg=\"12\" md=\"12\" sm=\"12\">\r\n                  <div className=\" d-flex justify-content-end\">\r\n                    <Label className=\"pr-5\">\r\n                      Grand Total : <stron>{grandTotalAmt}</stron>\r\n                    </Label>\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <div className=\"d-flex justify-content-center\">\r\n                    <Button.Ripple\r\n                      color=\"primary\"\r\n                      type=\"submit\"\r\n                      className=\"mt-2\"\r\n                    >\r\n                      Submit\r\n                    </Button.Ripple>\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n            </Form>\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default EditTarget;\r\n"],"sourceRoot":""}