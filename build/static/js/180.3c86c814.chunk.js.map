{"version":3,"sources":["views/apps/freshlist/customer/unit/EditUnit.js","views/apps/freshlist/customer/unit/ViewUnit.js","views/apps/freshlist/customer/unit/UnitList.js","../node_modules/reactstrap/es/FormGroup.js","assets/img/profile/pages/logomain.png"],"names":["StateList","id","state_title","EditUnit","ViewOneData","useState","CreatUnitView","setCreatUnitView","setSelectedValue","formData","setFormData","index","setindex","error","setError","useEffect","console","log","CreateunitxmlView","then","res","jsonData","xmlJs","xml2json","data","compact","spaces","JSON","parse","CreateUnit","catch","err","className","onSubmit","e","preventDefault","swal","userData","localStorage","getItem","_id","SaveUnit","status","message","lg","md","sm","required","showCheckbox","isObject","options","onSelect","selectedList","onRemove","displayValue","input","map","ele","i","key","label","_text","type","_attributes","placeholder","name","value","onChange","target","test","length","handleInputChange","style","color","Ripple","ViewUnit","CreatAccountView","setCreatAccountView","useContext","UserContext","Card","Form","Row","number","Col","FormGroup","Label","Input","disabled","onWheel","onKeyDown","includes","checked","SelectedColums","UnitList","props","LookupviewStart","setState","prevState","modal","LookCreateUnit","unitModal","LookAddUnit","AddunitModal","handleChangeEdit","types","baseUnit","primaryUnit","secondaryUnit","unitQty","isDisable","unitId","isUpdate","changeHandler","IsprimaryUnit","changeHandlerInput","handleAddUnit","payload","state","SaveAddPrimary_Unit","handleSave","Number","created_by","UnitUpdate","myFunctionCall","UnitListView","rowData","Unit","toggleDropdown","isOpen","onGridReady","params","gridApi","api","gridColumnApi","columnApi","gridRef","current","currenPageSize","paginationGetCurrentPage","getPageSize","paginationGetPageSize","totalPages","paginationGetTotalPages","updateSearchQuery","val","setQuickFilter","filterSize","paginationSetPageSize","handleChangeHeader","push","delindex","findIndex","headerName","splice","exportToPDF","csvData","getDataAsCsv","processCellCallback","processCell","parseCsv","parsedData","generatePDF","exportToExcel","CsvData","convertCsvToExcel","blob","downloadExcelFile","convertCSVtoExcel","Papa","complete","result","ws","XLSX","json_to_sheet","wb","book_new","book_append_sheet","shiftElementUp","currentIndex","Arrindex","myArrayCopy","SelectedcolumnDefs","elementToMove","shiftElementDown","convertCsvToXml","rows","xmlString","forEach","row","cell","Blob","link","document","createElement","href","URL","createObjectURL","download","click","HandleSetVisibleField","setColumnDefs","columnDefs","setItem","stringify","HeadingRightShift","updatedSelectedColumnDefs","Set","item","handleLeftShift","SelectedCols","slice","React","createRef","baseubitListView","setMySelectedarr","paginationPageSize","AllcolumnDefs","defaultColDef","sortable","enablePivot","enableValue","resizable","suppressMenu","this","context","UserInformatio","BaseUnitListView","PrimaryUnit","Product","field","render","history","size","onClick","runthisfunction","filter","cellRendererFramework","userHeading","buttons","cancel","text","DeleteUnitList","selectedData","getSelectedRows","updateRowData","remove","Promise","resolve","reject","header","skipEmptyLines","Error","pdfsize","Object","keys","doc","jsPDF","setTextColor","tableData","values","addImage","Logo","date","Date","setCreationDate","autoTable","head","body","startY","save","dynamicTyping","worksheet","workbook","excelBuffer","bookType","url","window","a","appendChild","revokeObjectURL","EditOneUserView","Button","ViewOneUserView","fontWeight","cursor","title","position","zIndex","border","backgroundColor","exportDataAsCsv","CardBody","marginTop","UncontrolledDropdown","DropdownToggle","tag","DropdownMenu","right","DropdownItem","Consumer","gridOptions","rowSelection","colResizeDefault","animateRows","floatingFilter","pagination","pivotPanelShow","enableRtl","direction","ref","domLayout","Modal","toggle","maxWidth","ModalHeader","ModalBody","xl","xs","class","element","CustomInput","defaultValue","width","height","Badge","unitName","Component","contextType","_excluded","propTypes","children","PropTypes","node","bool","check","inline","tagPropType","string","cssModule","object","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","_extends","defaultProps","module","exports"],"mappings":"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","file":"static/js/180.3c86c814.chunk.js","sourcesContent":["// import React, { useEffect, useState, useContext } from \"react\";\r\n// import xmlJs from \"xml-js\";\r\n// import {\r\n//   Card,\r\n//   CardBody,\r\n//   Col,\r\n//   Form,\r\n//   Row,\r\n//   Input,\r\n//   Label,\r\n//   Button,\r\n//   FormGroup,\r\n//   CustomInput,\r\n//   Badge,\r\n// } from \"reactstrap\";\r\n// import { history } from \"../../../../../history\";\r\n// import PhoneInput from \"react-phone-input-2\";\r\n// import \"react-phone-input-2/lib/style.css\";\r\n// import { Country, State, City } from \"country-state-city\";\r\n// import Select from \"react-select\";\r\n// import moment from \"moment-timezone\";\r\n// import { Route } from \"react-router-dom\";\r\n\r\n// import swal from \"sweetalert\";\r\n// import { BiEnvelope } from \"react-icons/bi\";\r\n// import { FcPhoneAndroid } from \"react-icons/fc\";\r\n// import { BsWhatsapp } from \"react-icons/bs\";\r\n// // import \"../../../../../src/layouts/assets/scss/pages/users.scss\";\r\n// import \"../../../../../assets/scss/pages/users.scss\";\r\n// import { CloudLightning } from \"react-feather\";\r\n// import { FaPlus } from \"react-icons/fa\";\r\n\r\n// import {\r\n//   CreateAccountSave,\r\n//   CreateAccountView,\r\n// } from \"../../../../../ApiEndPoint/ApiCalling\";\r\n// import \"../../../../../assets/scss/pages/users.scss\";\r\n// import UserContext from \"../../../../../context/Context\";\r\n\r\n// const EditUnit = ({ ViewOneData }) => {\r\n//   const [CreatAccountView, setCreatAccountView] = useState([]);\r\n//   const [Countries, setCountry] = useState({});\r\n//   const [States, setState] = useState({});\r\n//   const [Cities, setCities] = useState({});\r\n//   const [formData, setFormData] = useState({});\r\n//   const [dropdownValue, setdropdownValue] = useState({});\r\n//   const [index, setindex] = useState(\"\");\r\n//   const [error, setError] = useState(\"\");\r\n//   const [permissions, setpermissions] = useState({});\r\n\r\n//   const Context = useContext(UserContext);\r\n\r\n//   const handleInputChange = (e, type, i) => {\r\n//     const { name, value, checked } = e.target;\r\n//     setindex(i);\r\n//     if (type == \"checkbox\") {\r\n//       if (checked) {\r\n//         setFormData({\r\n//           ...formData,\r\n//           [name]: checked,\r\n//         });\r\n//       } else {\r\n//         setFormData({\r\n//           ...formData,\r\n//           [name]: checked,\r\n//         });\r\n//       }\r\n//     } else {\r\n//       if (type == \"number\") {\r\n//         if (/^\\d{0,10}$/.test(value)) {\r\n//           setFormData({\r\n//             ...formData,\r\n//             [name]: value,\r\n//           });\r\n//           setError(\"\");\r\n//         } else {\r\n//           setError(\r\n//             \"Please enter a valid number with a maximum length of 10 digits\"\r\n//           );\r\n//         }\r\n//       } else {\r\n//         if (value.length <= 10) {\r\n//           setFormData({\r\n//             ...formData,\r\n//             [name]: value,\r\n//           });\r\n//           // console.log(value);\r\n//           setError(\"\");\r\n//         } else {\r\n//           setFormData({\r\n//             ...formData,\r\n//             [name]: value,\r\n//           });\r\n//           // setError(\"Input length exceeds the maximum of 10 characters\");\r\n//         }\r\n//       }\r\n//     }\r\n//   };\r\n//   useEffect(() => {\r\n//     console.log(formData);\r\n//   }, [formData]);\r\n//   useEffect(() => {\r\n//     console.log(ViewOneData);\r\n//     setFormData(ViewOneData);\r\n//     CreateAccountView()\r\n//       .then((res) => {\r\n//         const jsonData = xmlJs.xml2json(res.data, { compact: true, spaces: 2 });\r\n//         // console.log(JSON.parse(jsonData)?.CreateUser?.input);\r\n\r\n//         setCreatAccountView(JSON.parse(jsonData)?.CreateUser?.input);\r\n\r\n//         setdropdownValue(JSON.parse(jsonData));\r\n//       })\r\n//       .catch((err) => {\r\n//         console.log(err);\r\n//       });\r\n//   }, []);\r\n\r\n//   const submitHandler = (e) => {\r\n//     e.preventDefault();\r\n//     console.log(formData);\r\n//     if (error) {\r\n//       swal(\"Error occured while Entering Details\");\r\n//     } else {\r\n//       CreateAccountSave(formData)\r\n//         .then((res) => {\r\n//           setFormData({});\r\n//           if (res.status) {\r\n//             window.location.reload();\r\n//             swal(\"User Created Successfully\");\r\n//           }\r\n//         })\r\n//         .catch((err) => {\r\n//           console.log(err);\r\n//         });\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <div>\r\n//         <Card>\r\n//           <Row className=\"m-2\">\r\n//             <Col>\r\n//               <h1 className=\"float-left\">Edit User</h1>\r\n//             </Col>\r\n//             <Col>\r\n//               <div className=\"float-right\">\r\n//                 {/* <Route\r\n//                   render={({ history }) => (\r\n//                     <Button\r\n//                       style={{ cursor: \"pointer\" }}\r\n//                       className=\"float-right mr-1\"\r\n//                       color=\"primary\"\r\n//                       onClick={() =>\r\n//                         history.push(\"/app/SoftNumen/accounSearch\")\r\n//                       }\r\n//                     >\r\n//                       {\" \"}\r\n//                       Back\r\n//                     </Button>\r\n//                   )}\r\n//                 /> */}\r\n//               </div>\r\n//             </Col>\r\n//           </Row>\r\n//           {/* <hr /> */}\r\n\r\n//           <CardBody>\r\n//             <Form className=\"m-1\" onSubmit={submitHandler}>\r\n//               <Row className=\"mb-2\">\r\n//                 {/* <Col lg=\"6\" md=\"6\">\r\n//                   <FormGroup>\r\n//                     <Label>\r\n//                       {\r\n//                         dropdownValue.CreateAccount?.MyDropdown?.dropdown?.label\r\n//                           ?._text\r\n//                       }\r\n//                     </Label>\r\n//                     <CustomInput\r\n//                       required\r\n//                       type=\"select\"\r\n//                       name={\r\n//                         dropdownValue.CreateAccount?.MyDropdown?.dropdown?.name\r\n//                           ?._text\r\n//                       }\r\n//                       value={\r\n//                         formData[\r\n//                           dropdownValue.CreateAccount?.MyDropdown?.dropdown\r\n//                             ?.name?._text\r\n//                         ]\r\n//                       }\r\n//                       onChange={handleInputChange}\r\n//                     >\r\n//                       <option value=\"\">--Select Role--</option>\r\n//                       {dropdownValue?.CreateAccount?.MyDropdown?.dropdown?.option.map(\r\n//                         (option, index) => (\r\n//                           <option\r\n//                             key={index}\r\n//                             value={option?._attributes?.value}\r\n//                           >\r\n//                             {option?._attributes?.value}\r\n//                           </option>\r\n//                         )\r\n//                       )}\r\n//                     </CustomInput>\r\n//                   </FormGroup>\r\n//                 </Col> */}\r\n\r\n//                 {CreatAccountView &&\r\n//                   CreatAccountView?.map((ele, i) => {\r\n//                     {\r\n//                       /* console.log(Context?.UserInformatio?.dateFormat); */\r\n//                     }\r\n//                     // console.log(Countries);\r\n//                     // console.log(States);\r\n//                     const convertedTime = moment(\"2022-08-05T12:00:00\")\r\n//                       .tz(\"America/New_York\")\r\n//                       .format(\"D MMM, YYYY HH:mm\");\r\n\r\n//                     if (!!ele?.phoneinput) {\r\n//                       return (\r\n//                         <>\r\n//                           <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n//                             <FormGroup>\r\n//                               <Label>{ele?.label?._text}</Label>\r\n//                               <PhoneInput\r\n//                                 disabled\r\n//                                 inputClass=\"myphoneinput\"\r\n//                                 country={\"us\"}\r\n//                                 onKeyDown={(e) => {\r\n//                                   if (\r\n//                                     ele?.type?._attributes?.type == \"number\"\r\n//                                   ) {\r\n//                                     [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n//                                       e.preventDefault();\r\n//                                   }\r\n//                                 }}\r\n//                                 countryCodeEditable={false}\r\n//                                 name={ele?.name?._text}\r\n//                                 value={formData[ele?.name?._text]}\r\n//                                 onChange={(phone) => {\r\n//                                   setFormData({\r\n//                                     ...formData,\r\n//                                     [ele?.name?._text]: phone,\r\n//                                   });\r\n//                                 }}\r\n//                               />\r\n//                               {index === i ? (\r\n//                                 <>\r\n//                                   {error && (\r\n//                                     <span style={{ color: \"red\" }}>\r\n//                                       {error}\r\n//                                     </span>\r\n//                                   )}\r\n//                                 </>\r\n//                               ) : (\r\n//                                 <></>\r\n//                               )}\r\n//                             </FormGroup>\r\n//                           </Col>\r\n//                         </>\r\n//                       );\r\n//                     } else if (!!ele?.library) {\r\n//                       if (ele?.label._text?.includes(\"ountry\")) {\r\n//                         console.log(ele);\r\n//                         return (\r\n//                           <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n//                             <FormGroup>\r\n//                               <Label>{ele?.label?._text}</Label>\r\n//                               <Select\r\n//                                 disabled\r\n//                                 inputClass=\"countryclass\"\r\n//                                 className=\"countryclassnw\"\r\n//                                 options={Country.getAllCountries()}\r\n//                                 getOptionLabel={(options) => {\r\n//                                   return options[\"name\"];\r\n//                                 }}\r\n//                                 getOptionValue={(options) => {\r\n//                                   return options[\"name\"];\r\n//                                 }}\r\n//                                 value={Countries}\r\n//                                 onChange={(country) => {\r\n//                                   setCountry(country);\r\n//                                   setFormData({\r\n//                                     ...formData,\r\n//                                     [\"Country\"]: country?.name,\r\n//                                   });\r\n//                                 }}\r\n//                               />\r\n//                               {index === i ? (\r\n//                                 <>\r\n//                                   {error && (\r\n//                                     <span style={{ color: \"red\" }}>\r\n//                                       {error}\r\n//                                     </span>\r\n//                                   )}\r\n//                                 </>\r\n//                               ) : (\r\n//                                 <></>\r\n//                               )}\r\n//                             </FormGroup>\r\n//                           </Col>\r\n//                         );\r\n//                       } else if (ele?.label._text?.includes(\"tate\")) {\r\n//                         return (\r\n//                           <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n//                             <FormGroup>\r\n//                               <Label>{ele?.label?._text}</Label>\r\n//                               <Select\r\n//                                 disabled\r\n//                                 options={State?.getStatesOfCountry(\r\n//                                   Countries?.isoCode\r\n//                                 )}\r\n//                                 getOptionLabel={(options) => {\r\n//                                   return options[\"name\"];\r\n//                                 }}\r\n//                                 getOptionValue={(options) => {\r\n//                                   return options[\"name\"];\r\n//                                 }}\r\n//                                 value={States}\r\n//                                 onChange={(State) => {\r\n//                                   setState(State);\r\n//                                   setFormData({\r\n//                                     ...formData,\r\n//                                     [\"State\"]: State?.name,\r\n//                                   });\r\n//                                 }}\r\n//                               />\r\n//                               {index === i ? (\r\n//                                 <>\r\n//                                   {error && (\r\n//                                     <span style={{ color: \"red\" }}>\r\n//                                       {error}\r\n//                                     </span>\r\n//                                   )}\r\n//                                 </>\r\n//                               ) : (\r\n//                                 <></>\r\n//                               )}\r\n//                             </FormGroup>\r\n//                           </Col>\r\n//                         );\r\n//                       } else if (ele?.label._text?.includes(\"ity\")) {\r\n//                         return (\r\n//                           <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n//                             <FormGroup>\r\n//                               <Label>{ele?.label?._text}</Label>\r\n//                               <Select\r\n//                                 disabled\r\n//                                 options={City?.getCitiesOfState(\r\n//                                   States?.countryCode,\r\n//                                   States?.isoCode\r\n//                                 )}\r\n//                                 getOptionLabel={(options) => {\r\n//                                   return options[\"name\"];\r\n//                                 }}\r\n//                                 getOptionValue={(options) => {\r\n//                                   return options[\"name\"];\r\n//                                 }}\r\n//                                 value={Cities}\r\n//                                 onChange={(City) => {\r\n//                                   setCities(City);\r\n//                                   setFormData({\r\n//                                     ...formData,\r\n//                                     [\"City\"]: City?.name,\r\n//                                   });\r\n//                                 }}\r\n//                               />\r\n//                               {index === i ? (\r\n//                                 <>\r\n//                                   {error && (\r\n//                                     <span style={{ color: \"red\" }}>\r\n//                                       {error}\r\n//                                     </span>\r\n//                                   )}\r\n//                                 </>\r\n//                               ) : (\r\n//                                 <></>\r\n//                               )}\r\n//                             </FormGroup>\r\n//                           </Col>\r\n//                         );\r\n//                       } else {\r\n//                         return (\r\n//                           <>\r\n//                             {ele?.type?._attributes?.type == \"date\" ? (\r\n//                               <>\r\n//                                 <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n//                                   <FormGroup key={i}>\r\n//                                     <Label>{ele?.label?._text}</Label>\r\n\r\n//                                     <Input\r\n//                                       disabled\r\n//                                       onKeyDown={(e) => {\r\n//                                         if (\r\n//                                           ele?.type?._attributes?.type ==\r\n//                                           \"number\"\r\n//                                         ) {\r\n//                                           [\"e\", \"E\", \"+\", \"-\"].includes(\r\n//                                             e.key\r\n//                                           ) && e.preventDefault();\r\n//                                         }\r\n//                                       }}\r\n//                                       type={ele?.type?._attributes?.type}\r\n//                                       placeholder={ele?.placeholder?._text}\r\n//                                       name={ele?.name?._text}\r\n//                                       dateFormat={\r\n//                                         Context?.UserInformatio?.dateFormat\r\n//                                       }\r\n//                                       value={\r\n//                                         moment(formData[ele?.name?._text])\r\n//                                           .tz(Context?.UserInformatio?.timeZone)\r\n//                                           .format(\r\n//                                             Context?.UserInformatio?.dateFormat\r\n//                                           )\r\n//                                         // formData[ele?.name?._text]\r\n//                                       }\r\n//                                       // value={formData[ele?.name?._text]}\r\n//                                       onChange={(e) =>\r\n//                                         handleInputChange(\r\n//                                           e,\r\n//                                           ele?.type?._attributes?.type,\r\n//                                           i\r\n//                                         )\r\n//                                       }\r\n//                                     />\r\n//                                     {index === i ? (\r\n//                                       <>\r\n//                                         {error && (\r\n//                                           <span style={{ color: \"red\" }}>\r\n//                                             {error}\r\n//                                           </span>\r\n//                                         )}\r\n//                                       </>\r\n//                                     ) : (\r\n//                                       <></>\r\n//                                     )}\r\n//                                   </FormGroup>\r\n//                                 </Col>\r\n//                               </>\r\n//                             ) : (\r\n//                               <>\r\n//                                 <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n//                                   <FormGroup key={i}>\r\n//                                     <Label>{ele?.label?._text}</Label>\r\n\r\n//                                     <Input\r\n//                                       disabled\r\n//                                       onKeyDown={(e) => {\r\n//                                         if (\r\n//                                           ele?.type?._attributes?.type ==\r\n//                                           \"number\"\r\n//                                         ) {\r\n//                                           [\"e\", \"E\", \"+\", \"-\"].includes(\r\n//                                             e.key\r\n//                                           ) && e.preventDefault();\r\n//                                         }\r\n//                                       }}\r\n//                                       type={ele?.type?._attributes?.type}\r\n//                                       placeholder={ele?.placeholder?._text}\r\n//                                       name={ele?.name?._text}\r\n//                                       value={formData[ele?.name?._text]}\r\n//                                       onChange={(e) =>\r\n//                                         handleInputChange(\r\n//                                           e,\r\n//                                           ele?.type?._attributes?.type,\r\n//                                           i\r\n//                                         )\r\n//                                       }\r\n//                                     />\r\n//                                     {index === i ? (\r\n//                                       <>\r\n//                                         {error && (\r\n//                                           <span style={{ color: \"red\" }}>\r\n//                                             {error}\r\n//                                           </span>\r\n//                                         )}\r\n//                                       </>\r\n//                                     ) : (\r\n//                                       <></>\r\n//                                     )}\r\n//                                   </FormGroup>\r\n//                                 </Col>\r\n//                               </>\r\n//                             )}\r\n//                           </>\r\n//                         );\r\n//                       }\r\n//                     } else {\r\n//                       return (\r\n//                         <>\r\n//                           {!!ele?.number ? (\r\n//                             <>\r\n//                               <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n//                                 <FormGroup key={i}>\r\n//                                   <Label>{ele?.label?._text}</Label>\r\n\r\n//                                   <Input\r\n//                                     disabled\r\n//                                     onWheel={(e) => {\r\n//                                       e.preventDefault(); // Prevent the mouse wheel scroll event\r\n//                                     }}\r\n//                                     onKeyDown={(e) => {\r\n//                                       if (\r\n//                                         ele?.type?._attributes?.type == \"number\"\r\n//                                       ) {\r\n//                                         [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n//                                           e.preventDefault();\r\n//                                       }\r\n//                                     }}\r\n//                                     type={ele?.type?._attributes?.type}\r\n//                                     placeholder={ele?.placeholder?._text}\r\n//                                     name={ele?.name?._text}\r\n//                                     value={formData[ele?.name?._text]}\r\n//                                     onChange={(e) =>\r\n//                                       handleInputChange(\r\n//                                         e,\r\n//                                         ele?.type?._attributes?.type,\r\n//                                         i\r\n//                                       )\r\n//                                     }\r\n//                                   />\r\n//                                   {index === i ? (\r\n//                                     <>\r\n//                                       {error && (\r\n//                                         <span style={{ color: \"red\" }}>\r\n//                                           {error}\r\n//                                         </span>\r\n//                                       )}\r\n//                                     </>\r\n//                                   ) : (\r\n//                                     <></>\r\n//                                   )}\r\n//                                 </FormGroup>\r\n//                               </Col>\r\n//                             </>\r\n//                           ) : (\r\n//                             <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n//                               <FormGroup key={i}>\r\n//                                 <Label>{ele?.label?._text}</Label>\r\n\r\n//                                 <Input\r\n//                                   disabled\r\n//                                   onKeyDown={(e) => {\r\n//                                     if (\r\n//                                       ele?.type?._attributes?.type == \"number\"\r\n//                                     ) {\r\n//                                       [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n//                                         e.preventDefault();\r\n//                                     }\r\n//                                   }}\r\n//                                   type={ele?.type?._attributes?.type}\r\n//                                   placeholder={ele?.placeholder?._text}\r\n//                                   name={ele?.name?._text}\r\n//                                   value={formData[ele?.name?._text]}\r\n//                                   onChange={(e) => {\r\n//                                     // const value = e.target.value;\r\n//                                     // // Use regular expression to allow only numbers\r\n//                                     // const numericValue = value.replace(\r\n//                                     //   /\\D/g,\r\n//                                     //   \"\"\r\n//                                     // );\r\n//                                     handleInputChange(\r\n//                                       e,\r\n//                                       ele?.type?._attributes?.type,\r\n//                                       i\r\n//                                     );\r\n//                                   }}\r\n//                                 />\r\n//                                 {index === i ? (\r\n//                                   <>\r\n//                                     {error && (\r\n//                                       <span style={{ color: \"red\" }}>\r\n//                                         {error}\r\n//                                       </span>\r\n//                                     )}\r\n//                                   </>\r\n//                                 ) : (\r\n//                                   <></>\r\n//                                 )}\r\n//                               </FormGroup>\r\n//                             </Col>\r\n//                           )}\r\n//                         </>\r\n//                       );\r\n//                     }\r\n//                   })}\r\n//               </Row>\r\n\r\n//               <hr />\r\n//               {/* <Row className=\"mt-2 \">\r\n//                 <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2\">\r\n//                   <Label className=\"\">\r\n//                     <h4>Status</h4>\r\n//                   </Label>\r\n//                   <div className=\"form-label-group mx-1\">\r\n//                     {CreatAccountView &&\r\n//                       CreatAccountView?.CreateAccount?.Radiobutton?.input?.map(\r\n//                         (ele, i) => {\r\n//                           return (\r\n//                             <FormGroup key={i}>\r\n//                               <Input\r\n//                                 key={i}\r\n//                                 style={{ marginRight: \"3px\" }}\r\n//                                 required\r\n//                                 type={ele?.type?._attributes?.type}\r\n//                                 name={ele?.name?._text}\r\n//                                 value={`${\r\n//                                   ele?.label?._text == \"Active\"\r\n//                                     ? \"Active\"\r\n//                                     : \"Deactive\"\r\n//                                 }`}\r\n//                                 onChange={handleInputChange}\r\n//                               />{\" \"}\r\n//                               <span\r\n//                                 className=\"mx-1 mt-1\"\r\n//                                 style={{ marginRight: \"20px\" }}\r\n//                               >\r\n//                                 {ele?.label?._text}\r\n//                               </span>\r\n//                             </FormGroup>\r\n//                           );\r\n//                         }\r\n//                       )}\r\n//                   </div>\r\n//                 </Col>\r\n//               </Row> */}\r\n\r\n//               {/* <Row>\r\n//                 <Button.Ripple\r\n//                   color=\"primary\"\r\n//                   type=\"submit\"\r\n//                   className=\"mr-1 mt-2 mx-2\"\r\n//                 >\r\n//                   Submit\r\n//                 </Button.Ripple>\r\n//               </Row> */}\r\n//             </Form>\r\n//           </CardBody>\r\n//         </Card>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n// export default EditUnit;\r\n\r\n\r\nimport React, { useEffect, useState, useRef ,useContext } from \"react\";\r\nimport xmlJs from \"xml-js\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport Multiselect from \"multiselect-react-dropdown\";\r\nimport { Country, State, City } from \"country-state-city\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Form,\r\n  Row,\r\n  Input,\r\n  Label,\r\n  Button,\r\n  FormGroup,\r\n  CustomInput,\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport swal from \"sweetalert\";\r\nimport { Route } from \"react-router-dom\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\n\r\nimport { history } from \"../../../../../history\";\r\nimport \"../../../../../../src/layouts/assets/scss/pages/users.scss\";\r\nimport {\r\n  CreateunitxmlView,\r\n  SaveUnit,\r\n} from \"../../../../../ApiEndPoint/ApiCalling\";\r\nimport \"../../../../../assets/scss/pages/users.scss\";\r\n// import UserContext from \"../../../../../context/Context\";\r\nconst StateList = [\r\n    { id: 1, state_title: 'Clothing & Apparel.' },\r\n    { id: 2, state_title: 'Footwear & Shoes.' },\r\n    { id: 3, state_title: 'Electronics & Gadgets.' },\r\n    // Add more states as needed\r\n  ];\r\nconst EditUnit = ({ViewOneData}) => {\r\n  const [CreatUnitView, setCreatUnitView] = useState({});\r\n  const [Countries, setCountry] = useState({});\r\n  const [States, setState] = useState({});\r\n  const [Cities, setCities] = useState({});\r\n//   const [StateList, setCityList] = useState([]);\r\n  const [selectedValue, setSelectedValue] = useState([]);\r\n  const [formData, setFormData] = useState({});\r\n  const [index, setindex] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [permissions, setpermissions] = useState({});\r\n//   const formRef = useRef(null);\r\n  // const createUserXmlView = useContext(UserContext);\r\n\r\n  const handleInputChange = (e, type, i) => {\r\n    const { name, value } = e.target;\r\n    console.log(value)\r\n  setindex(i);\r\n if (type == \"number\") {\r\n      if (/^\\d{0,10}$/.test(value)) {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: value,\r\n        });\r\n        setError(\"\");\r\n      } else {\r\n        setError(\r\n          \"Please enter a valid number with a maximum length of 10 digits\"\r\n        );\r\n      }\r\n    } else {\r\n      if (value.length <= 10) {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: value,\r\n        });\r\n        // console.log(value);\r\n        setError(\"\");\r\n      } else {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: value,\r\n        });\r\n        // setError(\"Input length exceeds the maximum of 10 characters\");\r\n      }\r\n    }\r\n\r\n  };\r\n\r\n\r\nuseEffect(() => {\r\n  console.log(ViewOneData)\r\n  CreateunitxmlView()\r\n      .then(res => {\r\n        const jsonData = xmlJs.xml2json(res.data, { compact: true, spaces: 2 });\r\n        console.log(JSON.parse(jsonData).CreateUnit)\r\n      setCreatUnitView(JSON.parse(jsonData))\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  const onSelect1 = (selectedList) => {\r\n    setSelectedValue(selectedList)\r\n    console.log('Selected:', selectedList);\r\n };\r\n  const onRemove1 = (selectedList) => {\r\n    setSelectedValue(selectedList); \r\n    console.log('Removed:', selectedList);\r\n  };\r\n\r\n  const submitHandler = e => {\r\n    // if (formRef.current) {\r\n    //     formRef.current.reset();\r\n    //   }\r\n    e.preventDefault();\r\n    console.log(formData)\r\n    if (error) {\r\n      swal(\"Error occured while Entering Details\");\r\n    } else {\r\n     let userData = JSON.parse(localStorage.getItem(\"userData\"));\r\n     formData[\"created_by\"] = userData?._id;\r\n     SaveUnit(formData)\r\n       .then((res) => {\r\n         console.log(res);\r\n         if (res.status) {\r\n           swal(`${res.message}`);\r\n         }\r\n       })\r\n       .catch((err) => {\r\n         console.log(err);\r\n       });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Card>\r\n        <Row className=\"m-2\">\r\n            <Col>\r\n              <h1 className=\"float-left\">Edit Unit</h1>\r\n            </Col>\r\n            <Col>\r\n              <div className=\"float-right\">\r\n                {/* <Route\r\n                  render={({ history }) => (\r\n                    <Button\r\n                      style={{ cursor: \"pointer\" }}\r\n                      className=\"float-right mr-1\"\r\n                      color=\"primary\"\r\n                      onClick={() =>\r\n                        history.push(\"/app/SoftNumen/accounSearch\")\r\n                      }\r\n                    >\r\n                      {\" \"}\r\n                      Back\r\n                    </Button>\r\n                  )}\r\n                /> */}\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n\r\n          <CardBody>\r\n            <Form className=\"m-1\"\r\n            //   ref={formRef}\r\n             onSubmit={submitHandler}>\r\n              <Row className=\"mb-2\">\r\n            <Col lg=\"6\" md=\"6\" sm=\"12\">\r\n                <Label>Select Product</Label>\r\n            <Multiselect\r\n                          required\r\n                          showCheckbox=\"true\"\r\n                          isObject=\"false\"\r\n                          options={StateList} \r\n                          onSelect={onSelect1} \r\n                          onRemove={onRemove1} \r\n                          displayValue=\"state_title\" \r\n                        />\r\n            </Col>\r\n                {CreatUnitView &&\r\n                  CreatUnitView?.CreateUnit\r\n                  ?.input?.map((ele, i) => {\r\n                   return (\r\n                    <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                    <FormGroup key={i}>\r\n                      <Label>{ele?.label?._text}</Label>\r\n\r\n                      <Input\r\n                 \r\n                        type={ele?.type?._attributes?.type}\r\n                        placeholder={ele?.placeholder?._text}\r\n                        name={ele?.name?._text}\r\n                        value={formData[ele?.name?._text]}\r\n                        onChange={(e) =>\r\n                          handleInputChange(\r\n                            e,\r\n                            ele?.type?._attributes?.type,\r\n                            i\r\n                          )\r\n                        }\r\n                      />\r\n                      {index === i ? (\r\n                        <>\r\n                          {error && (\r\n                            <span style={{ color: \"red\" }}>\r\n                              {error}\r\n                            </span>\r\n                          )}\r\n                        </>\r\n                      ) : (\r\n                        <></>\r\n                      )}\r\n                    </FormGroup>\r\n                  </Col>\r\n                   )\r\n      }\r\n                )}\r\n              </Row>\r\n              <hr />\r\n              <Row>\r\n                <Button.Ripple\r\n                  color=\"primary\"\r\n                  type=\"submit\"\r\n                  className=\"mr-1 mt-2 mx-2\"\r\n                >\r\n                  Submit\r\n                </Button.Ripple>\r\n              </Row>\r\n            </Form>\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default EditUnit;\r\n\r\n","import React, { useEffect, useState, useContext } from \"react\";\r\nimport xmlJs from \"xml-js\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Form,\r\n  Row,\r\n  Input,\r\n  Label,\r\n  Button,\r\n  FormGroup,\r\n  CustomInput,\r\n  Badge,\r\n} from \"reactstrap\";\r\nimport { history } from \"../../../../../history\";\r\nimport { Route } from \"react-router-dom\";\r\n\r\nimport swal from \"sweetalert\";\r\nimport \"../../../../../../src/layouts/assets/scss/pages/users.scss\";\r\n\r\nimport { CreateunitxmlView } from \"../../../../../ApiEndPoint/ApiCalling\";\r\nimport \"../../../../../assets/scss/pages/users.scss\";\r\nimport UserContext from \"../../../../../context/Context\";\r\nconst ViewUnit = ({ ViewOneData }) => {\r\n  const [CreatAccountView, setCreatAccountView] = useState([]);\r\n\r\n  const [formData, setFormData] = useState({});\r\n  const [dropdownValue, setdropdownValue] = useState({});\r\n  const [index, setindex] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [permissions, setpermissions] = useState({});\r\n\r\n  const Context = useContext(UserContext);\r\n\r\n  const handleInputChange = (e, type, i) => {\r\n    const { name, value, checked } = e.target;\r\n    setindex(i);\r\n    if (type == \"checkbox\") {\r\n      if (checked) {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      } else {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      }\r\n    } else {\r\n      if (type == \"number\") {\r\n        if (/^\\d{0,10}$/.test(value)) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          setError(\"\");\r\n        } else {\r\n          setError(\r\n            \"Please enter a valid number with a maximum length of 10 digits\"\r\n          );\r\n        }\r\n      } else {\r\n        if (value.length <= 10) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          // console.log(value);\r\n          setError(\"\");\r\n        } else {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          // setError(\"Input length exceeds the maximum of 10 characters\");\r\n        }\r\n      }\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    console.log(formData);\r\n  }, [formData]);\r\n  useEffect(() => {\r\n    setFormData(ViewOneData);\r\n    console.log(ViewOneData);\r\n    if (ViewOneData?.status) {\r\n      formData[\"status\"] = ViewOneData?.status;\r\n    }\r\n    CreateunitxmlView()\r\n      .then(res => {\r\n        const jsonData = xmlJs.xml2json(res.data, { compact: true, spaces: 2 });\r\n        console.log(JSON.parse(jsonData)?.CreateUnit?.input);\r\n        setCreatAccountView(JSON.parse(jsonData)?.CreateUnit?.input);\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Card>\r\n          <Form className=\"mr-1 ml-1\">\r\n            <Row className=\"mb-2\">\r\n              {CreatAccountView &&\r\n                CreatAccountView?.map((ele, i) => {\r\n                  return (\r\n                    <>\r\n                      {!!ele?.number ? (\r\n                        <>\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup key={i}>\r\n                              <Label>{ele?.label?._text}</Label>\r\n\r\n                              <Input\r\n                                disabled\r\n                                onWheel={e => {\r\n                                  e.preventDefault(); // Prevent the mouse wheel scroll event\r\n                                }}\r\n                                onKeyDown={e => {\r\n                                  if (\r\n                                    ele?.type?._attributes?.type == \"number\"\r\n                                  ) {\r\n                                    [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                      e.preventDefault();\r\n                                  }\r\n                                }}\r\n                                type={ele?.type?._attributes?.type}\r\n                                placeholder={ele?.placeholder?._text}\r\n                                name={ele?.name?._text}\r\n                                value={formData[ele?.name?._text]}\r\n                                onChange={e =>\r\n                                  handleInputChange(\r\n                                    e,\r\n                                    ele?.type?._attributes?.type,\r\n                                    i\r\n                                  )\r\n                                }\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </>\r\n                      ) : (\r\n                        <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                          <FormGroup key={i}>\r\n                            <Label>{ele?.label?._text}</Label>\r\n\r\n                            <Input\r\n                              disabled\r\n                              //   onKeyDown={e => {\r\n                              //     if (ele?.type?._attributes?.type == \"number\") {\r\n                              //       [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                              //         e.preventDefault();\r\n                              //     }\r\n                              //   }}\r\n                              type={ele?.type?._attributes?.type}\r\n                              placeholder={ele?.placeholder?._text}\r\n                              name={ele?.name?._text}\r\n                              value={formData[ele?.name?._text]}\r\n                              //   onChange={e => {\r\n                              //     handleInputChange(\r\n                              //       e,\r\n                              //       ele?.type?._attributes?.type,\r\n                              //       i\r\n                              //     );\r\n                              //   }}\r\n                            />\r\n                            {index === i ? (\r\n                              <>\r\n                                {error && (\r\n                                  <span style={{ color: \"red\" }}>{error}</span>\r\n                                )}\r\n                              </>\r\n                            ) : (\r\n                              <></>\r\n                            )}\r\n                          </FormGroup>\r\n                        </Col>\r\n                      )}\r\n                    </>\r\n                  );\r\n                })}\r\n            </Row>\r\n            {/* <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2 mt-1\">\r\n              <Label className=\"mb-0\">Status</Label>\r\n              <div\r\n                className=\"form-label-group\"\r\n                // onChange={(e) => {\r\n                //   setFormData({\r\n                //     ...formData,\r\n                //     [\"status\"]: e.target.value,\r\n                //   });\r\n                // }}\r\n              >\r\n                <input\r\n                  disabled\r\n                  checked={formData[\"status\"] == \"Active\"}\r\n                  style={{ marginRight: \"3px\" }}\r\n                  type=\"radio\"\r\n                  name=\"status\"\r\n                  value=\"Active\"\r\n                />\r\n                <span style={{ marginRight: \"20px\" }}>Active</span>\r\n\r\n                <input\r\n                  // checked={status == \"Inactive\"}\r\n                  checked={formData[\"status\"] == \"Deactive\"}\r\n                  disabled\r\n                  style={{ marginRight: \"3px\" }}\r\n                  type=\"radio\"\r\n                  name=\"status\"\r\n                  value=\"Deactive\"\r\n                />\r\n                <span style={{ marginRight: \"3px\" }}>Deactive</span>\r\n              </div>\r\n            </Col> */}\r\n            <hr />\r\n          </Form>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default ViewUnit;\r\n","import React, { useRef } from \"react\";\r\nimport { ImDownload } from \"react-icons/im\";\r\n\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Input,\r\n  Row,\r\n  Modal,\r\n  Col,\r\n  UncontrolledDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  Button,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Badge,\r\n  Label,\r\n  CustomInput,\r\n  Form,\r\n} from \"reactstrap\";\r\nimport { ContextLayout } from \"../../../../../utility/context/Layout\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport ViewUnit from \"./ViewUnit\";\r\nimport EditUnit from \"./EditUnit\";\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport Logo from \"../../../../../assets/img/profile/pages/logomain.png\";\r\nimport Papa from \"papaparse\";\r\nimport { FaPlus } from \"react-icons/fa\";\r\nimport { Eye, Trash2, ChevronDown, Edit, CloudLightning } from \"react-feather\";\r\nimport { IoMdRemoveCircleOutline } from \"react-icons/io\";\r\nimport { history } from \"../../../../../history\";\r\nimport \"../../../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\r\nimport \"../../../../../assets/scss/pages/users.scss\";\r\nimport { Route } from \"react-router-dom\";\r\n\r\nimport xmlJs from \"xml-js\";\r\n\r\nimport {\r\n  FaArrowAltCircleLeft,\r\n  FaArrowAltCircleRight,\r\n  FaFilter,\r\n} from \"react-icons/fa\";\r\nimport swal from \"sweetalert\";\r\nimport {\r\n  DeleteUnitList,\r\n  CreateunitxmlView,\r\n  UnitListView,\r\n  SaveUnit,\r\n  SaveAddPrimary_Unit,\r\n  BaseUnitListView,\r\n  UnitUpdate,\r\n} from \"../../../../../ApiEndPoint/ApiCalling\";\r\nimport {\r\n  BsCloudDownloadFill,\r\n  BsFillArrowDownSquareFill,\r\n  BsFillArrowUpSquareFill,\r\n} from \"react-icons/bs\";\r\nimport * as XLSX from \"xlsx\";\r\nimport UserContext from \"../../../../../context/Context\";\r\nconst SelectedColums = [];\r\nclass UnitList extends React.Component {\r\n  static contextType = UserContext;\r\n  constructor(props) {\r\n    super(props);\r\n    this.gridRef = React.createRef();\r\n    this.gridApi = null;\r\n    this.state = {\r\n      isOpen: false,\r\n      Arrindex: \"\",\r\n      rowData: [],\r\n      baseubitListView: [],\r\n      baseUnit: \"\",\r\n      unitId: \"\",\r\n      primaryUnit: \"\",\r\n      secondaryUnit: \"\",\r\n      unitQty: 0,\r\n      isDisable: false,\r\n      formData: {},\r\n      isUpdate: false,\r\n      IsprimaryUnit: false,\r\n      setMySelectedarr: [],\r\n      SelectedCols: [],\r\n      paginationPageSize: 5,\r\n      currenPageSize: \"\",\r\n      getPageSize: \"\",\r\n      columnDefs: [],\r\n      AllcolumnDefs: [],\r\n      SelectedcolumnDefs: [],\r\n      defaultColDef: {\r\n        sortable: true,\r\n        enablePivot: true,\r\n        enableValue: true,\r\n        resizable: true,\r\n        suppressMenu: true,\r\n      },\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(this.state.baseUnit, this.state.secondaryUnit);\r\n  }\r\n  LookupviewStart = () => {\r\n    this.setState(prevState => ({\r\n      modal: !prevState.modal,\r\n    }));\r\n  };\r\n  LookCreateUnit = () => {\r\n    this.setState(prevState => ({\r\n      unitModal: !prevState.unitModal,\r\n    }));\r\n  };\r\n  LookAddUnit = () => {\r\n    this.setState(prevState => ({\r\n      unitModal: !prevState.unitModal,\r\n    }));\r\n    this.setState(prevState => ({\r\n      AddunitModal: !prevState.AddunitModal,\r\n    }));\r\n  };\r\n\r\n  handleChangeEdit = (data, types) => {\r\n    // console.log(data);\r\n    this.setState(prevState => ({\r\n      unitModal: !prevState.unitModal,\r\n    }));\r\n    this.setState({ baseUnit: data.primaryUnit });\r\n    this.setState({ secondaryUnit: data.secondaryUnit });\r\n    this.setState({ unitQty: data.unitQty });\r\n\r\n    let type = types;\r\n    if (type == \"readonly\") {\r\n      this.setState({ isDisable: true });\r\n    } else {\r\n      console.log(data, data?._id);\r\n      this.setState({ unitId: data?._id });\r\n      this.setState({ isUpdate: true });\r\n      this.setState({ isDisable: false });\r\n    }\r\n  };\r\n  changeHandler = e => {\r\n    console.log(e.target.value);\r\n    if (e.target.value !== \"None\") {\r\n      this.setState({ IsprimaryUnit: true });\r\n    } else {\r\n      this.setState({ IsprimaryUnit: false });\r\n    }\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n  changeHandlerInput = e => {\r\n    console.log(e.target.value);\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n  handleAddUnit = e => {\r\n    e.preventDefault();\r\n    const payload = {\r\n      primaryUnit: this.state.primaryUnit,\r\n    };\r\n    SaveAddPrimary_Unit(payload)\r\n      .then(res => {\r\n        console.log(res);\r\n        if (res.status) {\r\n          swal(`${res.message}`);\r\n        }\r\n        this.setState(prevState => ({\r\n          AddunitModal: !prevState.AddunitModal,\r\n        }));\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  };\r\n  handleSave = e => {\r\n    e.preventDefault();\r\n    let userData = JSON.parse(localStorage.getItem(\"userData\"));\r\n    if (this.state.baseUnit != \"\" && this.state.secondaryUnit != \"\") {\r\n      if (this.state.baseUnit != this.state.secondaryUnit) {\r\n        if (Number(this.state.unitQty) > 0) {\r\n          const payload = {\r\n            primaryUnit: this.state.baseUnit,\r\n            secondaryUnit: this.state.secondaryUnit,\r\n            unitQty: Number(this.state.unitQty),\r\n            created_by: userData?._id,\r\n          };\r\n\r\n          if (this.state.isUpdate) {\r\n            debugger;\r\n            console.log(this.state.unitId);\r\n            UnitUpdate(payload, this.state.unitId)\r\n              .then(res => {\r\n                if (res.status) {\r\n                  console.log(\"Edit\", res);\r\n                  swal(`${res.message}`);\r\n                  this.setState(prevState => ({\r\n                    unitModal: !prevState.unitModal,\r\n                  }));\r\n                }\r\n                this.setState({\r\n                  baseUnit: \"\",\r\n                  secondaryUnit: \"\",\r\n                  unitQty: 0,\r\n                });\r\n                this.myFunctionCall();\r\n              })\r\n              .catch(err => {\r\n                console.log(err);\r\n              });\r\n            // update close\r\n          } else {\r\n            SaveUnit(payload)\r\n              .then(res => {\r\n                if (res.status) {\r\n                  swal(`${res.message}`);\r\n                  this.setState(prevState => ({\r\n                    unitModal: !prevState.unitModal,\r\n                  }));\r\n                }\r\n                this.setState({\r\n                  baseUnit: \"\",\r\n                  secondaryUnit: \"\",\r\n                  unitQty: 0,\r\n                });\r\n                this.myFunctionCall();\r\n              })\r\n              .catch(err => {\r\n                console.log(err);\r\n              });\r\n          }\r\n        } else {\r\n          swal(\"!Error\", `Quantity should be greater than 0`);\r\n        }\r\n      } else {\r\n        swal(\r\n          \"!Error\",\r\n          `${this.state.baseUnit} and ${this.state.secondaryUnit} can not be same`\r\n        );\r\n      }\r\n    } else {\r\n      swal(\r\n        \"Error\",\r\n        `Please Select  Primary & Secondary unit with Quanity Properly`\r\n      );\r\n    }\r\n  };\r\n  myFunctionCall = async () => {\r\n    let userData = JSON.parse(localStorage.getItem(\"userData\"));\r\n    await UnitListView(userData?._id)\r\n      .then(res => {\r\n        this.setState({ rowData: res?.Unit });\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  };\r\n  async componentDidMount() {\r\n    const UserInformation = this.context?.UserInformatio;\r\n    this.myFunctionCall();\r\n    await BaseUnitListView()\r\n      .then(res => {\r\n        this.setState({ baseubitListView: res.PrimaryUnit });\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n    let Product = [\r\n      {\r\n        headerName: \"Actions\",\r\n        field: \"sortorder\",\r\n        field: \"transactions\",\r\n        width: 190,\r\n        cellRendererFramework: params => {\r\n          return (\r\n            <div className=\"actions cursor-pointer\">\r\n              <Route\r\n                render={({ history }) => (\r\n                  <Eye\r\n                    className=\"mr-50\"\r\n                    size=\"25px\"\r\n                    color=\"green\"\r\n                    onClick={() => {\r\n                      this.handleChangeEdit(params.data, \"readonly\");\r\n                    }}\r\n                  />\r\n                )}\r\n              />\r\n              <Route\r\n                render={({ history }) => (\r\n                  <Edit\r\n                    className=\"mr-50\"\r\n                    size=\"25px\"\r\n                    color=\"blue\"\r\n                    onClick={() => {\r\n                      this.handleChangeEdit(params.data, \"Editable\");\r\n                    }}\r\n                  />\r\n                )}\r\n              />\r\n\r\n              <Route\r\n                render={() => (\r\n                  <Trash2\r\n                    className=\"mr-50\"\r\n                    size=\"25px\"\r\n                    color=\"red\"\r\n                    onClick={() => {\r\n                      this.runthisfunction(params?.data?._id);\r\n                    }}\r\n                  />\r\n                )}\r\n              />\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n\r\n      // ...myHeadings,\r\n\r\n      {\r\n        headerName: \"PrimaryUnit\",\r\n        field: \"primaryUnit\",\r\n        filter: true,\r\n        sortable: true,\r\n        cellRendererFramework: params => {\r\n          return (\r\n            <>\r\n              <div className=\"actions cursor-pointer\">\r\n                <span>{params?.data?.primaryUnit}</span>\r\n              </div>\r\n            </>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Quantity\",\r\n        field: \"Quantity\",\r\n        filter: true,\r\n        sortable: true,\r\n        cellRendererFramework: params => {\r\n          return (\r\n            <>\r\n              <div className=\"actions cursor-pointer\">\r\n                <span>{params?.data?.unitQty}</span>\r\n              </div>\r\n            </>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"SecondaryUnit\",\r\n        field: \"secondaryUnit\",\r\n        filter: true,\r\n        sortable: true,\r\n        cellRendererFramework: params => {\r\n          return (\r\n            <>\r\n              <div className=\"actions cursor-pointer\">\r\n                <span>{params?.data?.secondaryUnit}</span>\r\n              </div>\r\n            </>\r\n          );\r\n        },\r\n      },\r\n    ];\r\n\r\n    this.setState({ AllcolumnDefs: Product });\r\n\r\n    let userHeading = JSON.parse(localStorage.getItem(\"UserWikiList\"));\r\n    if (userHeading?.length) {\r\n      this.setState({ columnDefs: userHeading });\r\n      this.gridApi.setColumnDefs(userHeading);\r\n      this.setState({ SelectedcolumnDefs: userHeading });\r\n    } else {\r\n      this.setState({ columnDefs: Product });\r\n      this.setState({ SelectedcolumnDefs: Product });\r\n    }\r\n    this.setState({ SelectedCols: Product });\r\n  }\r\n  toggleDropdown = () => {\r\n    this.setState(prevState => ({ isOpen: !prevState.isOpen }));\r\n  };\r\n\r\n  runthisfunction(id) {\r\n    swal(\"Warning\", \"Sure You Want to Delete it\", {\r\n      buttons: {\r\n        cancel: \"cancel\",\r\n        catch: { text: \"Delete \", value: \"delete\" },\r\n      },\r\n    }).then(value => {\r\n      switch (value) {\r\n        case \"delete\":\r\n          DeleteUnitList(id)\r\n            .then(res => {\r\n              let selectedData = this.gridApi.getSelectedRows();\r\n              this.gridApi.updateRowData({ remove: selectedData });\r\n              swal(\"Deleted\", \"Record has been deleted\", \"success\");\r\n              this.myFunctionCall();\r\n            })\r\n            .catch(err => {\r\n              console.log(err);\r\n            });\r\n          break;\r\n        default:\r\n      }\r\n    });\r\n  }\r\n\r\n  onGridReady = params => {\r\n    this.gridApi = params.api;\r\n    this.gridColumnApi = params.columnApi;\r\n    this.gridRef.current = params.api;\r\n\r\n    this.setState({\r\n      currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\r\n      getPageSize: this.gridApi.paginationGetPageSize(),\r\n      totalPages: this.gridApi.paginationGetTotalPages(),\r\n    });\r\n  };\r\n\r\n  updateSearchQuery = val => {\r\n    this.gridApi.setQuickFilter(val);\r\n  };\r\n\r\n  filterSize = val => {\r\n    if (this.gridApi) {\r\n      this.gridApi.paginationSetPageSize(Number(val));\r\n      this.setState({\r\n        currenPageSize: val,\r\n        getPageSize: val,\r\n      });\r\n    }\r\n  };\r\n  handleChangeHeader = (e, value, index) => {\r\n    let check = e.target.checked;\r\n    if (check) {\r\n      SelectedColums?.push(value);\r\n    } else {\r\n      const delindex = SelectedColums?.findIndex(\r\n        ele => ele?.headerName === value?.headerName\r\n      );\r\n\r\n      SelectedColums?.splice(delindex, 1);\r\n    }\r\n  };\r\n  parseCsv(csvData) {\r\n    return new Promise((resolve, reject) => {\r\n      Papa.parse(csvData, {\r\n        header: true,\r\n        skipEmptyLines: true,\r\n        complete: result => {\r\n          if (result.data && result.data.length > 0) {\r\n            resolve(result.data);\r\n          } else {\r\n            reject(new Error(\"No data found in the CSV\"));\r\n          }\r\n        },\r\n        error: error => {\r\n          reject(error);\r\n        },\r\n      });\r\n    });\r\n  }\r\n  generatePDF(parsedData) {\r\n    let pdfsize = [Object.keys(parsedData[0])][0].length;\r\n    let size = pdfsize > 15 ? \"a1\" : pdfsize < 14 > 10 ? \"a3\" : \"a4\";\r\n\r\n    const doc = new jsPDF(\"landscape\", \"mm\", size, false);\r\n    doc.setTextColor(5, 87, 97);\r\n    const tableData = parsedData.map(row => Object.values(row));\r\n    doc.addImage(Logo, \"JPEG\", 10, 10, 50, 30);\r\n    let date = new Date();\r\n    doc.setCreationDate(date);\r\n    doc.text(\"UserAccount\", 14, 51);\r\n    doc.autoTable({\r\n      head: [Object.keys(parsedData[0])],\r\n      body: tableData,\r\n      startY: 60,\r\n    });\r\n\r\n    doc.save(\"UserList.pdf\");\r\n  }\r\n\r\n  exportToPDF = async () => {\r\n    const csvData = this.gridApi.getDataAsCsv({\r\n      processCellCallback: this.processCell,\r\n    });\r\n    try {\r\n      const parsedData = await this.parseCsv(csvData);\r\n      this.generatePDF(parsedData);\r\n    } catch (error) {\r\n      console.error(\"Error parsing CSV:\", error);\r\n    }\r\n  };\r\n  processCell = params => {\r\n    return params.value;\r\n  };\r\n\r\n  convertCsvToExcel(csvData) {\r\n    return new Promise(resolve => {\r\n      Papa.parse(csvData, {\r\n        header: true,\r\n        dynamicTyping: true,\r\n        skipEmptyLines: true,\r\n        complete: function (result) {\r\n          const worksheet = XLSX.utils.json_to_sheet(result.data);\r\n          const workbook = XLSX.utils.book_new();\r\n          XLSX.utils.book_append_sheet(workbook, worksheet, \"Sheet1\");\r\n          const excelBuffer = XLSX.write(workbook, {\r\n            bookType: \"xlsx\",\r\n            type: \"array\",\r\n          });\r\n          const blob = new Blob([excelBuffer], {\r\n            type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n          });\r\n          resolve(blob);\r\n        },\r\n      });\r\n    });\r\n  }\r\n  downloadExcelFile(blob) {\r\n    const url = window.URL.createObjectURL(blob);\r\n    const a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.download = \"Userlist.xlsx\";\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    window.URL.revokeObjectURL(url);\r\n  }\r\n\r\n  exportToExcel = async e => {\r\n    const CsvData = this.gridApi.getDataAsCsv({\r\n      processCellCallback: this.processCell,\r\n    });\r\n    const blob = await this.convertCsvToExcel(CsvData);\r\n    this.downloadExcelFile(blob);\r\n  };\r\n\r\n  convertCSVtoExcel = () => {\r\n    const CsvData = this.gridApi.getDataAsCsv({\r\n      processCellCallback: this.processCell,\r\n    });\r\n    Papa.parse(CsvData, {\r\n      complete: result => {\r\n        const ws = XLSX.utils.json_to_sheet(result.data);\r\n        const wb = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(wb, ws, \"Sheet1\");\r\n        const excelType = \"xls\";\r\n        XLSX.writeFile(wb, `UserList.${excelType}`);\r\n      },\r\n    });\r\n  };\r\n\r\n  shiftElementUp = () => {\r\n    let currentIndex = this.state.Arrindex;\r\n    if (currentIndex > 0) {\r\n      const myArrayCopy = [...this.state.SelectedcolumnDefs];\r\n      const elementToMove = myArrayCopy.splice(currentIndex, 1)[0];\r\n      this.setState({ Arrindex: currentIndex - 1 });\r\n      myArrayCopy.splice(currentIndex - 1, 0, elementToMove);\r\n      this.setState({ SelectedcolumnDefs: myArrayCopy });\r\n    }\r\n  };\r\n\r\n  shiftElementDown = () => {\r\n    let currentIndex = this.state.Arrindex;\r\n    if (currentIndex < this.state.SelectedcolumnDefs.length - 1) {\r\n      const myArrayCopy = [...this.state.SelectedcolumnDefs];\r\n      const elementToMove = myArrayCopy.splice(currentIndex, 1)[0];\r\n      this.setState({ Arrindex: currentIndex + 1 });\r\n      myArrayCopy.splice(currentIndex + 1, 0, elementToMove);\r\n      this.setState({ SelectedcolumnDefs: myArrayCopy });\r\n    }\r\n  };\r\n  convertCsvToXml = () => {\r\n    const CsvData = this.gridApi.getDataAsCsv({\r\n      processCellCallback: this.processCell,\r\n    });\r\n    Papa.parse(CsvData, {\r\n      complete: result => {\r\n        const rows = result.data;\r\n\r\n        // Create XML\r\n        let xmlString = \"<root>\\n\";\r\n\r\n        rows.forEach(row => {\r\n          xmlString += \"  <row>\\n\";\r\n          row.forEach((cell, index) => {\r\n            xmlString += `    <field${index + 1}>${cell}</field${index + 1}>\\n`;\r\n          });\r\n          xmlString += \"  </row>\\n\";\r\n        });\r\n\r\n        xmlString += \"</root>\";\r\n\r\n        // setXmlData(xmlString);\r\n\r\n        // Create a download link\r\n        const blob = new Blob([xmlString], { type: \"text/xml\" });\r\n        const link = document.createElement(\"a\");\r\n        link.href = URL.createObjectURL(blob);\r\n        link.download = \"output.xml\";\r\n        link.click();\r\n      },\r\n    });\r\n  };\r\n\r\n  HandleSetVisibleField = e => {\r\n    e.preventDefault();\r\n    this.gridApi.setColumnDefs(this.state.SelectedcolumnDefs);\r\n    this.setState({ columnDefs: this.state.SelectedcolumnDefs });\r\n    this.setState({ SelectedcolumnDefs: this.state.SelectedcolumnDefs });\r\n    this.setState({ rowData: this.state.rowData });\r\n    localStorage.setItem(\r\n      \"UserWikiList\",\r\n      JSON.stringify(this.state.SelectedcolumnDefs)\r\n    );\r\n    this.LookupviewStart();\r\n  };\r\n\r\n  HeadingRightShift = () => {\r\n    const updatedSelectedColumnDefs = [\r\n      ...new Set([\r\n        ...this.state.SelectedcolumnDefs.map(item => JSON.stringify(item)),\r\n        ...SelectedColums.map(item => JSON.stringify(item)),\r\n      ]),\r\n    ].map(item => JSON.parse(item));\r\n    this.setState({\r\n      SelectedcolumnDefs: [...new Set(updatedSelectedColumnDefs)], // Update the state with the combined array\r\n    });\r\n  };\r\n  handleLeftShift = () => {\r\n    let SelectedCols = this.state.SelectedcolumnDefs.slice();\r\n    let delindex = this.state.Arrindex; /* Your delete index here */\r\n\r\n    if (SelectedCols && delindex >= 0) {\r\n      const splicedElement = SelectedCols.splice(delindex, 1); // Remove the element\r\n\r\n      this.setState({\r\n        SelectedcolumnDefs: SelectedCols, // Update the state with the modified array\r\n      });\r\n    }\r\n  };\r\n  render() {\r\n    const {\r\n      rowData,\r\n      columnDefs,\r\n      defaultColDef,\r\n      SelectedcolumnDefs,\r\n      isOpen,\r\n      SelectedCols,\r\n      AllcolumnDefs,\r\n    } = this.state;\r\n    return (\r\n      <>\r\n        <div className=\"app-user-list\">\r\n          {this.state.EditOneUserView && this.state.EditOneUserView ? (\r\n            <Row className=\"card\">\r\n              <Col>\r\n                <div className=\"d-flex justify-content-end p-1\">\r\n                  <Button\r\n                    onClick={e => {\r\n                      e.preventDefault();\r\n                      this.setState({ EditOneUserView: false });\r\n                    }}\r\n                    color=\"danger\"\r\n                  >\r\n                    Back\r\n                  </Button>\r\n                </div>\r\n              </Col>\r\n              <EditUnit ViewOneData={this.state.ViewOneData} />\r\n            </Row>\r\n          ) : (\r\n            <>\r\n              {this.state.ViewOneUserView && this.state.ViewOneUserView ? (\r\n                <>\r\n                  <Row className=\"card\">\r\n                    <Col>\r\n                      <div className=\"d-flex justify-content-end p-1\">\r\n                        <Button\r\n                          onClick={e => {\r\n                            e.preventDefault();\r\n                            this.setState({ ViewOneUserView: false });\r\n                          }}\r\n                          color=\"danger\"\r\n                        >\r\n                          Back\r\n                        </Button>\r\n                      </div>\r\n                    </Col>\r\n\r\n                    <ViewUnit ViewOneData={this.state.ViewOneData} />\r\n                  </Row>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <Col sm=\"12\">\r\n                    <Card>\r\n                      <Row className=\"mt-2 ml-2 mr-2 \">\r\n                        <Col>\r\n                          <h1\r\n                            className=\"float-left \"\r\n                            style={{ fontWeight: \"600\" }}\r\n                          >\r\n                            Unit List\r\n                          </h1>\r\n                        </Col>\r\n\r\n                        <Col>\r\n                          <span className=\"mx-1\">\r\n                            <FaFilter\r\n                              style={{ cursor: \"pointer\" }}\r\n                              title=\"filter coloumn\"\r\n                              size=\"35px\"\r\n                              onClick={this.LookupviewStart}\r\n                              color=\"#39cccc\"\r\n                              className=\"float-right\"\r\n                            />\r\n                          </span>\r\n                          <span className=\"mx-1\">\r\n                            <div className=\"dropdown-container float-right\">\r\n                              <ImDownload\r\n                                style={{ cursor: \"pointer\" }}\r\n                                title=\"download file\"\r\n                                size=\"35px\"\r\n                                className=\"dropdown-button \"\r\n                                color=\"#39cccc\"\r\n                                onClick={this.toggleDropdown}\r\n                              />\r\n                              {isOpen && (\r\n                                <div\r\n                                  style={{\r\n                                    position: \"absolute\",\r\n                                    zIndex: \"1\",\r\n                                    border: \"1px solid #39cccc\",\r\n                                    backgroundColor: \"white\",\r\n                                  }}\r\n                                  className=\"dropdown-content dropdownmy\"\r\n                                >\r\n                                  <h5\r\n                                    onClick={() => this.exportToPDF()}\r\n                                    style={{ cursor: \"pointer\" }}\r\n                                    className=\" mx-1 myactive mt-1\"\r\n                                  >\r\n                                    .PDF\r\n                                  </h5>\r\n                                  <h5\r\n                                    onClick={() =>\r\n                                      this.gridApi.exportDataAsCsv()\r\n                                    }\r\n                                    style={{ cursor: \"pointer\" }}\r\n                                    className=\" mx-1 myactive\"\r\n                                  >\r\n                                    .CSV\r\n                                  </h5>\r\n                                  <h5\r\n                                    onClick={this.convertCSVtoExcel}\r\n                                    style={{ cursor: \"pointer\" }}\r\n                                    className=\" mx-1 myactive\"\r\n                                  >\r\n                                    .XLS\r\n                                  </h5>\r\n                                  <h5\r\n                                    onClick={this.exportToExcel}\r\n                                    style={{ cursor: \"pointer\" }}\r\n                                    className=\" mx-1 myactive\"\r\n                                  >\r\n                                    .XLSX\r\n                                  </h5>\r\n                                  <h5\r\n                                    onClick={() => this.convertCsvToXml()}\r\n                                    style={{ cursor: \"pointer\" }}\r\n                                    className=\" mx-1 myactive\"\r\n                                  >\r\n                                    .XML\r\n                                  </h5>\r\n                                </div>\r\n                              )}\r\n                            </div>\r\n                          </span>\r\n                          <span>\r\n                            <Route\r\n                              render={({ history }) => (\r\n                                <Button\r\n                                  style={{\r\n                                    cursor: \"pointer\",\r\n                                    backgroundColor: \"#39cccc\",\r\n                                    color: \"white\",\r\n                                    fontWeight: \"600\",\r\n                                  }}\r\n                                  className=\"float-right mr-1 \"\r\n                                  color=\"#39cccc\"\r\n                                  onClick={this.LookCreateUnit}\r\n                                >\r\n                                  <FaPlus size={15} /> Create Unit\r\n                                </Button>\r\n                              )}\r\n                            />\r\n                          </span>\r\n                        </Col>\r\n                      </Row>\r\n                      <CardBody style={{ marginTop: \"-1.5rem\" }}>\r\n                        {this.state.rowData === null ? null : (\r\n                          <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\r\n                            <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\r\n                              <div className=\"mb-1\">\r\n                                <UncontrolledDropdown className=\"p-1 ag-dropdown\">\r\n                                  <DropdownToggle tag=\"div\">\r\n                                    {this.gridApi\r\n                                      ? this.state.currenPageSize\r\n                                      : \"\" * this.state.getPageSize -\r\n                                        (this.state.getPageSize - 1)}\r\n                                    -\r\n                                    {this.state.rowData.length -\r\n                                      this.state.currenPageSize *\r\n                                        this.state.getPageSize >\r\n                                    0\r\n                                      ? this.state.currenPageSize *\r\n                                        this.state.getPageSize\r\n                                      : this.state.rowData.length}{\" \"}\r\n                                    of {this.state.rowData.length}\r\n                                    <ChevronDown className=\"ml-50\" size={15} />\r\n                                  </DropdownToggle>\r\n                                  <DropdownMenu right>\r\n                                    <DropdownItem\r\n                                      tag=\"div\"\r\n                                      onClick={() => this.filterSize(5)}\r\n                                    >\r\n                                      5\r\n                                    </DropdownItem>\r\n                                    <DropdownItem\r\n                                      tag=\"div\"\r\n                                      onClick={() => this.filterSize(20)}\r\n                                    >\r\n                                      20\r\n                                    </DropdownItem>\r\n                                    <DropdownItem\r\n                                      tag=\"div\"\r\n                                      onClick={() => this.filterSize(50)}\r\n                                    >\r\n                                      50\r\n                                    </DropdownItem>\r\n                                    <DropdownItem\r\n                                      tag=\"div\"\r\n                                      onClick={() => this.filterSize(100)}\r\n                                    >\r\n                                      100\r\n                                    </DropdownItem>\r\n                                    <DropdownItem\r\n                                      tag=\"div\"\r\n                                      onClick={() => this.filterSize(134)}\r\n                                    >\r\n                                      134\r\n                                    </DropdownItem>\r\n                                  </DropdownMenu>\r\n                                </UncontrolledDropdown>\r\n                              </div>\r\n                              <div className=\"d-flex flex-wrap justify-content-end mb-1\">\r\n                                <div className=\"table-input mr-1\">\r\n                                  <Input\r\n                                    placeholder=\"search Item here...\"\r\n                                    onChange={e =>\r\n                                      this.updateSearchQuery(e.target.value)\r\n                                    }\r\n                                    value={this.state.value}\r\n                                  />\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            <ContextLayout.Consumer className=\"ag-theme-alpine\">\r\n                              {context => (\r\n                                <AgGridReact\r\n                                  id=\"myAgGrid\"\r\n                                  gridOptions={this.gridOptions}\r\n                                  rowSelection=\"multiple\"\r\n                                  defaultColDef={defaultColDef}\r\n                                  columnDefs={columnDefs}\r\n                                  rowData={rowData}\r\n                                  onGridReady={this.onGridReady}\r\n                                  colResizeDefault={\"shift\"}\r\n                                  animateRows={true}\r\n                                  floatingFilter={false}\r\n                                  pagination={true}\r\n                                  paginationPageSize={\r\n                                    this.state.paginationPageSize\r\n                                  }\r\n                                  pivotPanelShow=\"always\"\r\n                                  enableRtl={context.state.direction === \"rtl\"}\r\n                                  ref={this.gridRef} // Attach the ref to the grid\r\n                                  domLayout=\"autoHeight\" // Adjust layout as needed\r\n                                />\r\n                              )}\r\n                            </ContextLayout.Consumer>\r\n                          </div>\r\n                        )}\r\n                      </CardBody>\r\n                    </Card>\r\n                  </Col>\r\n                </>\r\n              )}\r\n            </>\r\n          )}\r\n        </div>\r\n\r\n        <Modal\r\n          isOpen={this.state.modal}\r\n          toggle={this.LookupviewStart}\r\n          className={this.props.className}\r\n          style={{ maxWidth: \"1050px\" }}\r\n        >\r\n          <ModalHeader toggle={this.LookupviewStart}>Change Fileds</ModalHeader>\r\n          <ModalBody className=\"modalbodyhead\">\r\n            <Row>\r\n              <Col lg=\"4\" md=\"4\" sm=\"12\" xl=\"4\" xs=\"12\">\r\n                <h4>Available Columns</h4>\r\n                <div className=\"mainshffling\">\r\n                  <div class=\"ex1\">\r\n                    {AllcolumnDefs &&\r\n                      AllcolumnDefs?.map((ele, i) => {\r\n                        return (\r\n                          <>\r\n                            <div\r\n                              onClick={e => this.handleChangeHeader(e, ele, i)}\r\n                              key={i}\r\n                              className=\"mycustomtag mt-1\"\r\n                            >\r\n                              <span className=\"mt-1\">\r\n                                <h5\r\n                                  style={{ cursor: \"pointer\" }}\r\n                                  className=\"allfields\"\r\n                                >\r\n                                  <input\r\n                                    type=\"checkbox\"\r\n                                    // checked={check && check}\r\n                                    className=\"mx-1\"\r\n                                  />\r\n\r\n                                  {ele?.headerName}\r\n                                </h5>\r\n                              </span>\r\n                            </div>\r\n                          </>\r\n                        );\r\n                      })}\r\n                  </div>\r\n                </div>\r\n              </Col>\r\n              <Col lg=\"2\" md=\"2\" sm=\"12\" xl=\"2\" xs=\"12\" className=\"colarrowbtn\">\r\n                <div className=\"mainarrowbtn\">\r\n                  <div style={{ cursor: \"pointer\" }}>\r\n                    <FaArrowAltCircleRight\r\n                      onClick={this.HeadingRightShift}\r\n                      className=\"arrowassign\"\r\n                      size=\"30px\"\r\n                    />\r\n                  </div>\r\n                  <div style={{ cursor: \"pointer\" }} className=\"my-2\">\r\n                    <FaArrowAltCircleLeft\r\n                      onClick={this.handleLeftShift}\r\n                      className=\"arrowassign\"\r\n                      size=\"30px\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </Col>\r\n              <Col lg=\"6\" md=\"6\" sm=\"12\" xl=\"6\" xs=\"12\">\r\n                <Row>\r\n                  <Col lg=\"8\" md=\"8\" sm=\"12\" xs=\"12\">\r\n                    <h4>Avalable Columns</h4>\r\n                    <div className=\"mainshffling\">\r\n                      <div class=\"ex1\">\r\n                        {SelectedcolumnDefs &&\r\n                          SelectedcolumnDefs?.map((ele, i) => {\r\n                            return (\r\n                              <>\r\n                                <div key={i} className=\"mycustomtag mt-1\">\r\n                                  <span className=\"mt-1\">\r\n                                    <h5\r\n                                      onClick={() =>\r\n                                        this.setState({ Arrindex: i })\r\n                                      }\r\n                                      style={{\r\n                                        cursor: \"pointer\",\r\n                                        backgroundColor: `${\r\n                                          this.state.Arrindex === i\r\n                                            ? \"#1877f2\"\r\n                                            : \"\"\r\n                                        }`,\r\n                                      }}\r\n                                      className=\"allfields\"\r\n                                    >\r\n                                      <IoMdRemoveCircleOutline\r\n                                        onClick={() => {\r\n                                          const SelectedCols =\r\n                                            this.state.SelectedcolumnDefs.slice();\r\n                                          const delindex =\r\n                                            SelectedCols.findIndex(\r\n                                              element =>\r\n                                                element?.headerName ==\r\n                                                ele?.headerName\r\n                                            );\r\n\r\n                                          if (SelectedCols && delindex >= 0) {\r\n                                            const splicedElement =\r\n                                              SelectedCols.splice(delindex, 1); // Remove the element\r\n                                            // splicedElement contains the removed element, if needed\r\n\r\n                                            this.setState({\r\n                                              SelectedcolumnDefs: SelectedCols, // Update the state with the modified array\r\n                                            });\r\n                                          }\r\n                                          // const delindex =\r\n                                          //   SelectedCols.findIndex(\r\n                                          //     (element) =>\r\n                                          //       element?.headerName ==\r\n                                          //       ele?.headerName\r\n                                          //   );\r\n\r\n                                          // SelectedCols?.splice(delindex, 1);\r\n                                          // this.setState({\r\n                                          //   SelectedcolumnDefs: SelectedCols,\r\n                                          // });\r\n                                        }}\r\n                                        style={{ cursor: \"pointer\" }}\r\n                                        size=\"25px\"\r\n                                        color=\"red\"\r\n                                        className=\"mr-1\"\r\n                                      />\r\n\r\n                                      {ele?.headerName}\r\n                                    </h5>\r\n                                  </span>\r\n                                </div>\r\n                              </>\r\n                            );\r\n                          })}\r\n                      </div>\r\n                    </div>\r\n                  </Col>\r\n                  <Col lg=\"4\" md=\"4\" sm=\"12\" xs=\"12\">\r\n                    <div className=\"updownbtn justify-content-center\">\r\n                      <div>\r\n                        <BsFillArrowUpSquareFill\r\n                          className=\"arrowassign mb-1\"\r\n                          size=\"30px\"\r\n                          onClick={this.shiftElementUp}\r\n                        />\r\n                      </div>\r\n                      <div>\r\n                        <BsFillArrowDownSquareFill\r\n                          onClick={this.shiftElementDown}\r\n                          className=\"arrowassign\"\r\n                          size=\"30px\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <div className=\"d-flex justify-content-center\">\r\n                  <Button onClick={this.HandleSetVisibleField} color=\"primary\">\r\n                    Submit\r\n                  </Button>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </ModalBody>\r\n        </Modal>\r\n        {/* Create unit */}\r\n        <Modal\r\n          isOpen={this.state.unitModal}\r\n          toggle={this.LookCreateUnit}\r\n          className={this.props.className}\r\n        >\r\n          <ModalHeader toggle={this.LookCreateUnit}>Select Unit</ModalHeader>\r\n          <ModalBody className=\"modalbodyheadunit\">\r\n            <Form className=\"m-1\" onSubmit={this.handleSave}>\r\n              <Row className=\"justifyContent-around\">\r\n                <Col lg=\"6\" md=\"6\" sm=\"12\">\r\n                  <Label>Primary Unit</Label>\r\n                  <CustomInput\r\n                    type=\"select\"\r\n                    disabled={this.state.isDisable ? true : false}\r\n                    required\r\n                    placeholder=\"Select Type\"\r\n                    name=\"baseUnit\"\r\n                    value={this.state.baseUnit}\r\n                    defaultValue=\"None\"\r\n                    //  onChange={e => {\r\n                    //                       console.log(e.target.value);\r\n                    //                       this.setState({ baseUnit: e.target.value });\r\n                    //                     }}\r\n                    //                   >\r\n                    onChange={e => {\r\n                      this.setState({ baseUnit: e.target.value });\r\n                      this.changeHandler(e);\r\n                    }}\r\n                  >\r\n                    <option value=\"None\">None</option>\r\n                    {this.state.baseubitListView?.map(val => {\r\n                      return (\r\n                        <option value={val.primaryUnit}>\r\n                          {val.primaryUnit}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                  </CustomInput>\r\n                </Col>\r\n\r\n                <Col lg=\"6\" md=\"6\" sm=\"12\">\r\n                  <Label>Secondary Unit</Label>\r\n                  <CustomInput\r\n                    type=\"select\"\r\n                    required\r\n                    disabled={this.state.isDisable ? true : false}\r\n                    placeholder=\"Select Type\"\r\n                    name=\"secondaryUnit\"\r\n                    value={this.state.secondaryUnit}\r\n                    defaultValue=\"None\"\r\n                    onChange={e => {\r\n                      console.log(e.target.value);\r\n                      this.setState({ secondaryUnit: e.target.value });\r\n                    }}\r\n                  >\r\n                    <option value=\"None\">None</option>\r\n                    {this.state.baseubitListView?.map(val => {\r\n                      return (\r\n                        <option value={val.primaryUnit}>\r\n                          {val.primaryUnit}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                  </CustomInput>\r\n                </Col>\r\n              </Row>\r\n              {this.state.baseUnit != \"None\" &&\r\n              this.state.baseUnit != this.state.secondaryUnit ? (\r\n                <>\r\n                  <Row>\r\n                    <Col md=\"12\" lg=\"12\" sm=\"12\">\r\n                      <h6 className=\"py-2\">Conversion Rate</h6>\r\n                      <Row>\r\n                        <Col className=\"\" lg=\"1\" md=\"2\" sm=\"12\"></Col>\r\n                        <Col lg=\"10\" md=\"8\" sm=\"12\">\r\n                          <div className=\"d-flex justify-content-around\">\r\n                            <div>\r\n                              <Input\r\n                                type=\"radio\"\r\n                                checked\r\n                                className=\"primarystyle\"\r\n                              />\r\n                              <span className=\"priamryValue\">\r\n                                1 {this.state.baseUnit} =\r\n                              </span>\r\n                            </div>\r\n                            <div className=\"\">\r\n                              <Input\r\n                                required\r\n                                type=\"number\"\r\n                                disabled={this.state.isDisable ? true : false}\r\n                                className=\"\"\r\n                                name=\"unitQty\"\r\n                                checked\r\n                                style={{ width: \"80px\", height: \"2px\" }}\r\n                                value={this.state.unitQty}\r\n                                onChange={e =>\r\n                                  this.setState({\r\n                                    unitQty: e.target.value,\r\n                                  })\r\n                                }\r\n                              />\r\n                            </div>\r\n                            <div>\r\n                              <span>{this.state.secondaryUnit}</span>\r\n                            </div>\r\n                          </div>\r\n                        </Col>\r\n                        <Col className=\"\" lg=\"1\" md=\"2\" sm=\"12\"></Col>\r\n                      </Row>\r\n                    </Col>\r\n                  </Row>\r\n                </>\r\n              ) : null}\r\n\r\n              <hr></hr>\r\n              <Row className=\"justify-content-end modalbodyheadunit\">\r\n                <Col>\r\n                  <span>\r\n                    <Route\r\n                      render={({ history }) => (\r\n                        <Badge\r\n                          style={{ cursor: \"pointer\" }}\r\n                          className=\"float-right mr-1\"\r\n                          color=\"primary\"\r\n                          onClick={this.LookAddUnit}\r\n                        >\r\n                          <FaPlus size={15} /> Add Unit\r\n                        </Badge>\r\n                      )}\r\n                    />\r\n                  </span>\r\n                </Col>\r\n                <Col>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    disabled={this.state.isDisable ? true : false}\r\n                    size=\"sm\"\r\n                    color=\"primary\"\r\n                  >\r\n                    Save\r\n                  </Button>\r\n                </Col>\r\n              </Row>\r\n            </Form>\r\n          </ModalBody>\r\n        </Modal>\r\n\r\n        {/* Add unit */}\r\n        <Modal\r\n          isOpen={this.state.AddunitModal}\r\n          toggle={this.LookAddUnit}\r\n          className={this.props.className}\r\n          //   style={{ maxWidth: \"1050px\" }}\r\n        >\r\n          <ModalHeader toggle={this.LookAddUnit}>Add New Unit</ModalHeader>\r\n          <ModalBody className=\"modalbodyheadunit\">\r\n            <Form className=\"m-1\" onSubmit={this.handleAddUnit}>\r\n              <Col>\r\n                <Label>Unit Name</Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"\"\r\n                  name=\"unitName\"\r\n                  placeholder=\"Unit Name\"\r\n                  // style={{ width: \"80px\", height: \"2px\" }}\r\n                  value={this.state.unitName}\r\n                  onChange={e => {\r\n                    console.log(e.target.value);\r\n                    this.setState({\r\n                      primaryUnit: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <hr></hr>\r\n              <Row className=\"justify-content-end modalbodyheadunit\">\r\n                <Button type=\"submit\" size=\"sm\" color=\"primary\">\r\n                  Save Unit\r\n                </Button>\r\n              </Row>\r\n            </Form>\r\n          </ModalBody>\r\n        </Modal>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default UnitList;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"row\", \"disabled\", \"check\", \"inline\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  row: PropTypes.bool,\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar FormGroup = function FormGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      row = props.row,\n      disabled = props.disabled,\n      check = props.check,\n      inline = props.inline,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, row ? 'row' : false, check ? 'form-check' : 'form-group', check && inline ? 'form-check-inline' : false, check && disabled ? 'disabled' : false), cssModule);\n\n  if (Tag === 'fieldset') {\n    attributes.disabled = disabled;\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormGroup.propTypes = propTypes;\nFormGroup.defaultProps = defaultProps;\nexport default FormGroup;","module.exports = __webpack_public_path__ + \"static/media/logomain.cee4d0c2.png\";"],"sourceRoot":""}