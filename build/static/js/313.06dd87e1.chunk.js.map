{"version":3,"sources":["views/apps/freshlist/accounts/CreateCustomer.js","../node_modules/reactstrap/es/FormGroup.js"],"names":["i","CreateCustomer","useState","CreatAccountView","setCreatAccountView","RoleList","setRoleList","Countries","setCountry","BulkImport","setBulkImport","States","setState","Cities","setCities","formData","setFormData","dropdownValue","setdropdownValue","index","setindex","error","setError","Context","useContext","UserContext","history","useHistory","handleInputChange","e","type","target","name","value","checked","test","files","length","useEffect","console","log","userdata","JSON","parse","localStorage","getItem","Get_RoleList","_id","database","then","res","ShowList","Role","filter","item","roleName","toLowerCase","includes","catch","err","swal","CreateCustomerxmlView","jsonData","xmlJs","xml2json","data","compact","spaces","input","MyDropDown","submitHandler","preventDefault","undefined","formdata","FormData","append","_BulkUpload","Bulk_Upload_Customer","message","map","ele","dropdown","_text","_attributes","val","status","rolename","navigator","geolocation","getCurrentPosition","position","Date","timestamp","toLocaleString","coords","latitude","longitude","timeout","enableHighAccuracy","forEach","key","CreateCustomersave","goBack","response","className","render","style","cursor","color","onClick","push","onSubmit","lg","md","required","onChange","sm","label","option","moment","tz","format","phoneinput","inputClass","country","onKeyDown","countryCodeEditable","phone","library","options","Country","getAllCountries","getOptionLabel","getOptionValue","State","getStatesOfCountry","isoCode","City","getCitiesOfState","countryCode","placeholder","dateFormat","UserInformatio","timeZone","number","onWheel","multiple","allimages","Array","from","handleFileChange","marginRight","Ripple","_excluded","propTypes","children","PropTypes","node","row","bool","check","inline","disabled","tag","tagPropType","string","cssModule","object","FormGroup","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps"],"mappings":"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","file":"static/js/313.06dd87e1.chunk.js","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\r\nimport xmlJs from \"xml-js\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Form,\r\n  Row,\r\n  Input,\r\n  Label,\r\n  Button,\r\n  FormGroup,\r\n  CustomInput,\r\n  Badge,\r\n} from \"reactstrap\";\r\nimport { history } from \"../../../../history\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Country, State, City } from \"country-state-city\";\r\nimport Select from \"react-select\";\r\nimport moment from \"moment-timezone\";\r\nimport { Route, useHistory } from \"react-router-dom\";\r\n\r\nimport swal from \"sweetalert\";\r\nimport \"../../../../../src/layouts/assets/scss/pages/users.scss\";\r\n\r\nimport {\r\n  CreateAccountSave,\r\n  CreateAccountView,\r\n  CreateCustomersave,\r\n  CreateCustomerxmlView,\r\n  Get_RoleList,\r\n  _BulkUpload,\r\n} from \"../../../../ApiEndPoint/ApiCalling\";\r\nimport { BiEnvelope } from \"react-icons/bi\";\r\nimport { FcPhoneAndroid } from \"react-icons/fc\";\r\nimport { BsWhatsapp } from \"react-icons/bs\";\r\nimport \"../../../../assets/scss/pages/users.scss\";\r\nimport UserContext from \"../../../../context/Context\";\r\nimport { CloudLightning } from \"react-feather\";\r\nimport { FaPlus } from \"react-icons/fa\";\r\nimport { Bulk_Upload_Customer } from \"../../../../ApiEndPoint/Api\";\r\n\r\nconst CreateCustomer = () => {\r\n  const [CreatAccountView, setCreatAccountView] = useState([]);\r\n  const [RoleList, setRoleList] = useState([]);\r\n  const [Countries, setCountry] = useState({});\r\n  const [BulkImport, setBulkImport] = useState(null);\r\n\r\n  const [States, setState] = useState({});\r\n  const [Cities, setCities] = useState({});\r\n  const [formData, setFormData] = useState({});\r\n  const [dropdownValue, setdropdownValue] = useState([]);\r\n  const [index, setindex] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [permissions, setpermissions] = useState({});\r\n\r\n  const Context = useContext(UserContext);\r\n  let history = useHistory();\r\n\r\n  const handleFileChange = (e, type, i) => {\r\n    const { name, value, checked } = e.target;\r\n    let allimages = Array.from(e.target.files);\r\n    setindex(i);\r\n    setFormData({\r\n      ...formData,\r\n      [name]: allimages,\r\n    });\r\n  };\r\n  const handleChange = () => {\r\n    console.log(\"object\");\r\n  };\r\n  const handleInputChange = (e, type, i) => {\r\n    const { name, value, checked } = e.target;\r\n    setindex(i);\r\n    if (type == \"checkbox\") {\r\n      if (checked) {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      } else {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      }\r\n    } else {\r\n      if (type == \"number\") {\r\n        if (/^\\d{0,10}$/.test(value)) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          setError(\"\");\r\n        }\r\n        //  else {\r\n        //   setError(\r\n        //     \"Please enter a valid number with a maximum length of 10 digits\"\r\n        //   );\r\n        // }\r\n      } else if (type == \"file\") {\r\n        // debugger;\r\n        if (e.target.files) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: e.target.files[0],\r\n          });\r\n        }\r\n      } else {\r\n        if (value.length <= 10) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          // console.log(value);\r\n          setError(\"\");\r\n        } else {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          // setError(\"Input length exceeds the maximum of 10 characters\");\r\n        }\r\n      }\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    console.log(formData);\r\n  }, [formData]);\r\n  useEffect(() => {\r\n    let userdata = JSON.parse(localStorage.getItem(\"userData\"));\r\n    Get_RoleList(userdata?._id, userdata?.database)\r\n      .then((res) => {\r\n        let ShowList = res?.Role?.filter((item, i) =>\r\n          item?.roleName?.toLowerCase()?.includes(\"customer\")\r\n        );\r\n        setRoleList(ShowList);\r\n        // console.log(ShowList);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        swal(\"Roles List Not found\");\r\n      });\r\n\r\n    // console.log(userdata?._id);\r\n    // formData[\"created_by\"] = userdata?._id;\r\n  }, []);\r\n  useEffect(() => {\r\n    CreateCustomerxmlView()\r\n      .then((res) => {\r\n        const jsonData = xmlJs.xml2json(res.data, {\r\n          compact: true,\r\n          spaces: 2,\r\n        });\r\n\r\n        console.log(JSON.parse(jsonData)?.CreateCustomer);\r\n        setCreatAccountView(JSON.parse(jsonData)?.CreateCustomer?.input);\r\n\r\n        setdropdownValue(JSON.parse(jsonData)?.CreateCustomer?.MyDropDown);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        swal(\"Something Went Wrong\");\r\n      });\r\n  }, []);\r\n  const submitHandler = async (e) => {\r\n    e.preventDefault();\r\n    if (BulkImport !== null || BulkImport != undefined) {\r\n      let formdata = new FormData();\r\n      formdata.append(\"file\", BulkImport);\r\n\r\n      await _BulkUpload(Bulk_Upload_Customer, formdata)\r\n        .then((res) => {\r\n          swal(`${res?.message}`);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          swal(\"Something Went Wrong\");\r\n        });\r\n    } else {\r\n      let userdata = JSON.parse(localStorage.getItem(\"userData\"));\r\n      let formdata = new FormData();\r\n      dropdownValue?.map((ele, i) => {\r\n        formdata.append(\r\n          `${ele?.dropdown?.name?._text}`,\r\n          formData[ele?.dropdown?.name?._text]\r\n        );\r\n      });\r\n      CreatAccountView?.map((ele, i) => {\r\n        if (ele?.type?._attributes?.type == \"text\") {\r\n          formdata.append(`${ele?.name._text}`, formData[ele?.name?._text]);\r\n        } else if (ele?.type?._attributes?.type == \"file\") {\r\n          if (ele?.name?._text == \"Shopphoto\") {\r\n            formData[ele?.name?._text]?.map((val, index) => {\r\n              formdata.append(\"file\", formData[ele?.name?._text][index]);\r\n            });\r\n          }\r\n          if (ele?.name?._text == \"photo\") {\r\n            formData[ele?.name?._text]?.map((val, index) => {\r\n              formdata.append(\"files\", formData[ele?.name?._text][index]);\r\n            });\r\n          }\r\n        } else {\r\n          formdata.append(`${ele?.name?._text}`, formData[ele?.name?._text]);\r\n        }\r\n      });\r\n      // formdata.append(\r\n      //   `${dropdownValue?.name?._text}`,\r\n      //   formData[dropdownValue?.name?._text]\r\n      // );\r\n      formdata.append(\"status\", formData?.status);\r\n      formdata.append(\"database\", userdata?.database);\r\n      formdata.append(\"rolename\", formData?.rolename);\r\n\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(\r\n          (position) => {\r\n            const date = new Date(position.timestamp);\r\n            const CurentTime = date.toLocaleString();\r\n            formdata.append(\"latitude\", position.coords.latitude);\r\n            formdata.append(\"longitude\", position.coords.longitude);\r\n          },\r\n          (error) => {\r\n            // this.setState({ Error: `Error: ${error}` });\r\n            swal(`Error: ${error}`);\r\n          },\r\n          { timeout: 10000, enableHighAccuracy: true }\r\n        );\r\n      } else {\r\n        swal(`Error: Geolocation not found`);\r\n      }\r\n\r\n      formdata.forEach((value, key) => {\r\n        console.log(key, value);\r\n      });\r\n      debugger;\r\n      if (error) {\r\n        // swal(\"Error occured while Entering Details\");\r\n      } else {\r\n        CreateCustomersave(formdata)\r\n          .then((res) => {\r\n            console.log(res);\r\n            setFormData({});\r\n            if (res.status) {\r\n              history.goBack();\r\n              swal(\"Customer Created Successfully\");\r\n            }\r\n          })\r\n          .catch((err) => {\r\n            console.log(err.response);\r\n            swal(\"Please Fill correct details\");\r\n          });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Card>\r\n          <Row className=\"m-2\">\r\n            <Col>\r\n              <h1 className=\"float-left\">Create Customer</h1>\r\n            </Col>\r\n            <Col>\r\n              <div className=\"float-right\">\r\n                <Route\r\n                  render={({ history }) => (\r\n                    <Button\r\n                      style={{ cursor: \"pointer\" }}\r\n                      className=\"float-right mr-1\"\r\n                      color=\"primary\"\r\n                      onClick={() =>\r\n                        history.push(\"/app/SoftNumen/CustomerSearch\")\r\n                      }>\r\n                      {\" \"}\r\n                      Back\r\n                      {/* <FaPlus size={15} /> Create User */}\r\n                    </Button>\r\n                  )}\r\n                />\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          {/* <hr /> */}\r\n\r\n          <CardBody>\r\n            <Form className=\"m-1\" onSubmit={submitHandler}>\r\n              <Row className=\"mb-2\">\r\n                <Col lg=\"4\" md=\"4\">\r\n                  <FormGroup>\r\n                    <Label className=\"mb-1\">Role List *</Label>\r\n                    <CustomInput\r\n                      required\r\n                      type=\"select\"\r\n                      name=\"rolename\"\r\n                      value={formData[\"rolename\"]}\r\n                      onChange={(e) => {\r\n                        setFormData({\r\n                          ...formData,\r\n                          [\"rolename\"]: e.target.value,\r\n                        });\r\n                      }}>\r\n                      <option>--select Role--</option>\r\n                      {RoleList &&\r\n                        RoleList?.length &&\r\n                        RoleList?.map((ele, i) => {\r\n                          return (\r\n                            <option value={ele?._id}>{ele?.roleName}</option>\r\n                          );\r\n                        })}\r\n                    </CustomInput>\r\n                  </FormGroup>\r\n                </Col>\r\n                {dropdownValue && dropdownValue ? (\r\n                  <>\r\n                    {dropdownValue?.map((ele, i) => {\r\n                      return (\r\n                        <>\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label className=\"mb-1\">\r\n                                {ele?.dropdown?.label?._text &&\r\n                                  ele?.dropdown?.label?._text}\r\n                              </Label>\r\n                              <CustomInput\r\n                                required\r\n                                type=\"select\"\r\n                                name={ele?.dropdown?.name?._text}\r\n                                value={formData[ele?.dropdown?.name?._text]}\r\n                                onChange={handleInputChange}>\r\n                                <option value=\"\">--Select --</option>\r\n                                {ele?.dropdown?.option?.map((option, index) => (\r\n                                  <option\r\n                                    key={index}\r\n                                    value={option?._attributes?.value}>\r\n                                    {option?._attributes?.value}\r\n                                  </option>\r\n                                ))}\r\n                              </CustomInput>\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </>\r\n                      );\r\n                    })}\r\n                  </>\r\n                ) : null}\r\n\r\n                {CreatAccountView &&\r\n                  CreatAccountView?.map((ele, i) => {\r\n                    {\r\n                      /* console.log(Context?.UserInformatio?.dateFormat); */\r\n                    }\r\n                    // console.log(Countries);\r\n                    // console.log(States);\r\n                    const convertedTime = moment(\"2022-08-05T12:00:00\")\r\n                      .tz(\"America/New_York\")\r\n                      .format(\"D MMM, YYYY HH:mm\");\r\n\r\n                    if (!!ele?.phoneinput) {\r\n                      return (\r\n                        <>\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label className=\"mb-1\">\r\n                                {ele?.label?._text}\r\n                              </Label>\r\n                              <PhoneInput\r\n                                inputClass=\"myphoneinput\"\r\n                                country={\"us\"}\r\n                                onKeyDown={(e) => {\r\n                                  if (\r\n                                    ele?.type?._attributes?.type == \"number\"\r\n                                  ) {\r\n                                    [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                      e.preventDefault();\r\n                                  }\r\n                                }}\r\n                                countryCodeEditable={false}\r\n                                name={ele?.name?._text}\r\n                                value={formData[ele?.name?._text]}\r\n                                onChange={(phone) => {\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [ele?.name?._text]: phone,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </>\r\n                      );\r\n                    } else if (!!ele?.library) {\r\n                      if (ele?.label._text?.includes(\"ountry\")) {\r\n                        {\r\n                          /* console.log(ele); */\r\n                        }\r\n                        return (\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label className=\"mb-1\">\r\n                                {ele?.label?._text}\r\n                              </Label>\r\n                              <Select\r\n                                inputClass=\"countryclass\"\r\n                                className=\"countryclassnw\"\r\n                                options={Country.getAllCountries()}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={Countries}\r\n                                onChange={(country) => {\r\n                                  setCountry(country);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"Country\"]: country?.name,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else if (ele?.label._text?.includes(\"tate\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label className=\"mb-1\">\r\n                                {ele?.label?._text}\r\n                              </Label>\r\n                              <Select\r\n                                options={State?.getStatesOfCountry(\r\n                                  Countries?.isoCode\r\n                                )}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={States}\r\n                                onChange={(State) => {\r\n                                  setState(State);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"State\"]: State?.name,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else if (ele?.label._text?.includes(\"ity\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label className=\"mb-1\">\r\n                                {ele?.label?._text}\r\n                              </Label>\r\n                              <Select\r\n                                options={City?.getCitiesOfState(\r\n                                  States?.countryCode,\r\n                                  States?.isoCode\r\n                                )}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={Cities}\r\n                                onChange={(City) => {\r\n                                  setCities(City);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"City\"]: City?.name,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else {\r\n                        return (\r\n                          <>\r\n                            {ele?.type?._attributes?.type == \"date\" ? (\r\n                              <>\r\n                                <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                  <FormGroup key={i}>\r\n                                    <Label className=\"mb-1\">\r\n                                      {ele?.label?._text}\r\n                                    </Label>\r\n\r\n                                    <Input\r\n                                      onKeyDown={(e) => {\r\n                                        if (\r\n                                          ele?.type?._attributes?.type ==\r\n                                          \"number\"\r\n                                        ) {\r\n                                          [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                            e.key\r\n                                          ) && e.preventDefault();\r\n                                        }\r\n                                      }}\r\n                                      type={ele?.type?._attributes?.type}\r\n                                      placeholder={ele?.placeholder?._text}\r\n                                      name={ele?.name?._text}\r\n                                      dateFormat={\r\n                                        Context?.UserInformatio?.dateFormat\r\n                                      }\r\n                                      value={\r\n                                        moment(formData[ele?.name?._text])\r\n                                          .tz(Context?.UserInformatio?.timeZone)\r\n                                          .format(\r\n                                            Context?.UserInformatio?.dateFormat\r\n                                          )\r\n                                        // formData[ele?.name?._text]\r\n                                      }\r\n                                      // value={formData[ele?.name?._text]}\r\n                                      onChange={(e) =>\r\n                                        handleInputChange(\r\n                                          e,\r\n                                          ele?.type?._attributes?.type,\r\n                                          i\r\n                                        )\r\n                                      }\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </FormGroup>\r\n                                </Col>\r\n                              </>\r\n                            ) : (\r\n                              <>\r\n                                <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                  <FormGroup key={i}>\r\n                                    <Label className=\"mb-1\">\r\n                                      {ele?.label?._text}\r\n                                    </Label>\r\n\r\n                                    <Input\r\n                                      onKeyDown={(e) => {\r\n                                        if (\r\n                                          ele?.type?._attributes?.type ==\r\n                                          \"number\"\r\n                                        ) {\r\n                                          [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                            e.key\r\n                                          ) && e.preventDefault();\r\n                                        }\r\n                                      }}\r\n                                      type={ele?.type?._attributes?.type}\r\n                                      placeholder={ele?.placeholder?._text}\r\n                                      name={ele?.name?._text}\r\n                                      value={formData[ele?.name?._text]}\r\n                                      onChange={(e) =>\r\n                                        handleInputChange(\r\n                                          e,\r\n                                          ele?.type?._attributes?.type,\r\n                                          i\r\n                                        )\r\n                                      }\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </FormGroup>\r\n                                </Col>\r\n                              </>\r\n                            )}\r\n                          </>\r\n                        );\r\n                      }\r\n                    } else {\r\n                      return (\r\n                        <>\r\n                          {!!ele?.number ? (\r\n                            <>\r\n                              <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                <FormGroup key={i}>\r\n                                  <Label className=\"mb-1\">\r\n                                    {ele?.label?._text}\r\n                                  </Label>\r\n\r\n                                  <Input\r\n                                    onWheel={(e) => {\r\n                                      e.preventDefault(); // Prevent the mouse wheel scroll event\r\n                                    }}\r\n                                    onKeyDown={(e) => {\r\n                                      if (\r\n                                        ele?.type?._attributes?.type == \"number\"\r\n                                      ) {\r\n                                        [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                          e.preventDefault();\r\n                                      }\r\n                                    }}\r\n                                    type={ele?.type?._attributes?.type}\r\n                                    placeholder={ele?.placeholder?._text}\r\n                                    name={ele?.name?._text}\r\n                                    value={formData[ele?.name?._text]}\r\n                                    onChange={(e) =>\r\n                                      handleInputChange(\r\n                                        e,\r\n                                        ele?.type?._attributes?.type,\r\n                                        i\r\n                                      )\r\n                                    }\r\n                                  />\r\n                                  {index === i ? (\r\n                                    <>\r\n                                      {error && (\r\n                                        <span style={{ color: \"red\" }}>\r\n                                          {error}\r\n                                        </span>\r\n                                      )}\r\n                                    </>\r\n                                  ) : (\r\n                                    <></>\r\n                                  )}\r\n                                </FormGroup>\r\n                              </Col>\r\n                            </>\r\n                          ) : (\r\n                            <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                              <FormGroup key={i}>\r\n                                {ele?.type?._attributes?.type &&\r\n                                ele?.type?._attributes?.type == \"file\" ? (\r\n                                  <>\r\n                                    <Label className=\"mb-1\">\r\n                                      {ele?.label?._text}\r\n                                    </Label>\r\n\r\n                                    <Input\r\n                                      multiple\r\n                                      className=\"form-control\"\r\n                                      type={ele?.type?._attributes?.type}\r\n                                      placeholder={ele?.placeholder?._text}\r\n                                      name={ele?.name?._text}\r\n                                      //   value={formData[ele?.name?._text]}\r\n                                      onChange={(e) => {\r\n                                        // const value = e.target.value;\r\n                                        // // Use regular expression to allow only numbers\r\n                                        // const numericValue = value.replace(\r\n                                        //   /\\D/g,\r\n                                        //   \"\"\r\n                                        // );\r\n                                        handleFileChange(\r\n                                          e,\r\n                                          ele?.type?._attributes?.type,\r\n                                          i\r\n                                        );\r\n                                      }}\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </>\r\n                                ) : (\r\n                                  <>\r\n                                    <Label className=\"mb-1\">\r\n                                      {ele?.label?._text}\r\n                                    </Label>\r\n\r\n                                    <Input\r\n                                      className=\"form-control\"\r\n                                      onKeyDown={(e) => {\r\n                                        if (\r\n                                          ele?.type?._attributes?.type ==\r\n                                          \"number\"\r\n                                        ) {\r\n                                          [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                            e.key\r\n                                          ) && e.preventDefault();\r\n                                        }\r\n                                      }}\r\n                                      type={ele?.type?._attributes?.type}\r\n                                      placeholder={ele?.placeholder?._text}\r\n                                      name={ele?.name?._text}\r\n                                      value={formData[ele?.name?._text]}\r\n                                      onChange={(e) => {\r\n                                        // const value = e.target.value;\r\n                                        // // Use regular expression to allow only numbers\r\n                                        // const numericValue = value.replace(\r\n                                        //   /\\D/g,\r\n                                        //   \"\"\r\n                                        // );\r\n                                        handleInputChange(\r\n                                          e,\r\n                                          ele?.type?._attributes?.type,\r\n                                          i\r\n                                        );\r\n                                      }}\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </>\r\n                                )}\r\n\r\n                                {/* <Label className=\"mb-1\">\r\n                                  {ele?.label?._text}\r\n                                </Label>\r\n\r\n                                <Input\r\n                                  className=\"form-control\"\r\n                                  onKeyDown={(e) => {\r\n                                    if (\r\n                                      ele?.type?._attributes?.type == \"number\"\r\n                                    ) {\r\n                                      [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                        e.preventDefault();\r\n                                    }\r\n                                  }}\r\n                                  type={ele?.type?._attributes?.type}\r\n                                  placeholder={ele?.placeholder?._text}\r\n                                  name={ele?.name?._text}\r\n                                  value={formData[ele?.name?._text]}\r\n                                  onChange={(e) => {\r\n                                    // const value = e.target.value;\r\n                                    // // Use regular expression to allow only numbers\r\n                                    // const numericValue = value.replace(\r\n                                    //   /\\D/g,\r\n                                    //   \"\"\r\n                                    // );\r\n                                    handleInputChange(\r\n                                      e,\r\n                                      ele?.type?._attributes?.type,\r\n                                      i\r\n                                    );\r\n                                  }}\r\n                                />\r\n                                {index === i ? (\r\n                                  <>\r\n                                    {error && (\r\n                                      <span style={{ color: \"red\" }}>\r\n                                        {error}\r\n                                      </span>\r\n                                    )}\r\n                                  </>\r\n                                ) : (\r\n                                  <></>\r\n                                )} */}\r\n                              </FormGroup>\r\n                            </Col>\r\n                          )}\r\n                        </>\r\n                      );\r\n                    }\r\n                  })}\r\n              </Row>\r\n\r\n              <hr />\r\n              <Row>\r\n                <Col lg=\"12\" md=\"12\" sm=\"12\">\r\n                  <Label>OR</Label>\r\n                </Col>\r\n                <Col lg=\"4\" md=\"4\" sm=\"12\">\r\n                  <FormGroup>\r\n                    <Label>Bulk Import</Label>\r\n\r\n                    <Input\r\n                      className=\"form-control\"\r\n                      type=\"file\"\r\n                      placeholder=\"\"\r\n                      name=\"BulkImport\"\r\n                      onChange={(e) => {\r\n                        setBulkImport(e.target.files[0]);\r\n                      }}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n              </Row>\r\n              <Row className=\"mt-2\">\r\n                <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2 mt-1\">\r\n                  <Label className=\"mb-0\">Status</Label>\r\n                  <div\r\n                    className=\"form-label-group\"\r\n                    onChange={(e) => {\r\n                      setFormData({\r\n                        ...formData,\r\n                        [\"status\"]: e.target.value,\r\n                      });\r\n                    }}>\r\n                    <input\r\n                      style={{ marginRight: \"3px\" }}\r\n                      type=\"radio\"\r\n                      name=\"status\"\r\n                      value=\"Active\"\r\n                    />\r\n                    <span style={{ marginRight: \"20px\" }}>Active</span>\r\n\r\n                    <input\r\n                      style={{ marginRight: \"3px\" }}\r\n                      type=\"radio\"\r\n                      name=\"status\"\r\n                      value=\"Deactive\"\r\n                    />\r\n                    <span style={{ marginRight: \"3px\" }}>Deactive</span>\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row>\r\n                <Button.Ripple\r\n                  color=\"primary\"\r\n                  type=\"submit\"\r\n                  className=\"mr-1 mt-2 mx-2\">\r\n                  Submit\r\n                </Button.Ripple>\r\n              </Row>\r\n            </Form>\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default CreateCustomer;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"row\", \"disabled\", \"check\", \"inline\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  row: PropTypes.bool,\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar FormGroup = function FormGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      row = props.row,\n      disabled = props.disabled,\n      check = props.check,\n      inline = props.inline,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, row ? 'row' : false, check ? 'form-check' : 'form-group', check && inline ? 'form-check-inline' : false, check && disabled ? 'disabled' : false), cssModule);\n\n  if (Tag === 'fieldset') {\n    attributes.disabled = disabled;\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormGroup.propTypes = propTypes;\nFormGroup.defaultProps = defaultProps;\nexport default FormGroup;"],"sourceRoot":""}